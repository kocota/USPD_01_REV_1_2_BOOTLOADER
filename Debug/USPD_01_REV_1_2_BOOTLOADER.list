
USPD_01_REV_1_2_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9b4  0800f9b4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9b4  0800f9b4  0001f9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9bc  0800f9bc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9bc  0800f9bc  0001f9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c0  0800f9c0  0001f9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800f9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00009e70  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009ef8  20009ef8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029c13  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005621  00000000  00000000  00049cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  0004f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001958  00000000  00000000  00050e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274fe  00000000  00000000  000527c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022ffd  00000000  00000000  00079cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0e02  00000000  00000000  0009ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017dabd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007468  00000000  00000000  0017db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f370 	.word	0x0800f370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f370 	.word	0x0800f370

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	20000158 	.word	0x20000158

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000358 	.word	0x20000358
 80005dc:	2000040c 	.word	0x2000040c

080005e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_SystemReset+0x28>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <__NVIC_SystemReset+0x20>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0004 	.word	0x05fa0004

0800060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_TxCpltCallback+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d104      	bne.n	8000628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_UART_TxCpltCallback+0x28>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f82e 	bl	8006684 <osSemaphoreRelease>
	  }
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004800 	.word	0x40004800
 8000634:	2000978c 	.word	0x2000978c

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_RxCpltCallback+0x50>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d119      	bne.n	800067e <HAL_UART_RxCpltCallback+0x46>
	  {
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	b2d1      	uxtb	r1, r2
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000654:	7011      	strb	r1, [r2, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 800065a:	7819      	ldrb	r1, [r3, #0]
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 800065e:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	4611      	mov	r1, r2
 800066a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f866 	bl	8006740 <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8000674:	2201      	movs	r2, #1
 8000676:	4906      	ldr	r1, [pc, #24]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <HAL_UART_RxCpltCallback+0x64>)
 800067a:	f004 fd2f 	bl	80050dc <HAL_UART_Receive_DMA>
	  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40004800 	.word	0x40004800
 800068c:	2000080c 	.word	0x2000080c
 8000690:	20009580 	.word	0x20009580
 8000694:	20009680 	.word	0x20009680
 8000698:	200080bc 	.word	0x200080bc
 800069c:	20008068 	.word	0x20008068

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b0be      	sub	sp, #248	; 0xf8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f001 f879 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 fa79 	bl	8000ba0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fbcb 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b2:	f000 fba1 	bl	8000df8 <MX_DMA_Init>
  MX_IWDG_Init();
 80006b6:	f000 fae1 	bl	8000c7c <MX_IWDG_Init>
  MX_SPI2_Init();
 80006ba:	f000 fb3d 	bl	8000d38 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006be:	f000 fb71 	bl	8000da4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80006c2:	f000 faf5 	bl	8000cb0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON(); // пикаем бузером
 80006c6:	f00b f85d 	bl	800b784 <BUZ_ON>
  HAL_Delay(50);
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f001 f8dc 	bl	8001888 <HAL_Delay>
  BUZ_OFF();
 80006d0:	f00b f864 	bl	800b79c <BUZ_OFF>

  LED_VD3_ON();
 80006d4:	f00b f86e 	bl	800b7b4 <LED_VD3_ON>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 80006d8:	4b98      	ldr	r3, [pc, #608]	; (800093c <main+0x29c>)
 80006da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	*/




  	read_bootloader_registers_no_rtos(); // читаем ригистры бутлоадера до запуска операционной системы
 80006dc:	f00d fca6 	bl	800e02c <read_bootloader_registers_no_rtos>


	start_address = ((((uint32_t)(bootloader_registers.start_address_firmware_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.start_address_firmware_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.start_address_firmware_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.start_address_firmware_low_reg))&0x000000FF);
 80006e0:	4b97      	ldr	r3, [pc, #604]	; (8000940 <main+0x2a0>)
 80006e2:	885b      	ldrh	r3, [r3, #2]
 80006e4:	061a      	lsls	r2, r3, #24
 80006e6:	4b96      	ldr	r3, [pc, #600]	; (8000940 <main+0x2a0>)
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	041b      	lsls	r3, r3, #16
 80006ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006f0:	431a      	orrs	r2, r3
 80006f2:	4b93      	ldr	r3, [pc, #588]	; (8000940 <main+0x2a0>)
 80006f4:	88db      	ldrh	r3, [r3, #6]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4b90      	ldr	r3, [pc, #576]	; (8000940 <main+0x2a0>)
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	4a8f      	ldr	r2, [pc, #572]	; (8000944 <main+0x2a4>)
 8000706:	6013      	str	r3, [r2, #0]

	end_address = ((((uint32_t)(bootloader_registers.end_address_firmware_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.end_address_firmware_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.end_address_firmware_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.end_address_firmware_low_reg))&0x000000FF);
 8000708:	4b8d      	ldr	r3, [pc, #564]	; (8000940 <main+0x2a0>)
 800070a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800070c:	061a      	lsls	r2, r3, #24
 800070e:	4b8c      	ldr	r3, [pc, #560]	; (8000940 <main+0x2a0>)
 8000710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000718:	431a      	orrs	r2, r3
 800071a:	4b89      	ldr	r3, [pc, #548]	; (8000940 <main+0x2a0>)
 800071c:	895b      	ldrh	r3, [r3, #10]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	4b86      	ldr	r3, [pc, #536]	; (8000940 <main+0x2a0>)
 8000726:	899b      	ldrh	r3, [r3, #12]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	4a86      	ldr	r2, [pc, #536]	; (8000948 <main+0x2a8>)
 800072e:	6013      	str	r3, [r2, #0]

	//end_address = 0x08029EEB;

	firmware_length = end_address - start_address + 1;
 8000730:	4b85      	ldr	r3, [pc, #532]	; (8000948 <main+0x2a8>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b83      	ldr	r3, [pc, #524]	; (8000944 <main+0x2a4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	3301      	adds	r3, #1
 800073c:	4a83      	ldr	r2, [pc, #524]	; (800094c <main+0x2ac>)
 800073e:	6013      	str	r3, [r2, #0]

	firmware_crc = (((bootloader_registers.crc_firmware_low_reg)<<8)&0xFF00) | ((bootloader_registers.crc_firmware_high_reg)&0x00FF);
 8000740:	4b7f      	ldr	r3, [pc, #508]	; (8000940 <main+0x2a0>)
 8000742:	8a1b      	ldrh	r3, [r3, #16]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b7d      	ldr	r3, [pc, #500]	; (8000940 <main+0x2a0>)
 800074a:	89db      	ldrh	r3, [r3, #14]
 800074c:	b21b      	sxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <main+0x2b0>)
 800075a:	801a      	strh	r2, [r3, #0]

	if( (start_address >= 0x08000000) && (start_address <= 0x080FFFFF) && ((start_address + firmware_length) <= 0x080FFFFF) && (firmware_length <= 0xFFFFF) ) // стартовый адресс для расчета контрольной суммы должен входить в диапазон основной памяти контроллера, длина прошивки не должна превышать длину памяти программ контроллера иначе при чтении будет хардфолт
 800075c:	4b79      	ldr	r3, [pc, #484]	; (8000944 <main+0x2a4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000764:	d31e      	bcc.n	80007a4 <main+0x104>
 8000766:	4b77      	ldr	r3, [pc, #476]	; (8000944 <main+0x2a4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800076e:	d219      	bcs.n	80007a4 <main+0x104>
 8000770:	4b74      	ldr	r3, [pc, #464]	; (8000944 <main+0x2a4>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b75      	ldr	r3, [pc, #468]	; (800094c <main+0x2ac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4413      	add	r3, r2
 800077a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800077e:	d211      	bcs.n	80007a4 <main+0x104>
 8000780:	4b72      	ldr	r3, [pc, #456]	; (800094c <main+0x2ac>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000788:	d20c      	bcs.n	80007a4 <main+0x104>
	{
		calculating_firmware_crc = CRC16((unsigned char*)start_address, firmware_length);
 800078a:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <main+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4b6e      	ldr	r3, [pc, #440]	; (800094c <main+0x2ac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f00e f8d6 	bl	800e948 <CRC16>
 800079c:	4603      	mov	r3, r0
 800079e:	4a6d      	ldr	r2, [pc, #436]	; (8000954 <main+0x2b4>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e002      	b.n	80007aa <main+0x10a>
	}
	else
	{
		calculating_firmware_crc = 0;
 80007a4:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <main+0x2b4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
	}



	if( (firmware_crc == calculating_firmware_crc) && (firmware_crc != 0) ) // если рассчетная контрольная сумма прошивки совпадает с указанной и не равна 0
 80007aa:	4b69      	ldr	r3, [pc, #420]	; (8000950 <main+0x2b0>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b68      	ldr	r3, [pc, #416]	; (8000954 <main+0x2b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d111      	bne.n	80007dc <main+0x13c>
 80007b8:	4b65      	ldr	r3, [pc, #404]	; (8000950 <main+0x2b0>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <main+0x13c>
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную корректность прошивки
 80007c0:	2100      	movs	r1, #0
 80007c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80007c6:	f00a ff2f 	bl	800b628 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
 80007ca:	2101      	movs	r1, #1
 80007cc:	f240 201d 	movw	r0, #541	; 0x21d
 80007d0:	f00a ff2a 	bl	800b628 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0001;
 80007d4:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <main+0x2a0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	835a      	strh	r2, [r3, #26]
 80007da:	e00c      	b.n	80007f6 <main+0x156>

	else // если рассчетная контрольная сумма прошивки не совпадает с указанной
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную ошибку контрольной суммы прошивки
 80007dc:	2100      	movs	r1, #0
 80007de:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80007e2:	f00a ff21 	bl	800b628 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 80007e6:	2100      	movs	r1, #0
 80007e8:	f240 201d 	movw	r0, #541	; 0x21d
 80007ec:	f00a ff1c 	bl	800b628 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0000;
 80007f0:	4b53      	ldr	r3, [pc, #332]	; (8000940 <main+0x2a0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	835a      	strh	r2, [r3, #26]
	//fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
	//bootloader_registers.firmware_correctness_reg = 0x0001;
	//-----------------------


  	if( bootloader_registers.working_mode_reg == 0 ) // если включен нормальный режим работы
 80007f6:	4b52      	ldr	r3, [pc, #328]	; (8000940 <main+0x2a0>)
 80007f8:	8b9b      	ldrh	r3, [r3, #28]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 80c5 	bne.w	800098a <main+0x2ea>
  	{
  		if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <main+0x2a0>)
 8000802:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <main+0x2a0>)
 8000806:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	f080 80bb 	bcs.w	8000984 <main+0x2e4>
  		{
  			if( bootloader_registers.firmware_correctness_reg == 1 ) // если прошивка корректна (контрольная сумма совпадает)
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <main+0x2a0>)
 8000810:	8b5b      	ldrh	r3, [r3, #26]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d14a      	bne.n	80008ac <main+0x20c>
  			{

  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // обнуляем корректность прошивки
 8000816:	2100      	movs	r1, #0
 8000818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800081c:	f00a ff04 	bl	800b628 <fm25v02_write>
  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 8000820:	2100      	movs	r1, #0
 8000822:	f240 201d 	movw	r0, #541	; 0x21d
 8000826:	f00a feff 	bl	800b628 <fm25v02_write>
  				bootloader_registers.firmware_correctness_reg = 0x0000;
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <main+0x2a0>)
 800082c:	2200      	movs	r2, #0
 800082e:	835a      	strh	r2, [r3, #26]

  				fm25v02_write(2*WORKING_MODE_REG, 0x00); // обнуляем корректность прошивки
 8000830:	2100      	movs	r1, #0
 8000832:	f240 201e 	movw	r0, #542	; 0x21e
 8000836:	f00a fef7 	bl	800b628 <fm25v02_write>
  				fm25v02_write(2*WORKING_MODE_REG+1, 0x00);
 800083a:	2100      	movs	r1, #0
 800083c:	f240 201f 	movw	r0, #543	; 0x21f
 8000840:	f00a fef2 	bl	800b628 <fm25v02_write>
  				bootloader_registers.working_mode_reg = 0x0000;
 8000844:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <main+0x2a0>)
 8000846:	2200      	movs	r2, #0
 8000848:	839a      	strh	r2, [r3, #28]

  				fm25v02_read(271, &test_data1); // обнуляем регистр режима работы с номером 271 в fram памяти, нужно только для старой прошивки
 800084a:	4943      	ldr	r1, [pc, #268]	; (8000958 <main+0x2b8>)
 800084c:	f240 100f 	movw	r0, #271	; 0x10f
 8000850:	f00a feb0 	bl	800b5b4 <fm25v02_read>


  				HAL_UART_DeInit(&huart3);
 8000854:	4841      	ldr	r0, [pc, #260]	; (800095c <main+0x2bc>)
 8000856:	f004 fb94 	bl	8004f82 <HAL_UART_DeInit>
  				HAL_SPI_DeInit(&hspi2);
 800085a:	4841      	ldr	r0, [pc, #260]	; (8000960 <main+0x2c0>)
 800085c:	f003 fb4f 	bl	8003efe <HAL_SPI_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_rx);
 8000860:	4840      	ldr	r0, [pc, #256]	; (8000964 <main+0x2c4>)
 8000862:	f001 f9f7 	bl	8001c54 <HAL_DMA_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_tx);
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <main+0x2c8>)
 8000868:	f001 f9f4 	bl	8001c54 <HAL_DMA_DeInit>

  				HAL_RCC_DeInit();
 800086c:	f003 f8f6 	bl	8003a5c <HAL_RCC_DeInit>

  				HAL_DeInit(); // деинициализируем HAL
 8000870:	f000 ffb6 	bl	80017e0 <HAL_DeInit>

  				JumpAddress = *(__IO uint32_t*) (ApplicationAddress2+4); // адрес перехода
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <main+0x2cc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a3c      	ldr	r2, [pc, #240]	; (8000970 <main+0x2d0>)
 800087e:	6013      	str	r3, [r2, #0]
  				Jump_To_Application = (pFunction) JumpAddress; // приводим адрес к типу функции
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <main+0x2d0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <main+0x2d4>)
 8000888:	601a      	str	r2, [r3, #0]
  				__set_MSP (*(__IO uint32_t*) ApplicationAddress2);// устанавливаем указатель стека
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0x2cc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000898:	f383 8808 	msr	MSP, r3
}
 800089c:	bf00      	nop

  				SCB->VTOR = FLASH_BASE | 0x10000; // смещаем таблицу векторов прерываний
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <main+0x2d8>)
 80008a0:	4a36      	ldr	r2, [pc, #216]	; (800097c <main+0x2dc>)
 80008a2:	609a      	str	r2, [r3, #8]

  				Jump_To_Application(); // переход к основной программе
 80008a4:	4b33      	ldr	r3, [pc, #204]	; (8000974 <main+0x2d4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4798      	blx	r3
 80008aa:	e06e      	b.n	800098a <main+0x2ea>

  			}
  			else if( bootloader_registers.firmware_correctness_reg == 0 )
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <main+0x2a0>)
 80008ae:	8b5b      	ldrh	r3, [r3, #26]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d16a      	bne.n	800098a <main+0x2ea>
  			{
  				fm25v02_read(2*JUMP_ATTEMPT_REG, &temp_h); // увеличиваем количество попыток перейти в основную программу
 80008b4:	f107 03ef 	add.w	r3, r7, #239	; 0xef
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 7009 	mov.w	r0, #548	; 0x224
 80008be:	f00a fe79 	bl	800b5b4 <fm25v02_read>
  				fm25v02_read(2*JUMP_ATTEMPT_REG+1, &temp_l);
 80008c2:	f107 03ee 	add.w	r3, r7, #238	; 0xee
 80008c6:	4619      	mov	r1, r3
 80008c8:	f240 2025 	movw	r0, #549	; 0x225
 80008cc:	f00a fe72 	bl	800b5b4 <fm25v02_read>
  				temp_jump_attempt = (((uint16_t)temp_h)<<8)|((uint16_t)(temp_l));
 80008d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_jump_attempt = temp_jump_attempt + 1;
 80008e6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_h = (uint8_t)(temp_jump_attempt>>8);
 80008f0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  				temp_l = (uint8_t)(temp_jump_attempt);
 80008fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
  				fm25v02_write(2*JUMP_ATTEMPT_REG, temp_h);
 8000908:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000912:	f00a fe89 	bl	800b628 <fm25v02_write>
  				fm25v02_write(2*JUMP_ATTEMPT_REG+1, temp_l);
 8000916:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800091a:	4619      	mov	r1, r3
 800091c:	f240 2025 	movw	r0, #549	; 0x225
 8000920:	f00a fe82 	bl	800b628 <fm25v02_write>

  				HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f000 ffaf 	bl	8001888 <HAL_Delay>

  				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <main+0x2e0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f04f 31ff 	mov.w	r1, #4294967295
 8000932:	4618      	mov	r0, r3
 8000934:	f005 fd94 	bl	8006460 <osMutexWait>
  				NVIC_SystemReset();
 8000938:	f7ff fe52 	bl	80005e0 <__NVIC_SystemReset>
 800093c:	40023800 	.word	0x40023800
 8000940:	20009d5c 	.word	0x20009d5c
 8000944:	20009788 	.word	0x20009788
 8000948:	20009798 	.word	0x20009798
 800094c:	2000979c 	.word	0x2000979c
 8000950:	20009782 	.word	0x20009782
 8000954:	20009790 	.word	0x20009790
 8000958:	200094c0 	.word	0x200094c0
 800095c:	20008068 	.word	0x20008068
 8000960:	20007fac 	.word	0x20007fac
 8000964:	20008008 	.word	0x20008008
 8000968:	200094d8 	.word	0x200094d8
 800096c:	20000000 	.word	0x20000000
 8000970:	200094c4 	.word	0x200094c4
 8000974:	20009540 	.word	0x20009540
 8000978:	e000ed00 	.word	0xe000ed00
 800097c:	08010000 	.word	0x08010000
 8000980:	2000957c 	.word	0x2000957c
  			}
  		}

  		else
  		{
  			start_default_task_delay = 100;
 8000984:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <main+0x4a4>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000996:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fd48 	bl	8006430 <osMutexCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a69      	ldr	r2, [pc, #420]	; (8000b48 <main+0x4a8>)
 80009a4:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80009b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fd3a 	bl	8006430 <osMutexCreate>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a63      	ldr	r2, [pc, #396]	; (8000b4c <main+0x4ac>)
 80009c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 80009ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 fdc7 	bl	8006568 <osSemaphoreCreate>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a5c      	ldr	r2, [pc, #368]	; (8000b50 <main+0x4b0>)
 80009de:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 80009ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f005 fdb8 	bl	8006568 <osSemaphoreCreate>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a56      	ldr	r2, [pc, #344]	; (8000b54 <main+0x4b4>)
 80009fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <main+0x4b8>)
 8000a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 8000a0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fc58 	bl	80062c8 <osTimerCreate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <main+0x4bc>)
 8000a1c:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <main+0x4c0>)
 8000a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 8000a2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fc48 	bl	80062c8 <osTimerCreate>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <main+0x4c4>)
 8000a3c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 256, uint8_t);
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <main+0x4c8>)
 8000a40:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 8000a4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 fe4d 	bl	80066f0 <osMessageCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <main+0x4cc>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a5c:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <main+0x4d0>)
 8000a5e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fbc5 	bl	8006206 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a3d      	ldr	r2, [pc, #244]	; (8000b74 <main+0x4d4>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <main+0x4d8>)
 8000a84:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8000a96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fbb2 	bl	8006206 <osThreadCreate>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a35      	ldr	r2, [pc, #212]	; (8000b7c <main+0x4dc>)
 8000aa6:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <main+0x4e0>)
 8000aaa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8000abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fb9f 	bl	8006206 <osThreadCreate>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <main+0x4e4>)
 8000acc:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <main+0x4e8>)
 8000ad0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ad4:	461d      	mov	r5, r3
 8000ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ada:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000ae2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 fb8c 	bl	8006206 <osThreadCreate>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <main+0x4ec>)
 8000af2:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <main+0x4f0>)
 8000af6:	f107 0420 	add.w	r4, r7, #32
 8000afa:	461d      	mov	r5, r3
 8000afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 fb79 	bl	8006206 <osThreadCreate>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <main+0x4f4>)
 8000b18:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <main+0x4f8>)
 8000b1c:	1d3c      	adds	r4, r7, #4
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 fb68 	bl	8006206 <osThreadCreate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <main+0x4fc>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b3c:	f005 fb5c 	bl	80061f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x4a0>
 8000b42:	bf00      	nop
 8000b44:	20000004 	.word	0x20000004
 8000b48:	200094d0 	.word	0x200094d0
 8000b4c:	2000957c 	.word	0x2000957c
 8000b50:	2000978c 	.word	0x2000978c
 8000b54:	20009554 	.word	0x20009554
 8000b58:	080011b9 	.word	0x080011b9
 8000b5c:	200094c8 	.word	0x200094c8
 8000b60:	080011d9 	.word	0x080011d9
 8000b64:	200094d4 	.word	0x200094d4
 8000b68:	0800f3dc 	.word	0x0800f3dc
 8000b6c:	200080bc 	.word	0x200080bc
 8000b70:	0800f3ec 	.word	0x0800f3ec
 8000b74:	20007fa8 	.word	0x20007fa8
 8000b78:	0800f408 	.word	0x0800f408
 8000b7c:	20009550 	.word	0x20009550
 8000b80:	0800f424 	.word	0x0800f424
 8000b84:	2000954c 	.word	0x2000954c
 8000b88:	0800f440 	.word	0x0800f440
 8000b8c:	20009548 	.word	0x20009548
 8000b90:	0800f45c 	.word	0x0800f45c
 8000b94:	2000953c 	.word	0x2000953c
 8000b98:	0800f478 	.word	0x0800f478
 8000b9c:	200080ac 	.word	0x200080ac

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00d ff36 	bl	800ea20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <SystemClock_Config+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000bfc:	230d      	movs	r3, #13
 8000bfe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f9b8 	bl	8002fa4 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c3a:	f000 fb03 	bl	8001244 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fc19 	bl	8003494 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c68:	f000 faec 	bl	8001244 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	; 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_IWDG_Init+0x2c>)
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <MX_IWDG_Init+0x30>)
 8000c84:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_IWDG_Init+0x2c>)
 8000c88:	2203      	movs	r2, #3
 8000c8a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_IWDG_Init+0x2c>)
 8000c8e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000c92:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_IWDG_Init+0x2c>)
 8000c96:	f002 f932 	bl	8002efe <HAL_IWDG_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000ca0:	f000 fad0 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200080b0 	.word	0x200080b0
 8000cac:	40003000 	.word	0x40003000

08000cb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cca:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <MX_RTC_Init+0x84>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cd6:	227f      	movs	r2, #127	; 0x7f
 8000cd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_RTC_Init+0x80>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_RTC_Init+0x80>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cf2:	480f      	ldr	r0, [pc, #60]	; (8000d30 <MX_RTC_Init+0x80>)
 8000cf4:	f002 ff80 	bl	8003bf8 <HAL_RTC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cfe:	f000 faa1 	bl	8001244 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d16:	2301      	movs	r3, #1
 8000d18:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000955c 	.word	0x2000955c
 8000d34:	40002800 	.word	0x40002800

08000d38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_SPI2_Init+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_SPI2_Init+0x64>)
 8000d8a:	f003 f82f 	bl	8003dec <HAL_SPI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d94:	f000 fa56 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20007fac 	.word	0x20007fac
 8000da0:	40003800 	.word	0x40003800

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_USART3_UART_Init+0x50>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000db0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART3_UART_Init+0x4c>)
 8000ddc:	f004 f884 	bl	8004ee8 <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000de6:	f000 fa2d 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20008068 	.word	0x20008068
 8000df4:	40004800 	.word	0x40004800

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	200c      	movs	r0, #12
 8000e20:	f000 fe32 	bl	8001a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e24:	200c      	movs	r0, #12
 8000e26:	f000 fe4b 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	200e      	movs	r0, #14
 8000e30:	f000 fe2a 	bl	8001a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e34:	200e      	movs	r0, #14
 8000e36:	f000 fe43 	bl	8001ac0 <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	; 0x38
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
 8000e62:	4bb3      	ldr	r3, [pc, #716]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4ab2      	ldr	r2, [pc, #712]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4bb0      	ldr	r3, [pc, #704]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	4bac      	ldr	r3, [pc, #688]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4aab      	ldr	r2, [pc, #684]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4ba9      	ldr	r3, [pc, #676]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	61fb      	str	r3, [r7, #28]
 8000e94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4ba5      	ldr	r3, [pc, #660]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4aa4      	ldr	r2, [pc, #656]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ea0:	f043 0304 	orr.w	r3, r3, #4
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4ba2      	ldr	r3, [pc, #648]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a9d      	ldr	r2, [pc, #628]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ebc:	f043 0320 	orr.w	r3, r3, #32
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0320 	and.w	r3, r3, #32
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b97      	ldr	r3, [pc, #604]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a96      	ldr	r2, [pc, #600]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b94      	ldr	r3, [pc, #592]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b90      	ldr	r3, [pc, #576]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a8f      	ldr	r2, [pc, #572]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b8d      	ldr	r3, [pc, #564]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b89      	ldr	r3, [pc, #548]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a88      	ldr	r2, [pc, #544]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b86      	ldr	r3, [pc, #536]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a81      	ldr	r2, [pc, #516]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b7f      	ldr	r3, [pc, #508]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a7a      	ldr	r2, [pc, #488]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b78      	ldr	r3, [pc, #480]	; (8001130 <MX_GPIO_Init+0x2e8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	4875      	ldr	r0, [pc, #468]	; (8001134 <MX_GPIO_Init+0x2ec>)
 8000f60:	f001 ff9a 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	4873      	ldr	r0, [pc, #460]	; (8001138 <MX_GPIO_Init+0x2f0>)
 8000f6c:	f001 ff94 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f76:	4871      	ldr	r0, [pc, #452]	; (800113c <MX_GPIO_Init+0x2f4>)
 8000f78:	f001 ff8e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000f82:	486d      	ldr	r0, [pc, #436]	; (8001138 <MX_GPIO_Init+0x2f0>)
 8000f84:	f001 ff88 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2138      	movs	r1, #56	; 0x38
 8000f8c:	486c      	ldr	r0, [pc, #432]	; (8001140 <MX_GPIO_Init+0x2f8>)
 8000f8e:	f001 ff83 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000f92:	2201      	movs	r2, #1
 8000f94:	2101      	movs	r1, #1
 8000f96:	486b      	ldr	r0, [pc, #428]	; (8001144 <MX_GPIO_Init+0x2fc>)
 8000f98:	f001 ff7e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f248 010c 	movw	r1, #32780	; 0x800c
 8000fa2:	4869      	ldr	r0, [pc, #420]	; (8001148 <MX_GPIO_Init+0x300>)
 8000fa4:	f001 ff78 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2160      	movs	r1, #96	; 0x60
 8000fac:	4866      	ldr	r0, [pc, #408]	; (8001148 <MX_GPIO_Init+0x300>)
 8000fae:	f001 ff73 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2128      	movs	r1, #40	; 0x28
 8000fb6:	4863      	ldr	r0, [pc, #396]	; (8001144 <MX_GPIO_Init+0x2fc>)
 8000fb8:	f001 ff6e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000fc2:	4862      	ldr	r0, [pc, #392]	; (800114c <MX_GPIO_Init+0x304>)
 8000fc4:	f001 ff68 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	4860      	ldr	r0, [pc, #384]	; (8001150 <MX_GPIO_Init+0x308>)
 8000fd0:	f001 ff62 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4852      	ldr	r0, [pc, #328]	; (8001134 <MX_GPIO_Init+0x2ec>)
 8000fec:	f001 fcbc 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8000ff0:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4619      	mov	r1, r3
 8001008:	484b      	ldr	r0, [pc, #300]	; (8001138 <MX_GPIO_Init+0x2f0>)
 800100a:	f001 fcad 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800100e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4845      	ldr	r0, [pc, #276]	; (800113c <MX_GPIO_Init+0x2f4>)
 8001028:	f001 fc9e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800102c:	2338      	movs	r3, #56	; 0x38
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	483f      	ldr	r0, [pc, #252]	; (8001140 <MX_GPIO_Init+0x2f8>)
 8001044:	f001 fc90 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8001048:	2329      	movs	r3, #41	; 0x29
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4839      	ldr	r0, [pc, #228]	; (8001144 <MX_GPIO_Init+0x2fc>)
 8001060:	f001 fc82 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH5 PH6
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8001064:	f248 036c 	movw	r3, #32876	; 0x806c
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4832      	ldr	r0, [pc, #200]	; (8001148 <MX_GPIO_Init+0x300>)
 800107e:	f001 fc73 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001082:	2310      	movs	r3, #16
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	482c      	ldr	r0, [pc, #176]	; (8001148 <MX_GPIO_Init+0x300>)
 8001096:	f001 fc67 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109a:	2304      	movs	r3, #4
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4619      	mov	r1, r3
 80010ac:	4829      	ldr	r0, [pc, #164]	; (8001154 <MX_GPIO_Init+0x30c>)
 80010ae:	f001 fc5b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80010b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	481e      	ldr	r0, [pc, #120]	; (8001140 <MX_GPIO_Init+0x2f8>)
 80010c8:	f001 fc4e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010cc:	2303      	movs	r3, #3
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	481c      	ldr	r0, [pc, #112]	; (8001150 <MX_GPIO_Init+0x308>)
 80010e0:	f001 fc42 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_GPIO_Init+0x304>)
 80010fe:	f001 fc33 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001102:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001114:	2308      	movs	r3, #8
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_GPIO_Init+0x308>)
 8001120:	f001 fc22 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
 800112e:	e013      	b.n	8001158 <MX_GPIO_Init+0x310>
 8001130:	40023800 	.word	0x40023800
 8001134:	40021000 	.word	0x40021000
 8001138:	40022000 	.word	0x40022000
 800113c:	40020800 	.word	0x40020800
 8001140:	40021400 	.word	0x40021400
 8001144:	40020000 	.word	0x40020000
 8001148:	40021c00 	.word	0x40021c00
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021800 	.word	0x40021800
 8001154:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4811      	ldr	r0, [pc, #68]	; (80011ac <MX_GPIO_Init+0x364>)
 8001168:	f001 fbfe 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800116c:	23c0      	movs	r3, #192	; 0xc0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800117c:	2307      	movs	r3, #7
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	480a      	ldr	r0, [pc, #40]	; (80011b0 <MX_GPIO_Init+0x368>)
 8001188:	f001 fbee 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0x36c>)
 80011a0:	f001 fbe2 	bl	8002968 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3738      	adds	r7, #56	; 0x38
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40021000 	.word	0x40021000

080011b8 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <Callback_AT_Timer+0x1c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]

}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20009558 	.word	0x20009558

080011d8 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	modem_reset_state = 1;
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <Callback_Ring_Center_Timer+0x1c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000080d 	.word	0x2000080d

080011f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	HAL_IWDG_Refresh(&hiwdg);
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <StartDefaultTask+0x20>)
 8001202:	f001 febe 	bl	8002f82 <HAL_IWDG_Refresh>
	LED_VD3_TOGGLE();
 8001206:	f00a fae1 	bl	800b7cc <LED_VD3_TOGGLE>

    osDelay(start_default_task_delay);
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <StartDefaultTask+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f005 f845 	bl	800629e <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8001214:	e7f4      	b.n	8001200 <StartDefaultTask+0x8>
 8001216:	bf00      	nop
 8001218:	200080b0 	.word	0x200080b0
 800121c:	20000004 	.word	0x20000004

08001220 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001232:	f000 fb09 	bl	8001848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40010000 	.word	0x40010000

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	NVIC_SystemReset();
 8001248:	f7ff f9ca 	bl	80005e0 <__NVIC_SystemReset>

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x54>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_MspInit+0x54>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x54>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x54>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x54>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x54>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f000 fbf9 	bl	8001a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_RTC_MspInit+0x4c>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d111      	bne.n	80012e8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012c4:	2302      	movs	r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fae0 	bl	8003898 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012de:	f7ff ffb1 	bl	8001244 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <HAL_RTC_MspInit+0x50>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40002800 	.word	0x40002800
 80012f4:	42470e3c 	.word	0x42470e3c

080012f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_SPI_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_SPI_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a10      	ldr	r2, [pc, #64]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_SPI_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001352:	230e      	movs	r3, #14
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001362:	2305      	movs	r3, #5
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_SPI_MspInit+0x8c>)
 800136e:	f001 fafb 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40003800 	.word	0x40003800
 8001380:	40023800 	.word	0x40023800
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_SPI_MspDeInit+0x30>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d109      	bne.n	80013ae <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_SPI_MspDeInit+0x34>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_SPI_MspDeInit+0x34>)
 80013a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOI, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
 80013a6:	210e      	movs	r1, #14
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_SPI_MspDeInit+0x38>)
 80013aa:	f001 fc79 	bl	8002ca0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40003800 	.word	0x40003800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40022000 	.word	0x40022000

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_UART_MspInit+0x150>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f040 8091 	bne.w	800150a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_UART_MspInit+0x154>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_UART_MspInit+0x154>)
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_UART_MspInit+0x154>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001420:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001432:	2307      	movs	r3, #7
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4837      	ldr	r0, [pc, #220]	; (800151c <HAL_UART_MspInit+0x158>)
 800143e:	f001 fa93 	bl	8002968 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001444:	4a37      	ldr	r2, [pc, #220]	; (8001524 <HAL_UART_MspInit+0x160>)
 8001446:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800144a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001452:	2240      	movs	r2, #64	; 0x40
 8001454:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001462:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001484:	f000 fb38 	bl	8001af8 <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800148e:	f7ff fed9 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_UART_MspInit+0x168>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014e0:	f000 fb0a 	bl	8001af8 <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014ea:	f7ff feab 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2027      	movs	r0, #39	; 0x27
 8001500:	f000 fac2 	bl	8001a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001504:	2027      	movs	r0, #39	; 0x27
 8001506:	f000 fadb 	bl	8001ac0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004800 	.word	0x40004800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400
 8001520:	200094d8 	.word	0x200094d8
 8001524:	40026058 	.word	0x40026058
 8001528:	20008008 	.word	0x20008008
 800152c:	40026028 	.word	0x40026028

08001530 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_UART_MspDeInit+0x4c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d117      	bne.n	8001572 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_UART_MspDeInit+0x50>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_UART_MspDeInit+0x50>)
 8001548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800154e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001552:	480c      	ldr	r0, [pc, #48]	; (8001584 <HAL_UART_MspDeInit+0x54>)
 8001554:	f001 fba4 	bl	8002ca0 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fb79 	bl	8001c54 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fb74 	bl	8001c54 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800156c:	2027      	movs	r0, #39	; 0x27
 800156e:	f000 fab5 	bl	8001adc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40004800 	.word	0x40004800
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	2019      	movs	r0, #25
 800159e:	f000 fa73 	bl	8001a88 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015a2:	2019      	movs	r0, #25
 80015a4:	f000 fa8c 	bl	8001ac0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_InitTick+0xa4>)
 80015ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b0:	4a1e      	ldr	r2, [pc, #120]	; (800162c <HAL_InitTick+0xa4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6453      	str	r3, [r2, #68]	; 0x44
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_InitTick+0xa4>)
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015c4:	f107 0210 	add.w	r2, r7, #16
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f930 	bl	8003834 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015d4:	f002 f91a 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 80015d8:	4603      	mov	r3, r0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e0:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_InitTick+0xa8>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0c9b      	lsrs	r3, r3, #18
 80015e8:	3b01      	subs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_InitTick+0xac>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_InitTick+0xb0>)
 80015f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_InitTick+0xac>)
 80015f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_InitTick+0xac>)
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_InitTick+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_InitTick+0xac>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_InitTick+0xac>)
 800160e:	f003 f9bd 	bl	800498c <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d104      	bne.n	8001622 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_InitTick+0xac>)
 800161a:	f003 fa11 	bl	8004a40 <HAL_TIM_Base_Start_IT>
 800161e:	4603      	mov	r3, r0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3730      	adds	r7, #48	; 0x30
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	431bde83 	.word	0x431bde83
 8001634:	200097a0 	.word	0x200097a0
 8001638:	40010000 	.word	0x40010000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA1_Stream1_IRQHandler+0x10>)
 800166e:	f000 fc39 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20008008 	.word	0x20008008

0800167c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Stream3_IRQHandler+0x10>)
 8001682:	f000 fc2f 	bl	8001ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200094d8 	.word	0x200094d8

08001690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001696:	f003 fa43 	bl	8004b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200097a0 	.word	0x200097a0

080016a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <USART3_IRQHandler+0x10>)
 80016aa:	f003 fd47 	bl	800513c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20008068 	.word	0x20008068

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f00d f960 	bl	800e9ac <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20020000 	.word	0x20020000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000810 	.word	0x20000810
 8001720:	20009ef8 	.word	0x20009ef8

08001724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <SystemInit+0x20>)
 800172a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <SystemInit+0x20>)
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001772:	f7ff ffd7 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f00d f91f 	bl	800e9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7fe ff91 	bl	80006a0 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800178c:	0800f9c4 	.word	0x0800f9c4
  ldr r2, =_sbss
 8001790:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001794:	20009ef8 	.word	0x20009ef8

08001798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f954 	bl	8001a72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	200f      	movs	r0, #15
 80017cc:	f7ff fedc 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fd3c 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_DeInit+0x54>)
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_DeInit+0x54>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <HAL_DeInit+0x54>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <HAL_DeInit+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_DeInit+0x54>)
 8001802:	f04f 32ff 	mov.w	r2, #4294967295
 8001806:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <HAL_DeInit+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_DeInit+0x54>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_DeInit+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_DeInit+0x54>)
 800181e:	f04f 32ff 	mov.w	r2, #4294967295
 8001822:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_DeInit+0x54>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800182a:	f000 f805 	bl	8001838 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_IncTick+0x20>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_IncTick+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_IncTick+0x24>)
 800185a:	6013      	str	r3, [r2, #0]
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000010 	.word	0x20000010
 800186c:	200097e8 	.word	0x200097e8

08001870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  return uwTick;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_GetTick+0x14>)
 8001876:	681b      	ldr	r3, [r3, #0]
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200097e8 	.word	0x200097e8

08001888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff ffee 	bl	8001870 <HAL_GetTick>
 8001894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d005      	beq.n	80018ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_Delay+0x44>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ae:	bf00      	nop
 80018b0:	f7ff ffde 	bl	8001870 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8f7      	bhi.n	80018b0 <HAL_Delay+0x28>
  {
  }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000010 	.word	0x20000010

080018d0 <__NVIC_SetPriorityGrouping>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_DisableIRQ>:
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db12      	blt.n	80019a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	490a      	ldr	r1, [pc, #40]	; (80019b4 <__NVIC_DisableIRQ+0x44>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	3320      	adds	r3, #32
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800199c:	f3bf 8f4f 	dsb	sy
}
 80019a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019a2:	f3bf 8f6f 	isb	sy
}
 80019a6:	bf00      	nop
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	; (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	; (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	; 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff28 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9a:	f7ff ff3d 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7ff ffb1 	bl	8001a0c <NVIC_EncodePriority>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff80 	bl	80019b8 <__NVIC_SetPriority>
}
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff30 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff40 	bl	8001970 <__NVIC_DisableIRQ>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff feb4 	bl	8001870 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e099      	b.n	8001c48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b34:	e00f      	b.n	8001b56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b36:	f7ff fe9b 	bl	8001870 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d908      	bls.n	8001b56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2220      	movs	r2, #32
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e078      	b.n	8001c48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e8      	bne.n	8001b36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4b38      	ldr	r3, [pc, #224]	; (8001c50 <HAL_DMA_Init+0x158>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d107      	bne.n	8001bc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f023 0307 	bic.w	r3, r3, #7
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d117      	bne.n	8001c1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 fb5f 	bl	80022c0 <DMA_CheckFifoParam>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2240      	movs	r2, #64	; 0x40
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c16:	2301      	movs	r3, #1
 8001c18:	e016      	b.n	8001c48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fb16 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	223f      	movs	r2, #63	; 0x3f
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	f010803f 	.word	0xf010803f

08001c54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e050      	b.n	8001d08 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d101      	bne.n	8001c76 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e048      	b.n	8001d08 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0201 	bic.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2221      	movs	r2, #33	; 0x21
 8001cb4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 facc 	bl	8002254 <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Start_IT+0x26>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e040      	b.n	8001db8 <HAL_DMA_Start_IT+0xa8>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12f      	bne.n	8001daa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 fa4a 	bl	80021f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	223f      	movs	r2, #63	; 0x3f
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0216 	orr.w	r2, r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e005      	b.n	8001db6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
 8001db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dce:	f7ff fd4f 	bl	8001870 <HAL_GetTick>
 8001dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d008      	beq.n	8001df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e052      	b.n	8001e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0216 	bic.w	r2, r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_DMA_Abort+0x62>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0208 	bic.w	r2, r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0201 	bic.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e42:	e013      	b.n	8001e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e44:	f7ff fd14 	bl	8001870 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d90c      	bls.n	8001e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e015      	b.n	8001e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e4      	bne.n	8001e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	223f      	movs	r2, #63	; 0x3f
 8001e80:	409a      	lsls	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d004      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2280      	movs	r2, #128	; 0x80
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00c      	b.n	8001ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2205      	movs	r2, #5
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef0:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_DMA_IRQHandler+0x258>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a92      	ldr	r2, [pc, #584]	; (8002140 <HAL_DMA_IRQHandler+0x25c>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2208      	movs	r2, #8
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01a      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0204 	bic.w	r2, r2, #4
 8001f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2208      	movs	r2, #8
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	2201      	movs	r2, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00b      	beq.n	8001f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2201      	movs	r2, #1
 8001f74:	409a      	lsls	r2, r3
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	2204      	movs	r2, #4
 8001faa:	409a      	lsls	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f043 0204 	orr.w	r2, r3, #4
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d043      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03c      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2210      	movs	r2, #16
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d018      	beq.n	8002026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d024      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e01f      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
 8002024:	e016      	b.n	8002054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d107      	bne.n	8002044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0208 	bic.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2220      	movs	r2, #32
 800205a:	409a      	lsls	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 808e 	beq.w	8002182 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8086 	beq.w	8002182 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2220      	movs	r2, #32
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b05      	cmp	r3, #5
 800208c:	d136      	bne.n	80020fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0216 	bic.w	r2, r2, #22
 800209c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_DMA_IRQHandler+0x1da>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0208 	bic.w	r2, r2, #8
 80020cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d07d      	beq.n	80021ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
        }
        return;
 80020fa:	e078      	b.n	80021ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d01c      	beq.n	8002144 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211c:	2b00      	cmp	r3, #0
 800211e:	d030      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	4798      	blx	r3
 8002128:	e02b      	b.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d027      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
 800213a:	e022      	b.n	8002182 <HAL_DMA_IRQHandler+0x29e>
 800213c:	20000008 	.word	0x20000008
 8002140:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0210 	bic.w	r2, r2, #16
 8002160:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	2b00      	cmp	r3, #0
 8002188:	d032      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d022      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d307      	bcc.n	80021ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f2      	bne.n	80021ae <HAL_DMA_IRQHandler+0x2ca>
 80021c8:	e000      	b.n	80021cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ca:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021ee:	bf00      	nop
    }
  }
}
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b40      	cmp	r3, #64	; 0x40
 8002224:	d108      	bne.n	8002238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002236:	e007      	b.n	8002248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	3b10      	subs	r3, #16
 8002264:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <DMA_CalcBaseAndBitshift+0x68>)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d909      	bls.n	8002296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	659a      	str	r2, [r3, #88]	; 0x58
 8002294:	e007      	b.n	80022a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	aaaaaaab 	.word	0xaaaaaaab
 80022bc:	0800f718 	.word	0x0800f718

080022c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d11f      	bne.n	800231a <DMA_CheckFifoParam+0x5a>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d856      	bhi.n	800238e <DMA_CheckFifoParam+0xce>
 80022e0:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <DMA_CheckFifoParam+0x28>)
 80022e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e6:	bf00      	nop
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	0800230b 	.word	0x0800230b
 80022f0:	080022f9 	.word	0x080022f9
 80022f4:	0800238f 	.word	0x0800238f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d046      	beq.n	8002392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002308:	e043      	b.n	8002392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002312:	d140      	bne.n	8002396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002318:	e03d      	b.n	8002396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002322:	d121      	bne.n	8002368 <DMA_CheckFifoParam+0xa8>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d837      	bhi.n	800239a <DMA_CheckFifoParam+0xda>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <DMA_CheckFifoParam+0x70>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002347 	.word	0x08002347
 8002338:	08002341 	.word	0x08002341
 800233c:	08002359 	.word	0x08002359
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	73fb      	strb	r3, [r7, #15]
      break;
 8002344:	e030      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d025      	beq.n	800239e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002356:	e022      	b.n	800239e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002360:	d11f      	bne.n	80023a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002366:	e01c      	b.n	80023a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d903      	bls.n	8002376 <DMA_CheckFifoParam+0xb6>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d003      	beq.n	800237c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002374:	e018      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
      break;
 800237a:	e015      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      break;
 800238c:	e00b      	b.n	80023a6 <DMA_CheckFifoParam+0xe6>
      break;
 800238e:	bf00      	nop
 8002390:	e00a      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e008      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e006      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e004      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e002      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
    }
  } 
  
  return status; 
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop

080023b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <HAL_FLASH_Program+0xa0>)
 80023cc:	7e1b      	ldrb	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_FLASH_Program+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e03b      	b.n	800244e <HAL_FLASH_Program+0x96>
 80023d6:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_FLASH_Program+0xa0>)
 80023d8:	2201      	movs	r2, #1
 80023da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023e0:	f000 f870 	bl	80024c4 <FLASH_WaitForLastOperation>
 80023e4:	4603      	mov	r3, r0
 80023e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12b      	bne.n	8002446 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023f4:	783b      	ldrb	r3, [r7, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f000 f91b 	bl	8002634 <FLASH_Program_Byte>
 80023fe:	e016      	b.n	800242e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002406:	883b      	ldrh	r3, [r7, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	68b8      	ldr	r0, [r7, #8]
 800240c:	f000 f8ee 	bl	80025ec <FLASH_Program_HalfWord>
 8002410:	e00d      	b.n	800242e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d105      	bne.n	8002424 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f000 f8c3 	bl	80025a8 <FLASH_Program_Word>
 8002422:	e004      	b.n	800242e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002428:	68b8      	ldr	r0, [r7, #8]
 800242a:	f000 f88b 	bl	8002544 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800242e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002432:	f000 f847 	bl	80024c4 <FLASH_WaitForLastOperation>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <HAL_FLASH_Program+0xa4>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_FLASH_Program+0xa4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_FLASH_Program+0xa0>)
 8002448:	2200      	movs	r2, #0
 800244a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800244c:	7dfb      	ldrb	r3, [r7, #23]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200097ec 	.word	0x200097ec
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_FLASH_Unlock+0x38>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da0b      	bge.n	800248a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_FLASH_Unlock+0x38>)
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_FLASH_Unlock+0x3c>)
 8002476:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_FLASH_Unlock+0x38>)
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_FLASH_Unlock+0x40>)
 800247c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_FLASH_Unlock+0x38>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	da01      	bge.n	800248a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800248a:	79fb      	ldrb	r3, [r7, #7]
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40023c00 	.word	0x40023c00
 800249c:	45670123 	.word	0x45670123
 80024a0:	cdef89ab 	.word	0xcdef89ab

080024a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_FLASH_Lock+0x1c>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <HAL_FLASH_Lock+0x1c>)
 80024ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <FLASH_WaitForLastOperation+0x78>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024d6:	f7ff f9cb 	bl	8001870 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024dc:	e010      	b.n	8002500 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d00c      	beq.n	8002500 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <FLASH_WaitForLastOperation+0x38>
 80024ec:	f7ff f9c0 	bl	8001870 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d201      	bcs.n	8002500 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e019      	b.n	8002534 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <FLASH_WaitForLastOperation+0x7c>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1e8      	bne.n	80024de <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <FLASH_WaitForLastOperation+0x7c>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <FLASH_WaitForLastOperation+0x7c>)
 800251a:	2201      	movs	r2, #1
 800251c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <FLASH_WaitForLastOperation+0x7c>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800252a:	f000 f8a5 	bl	8002678 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
  
}  
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200097ec 	.word	0x200097ec
 8002540:	40023c00 	.word	0x40023c00

08002544 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 8002562:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002566:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <FLASH_Program_DoubleWord+0x60>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800257a:	f3bf 8f6f 	isb	sy
}
 800257e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	000a      	movs	r2, r1
 800258e:	2300      	movs	r3, #0
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	3104      	adds	r1, #4
 8002594:	4613      	mov	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40023c00 	.word	0x40023c00

080025a8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <FLASH_Program_Word+0x40>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40023c00 	.word	0x40023c00

080025ec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 80025fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a06      	ldr	r2, [pc, #24]	; (8002630 <FLASH_Program_HalfWord+0x44>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	801a      	strh	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <FLASH_Program_Byte+0x40>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <FLASH_Program_Byte+0x40>)
 8002646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <FLASH_Program_Byte+0x40>)
 800264e:	4a09      	ldr	r2, [pc, #36]	; (8002674 <FLASH_Program_Byte+0x40>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <FLASH_Program_Byte+0x40>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <FLASH_Program_Byte+0x40>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	701a      	strb	r2, [r3, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00

08002678 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <FLASH_SetErrorCode+0xa4>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002688:	4b25      	ldr	r3, [pc, #148]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 8002692:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <FLASH_SetErrorCode+0xa4>)
 8002696:	2210      	movs	r2, #16
 8002698:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <FLASH_SetErrorCode+0xa4>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d008      	beq.n	80026b8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026b0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026b4:	2220      	movs	r2, #32
 80026b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026c4:	4b16      	ldr	r3, [pc, #88]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026d2:	2240      	movs	r2, #64	; 0x40
 80026d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80026e2:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 80026ec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <FLASH_SetErrorCode+0xa4>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <FLASH_SetErrorCode+0xa8>)
 800270a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <FLASH_SetErrorCode+0xa4>)
 800270e:	2202      	movs	r2, #2
 8002710:	60da      	str	r2, [r3, #12]
  }
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40023c00 	.word	0x40023c00
 8002720:	200097ec 	.word	0x200097ec

08002724 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_FLASHEx_Erase+0xd8>)
 8002738:	7e1b      	ldrb	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_FLASHEx_Erase+0x1e>
 800273e:	2302      	movs	r3, #2
 8002740:	e058      	b.n	80027f4 <HAL_FLASHEx_Erase+0xd0>
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_FLASHEx_Erase+0xd8>)
 8002744:	2201      	movs	r2, #1
 8002746:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002748:	f24c 3050 	movw	r0, #50000	; 0xc350
 800274c:	f7ff feba 	bl	80024c4 <FLASH_WaitForLastOperation>
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d148      	bne.n	80027ec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d115      	bne.n	8002796 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 f844 	bl	8002804 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800277c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002780:	f7ff fea0 	bl	80024c4 <FLASH_WaitForLastOperation>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_FLASHEx_Erase+0xdc>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_FLASHEx_Erase+0xdc>)
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	6113      	str	r3, [r2, #16]
 8002794:	e028      	b.n	80027e8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	e01c      	b.n	80027d8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	4619      	mov	r1, r3
 80027a6:	68b8      	ldr	r0, [r7, #8]
 80027a8:	f000 f850 	bl	800284c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80027b0:	f7ff fe88 	bl	80024c4 <FLASH_WaitForLastOperation>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_FLASHEx_Erase+0xdc>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_FLASHEx_Erase+0xdc>)
 80027be:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80027c2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	601a      	str	r2, [r3, #0]
          break;
 80027d0:	e00a      	b.n	80027e8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3301      	adds	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4413      	add	r3, r2
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3da      	bcc.n	800279e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80027e8:	f000 f878 	bl	80028dc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_FLASHEx_Erase+0xd8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	761a      	strb	r2, [r3, #24]

  return status;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200097ec 	.word	0x200097ec
 8002800:	40023c00 	.word	0x40023c00

08002804 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <FLASH_MassErase+0x44>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <FLASH_MassErase+0x44>)
 8002816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <FLASH_MassErase+0x44>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	4a09      	ldr	r2, [pc, #36]	; (8002848 <FLASH_MassErase+0x44>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <FLASH_MassErase+0x44>)
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	4313      	orrs	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <FLASH_MassErase+0x44>)
 8002834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002838:	6113      	str	r3, [r2, #16]
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00

0800284c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e010      	b.n	800288a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d103      	bne.n	8002876 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800286e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e009      	b.n	800288a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d103      	bne.n	8002884 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800287c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e002      	b.n	800288a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002884:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002888:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002894:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	490f      	ldr	r1, [pc, #60]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028ba:	f043 0302 	orr.w	r3, r3, #2
 80028be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <FLASH_Erase_Sector+0x8c>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6113      	str	r3, [r2, #16]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	40023c00 	.word	0x40023c00

080028dc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <FLASH_FlushCaches+0x88>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <FLASH_FlushCaches+0x88>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <FLASH_FlushCaches+0x88>)
 80028f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <FLASH_FlushCaches+0x88>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <FLASH_FlushCaches+0x88>)
 80028fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a16      	ldr	r2, [pc, #88]	; (8002964 <FLASH_FlushCaches+0x88>)
 800290a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800290e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002916:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <FLASH_FlushCaches+0x88>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d017      	beq.n	8002958 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <FLASH_FlushCaches+0x88>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <FLASH_FlushCaches+0x88>)
 800292e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002932:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <FLASH_FlushCaches+0x88>)
 800293a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800294a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800294c:	4b05      	ldr	r3, [pc, #20]	; (8002964 <FLASH_FlushCaches+0x88>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <FLASH_FlushCaches+0x88>)
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
  }
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e16b      	b.n	8002c5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 815a 	bne.w	8002c56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80b4 	beq.w	8002c56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b60      	ldr	r3, [pc, #384]	; (8002c74 <HAL_GPIO_Init+0x30c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a5f      	ldr	r2, [pc, #380]	; (8002c74 <HAL_GPIO_Init+0x30c>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <HAL_GPIO_Init+0x30c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	; (8002c78 <HAL_GPIO_Init+0x310>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <HAL_GPIO_Init+0x314>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02b      	beq.n	8002b8e <HAL_GPIO_Init+0x226>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a51      	ldr	r2, [pc, #324]	; (8002c80 <HAL_GPIO_Init+0x318>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d025      	beq.n	8002b8a <HAL_GPIO_Init+0x222>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <HAL_GPIO_Init+0x31c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01f      	beq.n	8002b86 <HAL_GPIO_Init+0x21e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_GPIO_Init+0x320>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d019      	beq.n	8002b82 <HAL_GPIO_Init+0x21a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_GPIO_Init+0x324>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d013      	beq.n	8002b7e <HAL_GPIO_Init+0x216>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x328>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_GPIO_Init+0x212>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x32c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <HAL_GPIO_Init+0x20e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x330>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d101      	bne.n	8002b72 <HAL_GPIO_Init+0x20a>
 8002b6e:	2307      	movs	r3, #7
 8002b70:	e00e      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b72:	2308      	movs	r3, #8
 8002b74:	e00c      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b76:	2306      	movs	r3, #6
 8002b78:	e00a      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	e008      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e006      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b82:	2303      	movs	r3, #3
 8002b84:	e004      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e002      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_GPIO_Init+0x228>
 8002b8e:	2300      	movs	r3, #0
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f002 0203 	and.w	r2, r2, #3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4093      	lsls	r3, r2
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ba0:	4935      	ldr	r1, [pc, #212]	; (8002c78 <HAL_GPIO_Init+0x310>)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	089b      	lsrs	r3, r3, #2
 8002ba6:	3302      	adds	r3, #2
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bd2:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd8:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c26:	4a1d      	ldr	r2, [pc, #116]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2c:	4b1b      	ldr	r3, [pc, #108]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c50:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <HAL_GPIO_Init+0x334>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	f67f ae90 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40013800 	.word	0x40013800
 8002c7c:	40020000 	.word	0x40020000
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020800 	.word	0x40020800
 8002c88:	40020c00 	.word	0x40020c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40021400 	.word	0x40021400
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40021c00 	.word	0x40021c00
 8002c9c:	40013c00 	.word	0x40013c00

08002ca0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e0cd      	b.n	8002e58 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	f040 80bd 	bne.w	8002e52 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002cd8:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_GPIO_DeInit+0x1d0>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	220f      	movs	r2, #15
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_GPIO_DeInit+0x1d4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <HAL_GPIO_DeInit+0xba>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a5c      	ldr	r2, [pc, #368]	; (8002e78 <HAL_GPIO_DeInit+0x1d8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d025      	beq.n	8002d56 <HAL_GPIO_DeInit+0xb6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a5b      	ldr	r2, [pc, #364]	; (8002e7c <HAL_GPIO_DeInit+0x1dc>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01f      	beq.n	8002d52 <HAL_GPIO_DeInit+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a5a      	ldr	r2, [pc, #360]	; (8002e80 <HAL_GPIO_DeInit+0x1e0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d019      	beq.n	8002d4e <HAL_GPIO_DeInit+0xae>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a59      	ldr	r2, [pc, #356]	; (8002e84 <HAL_GPIO_DeInit+0x1e4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_DeInit+0xaa>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a58      	ldr	r2, [pc, #352]	; (8002e88 <HAL_GPIO_DeInit+0x1e8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_DeInit+0xa6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a57      	ldr	r2, [pc, #348]	; (8002e8c <HAL_GPIO_DeInit+0x1ec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_DeInit+0xa2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a56      	ldr	r2, [pc, #344]	; (8002e90 <HAL_GPIO_DeInit+0x1f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_DeInit+0x9e>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e00e      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00c      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d42:	2306      	movs	r3, #6
 8002d44:	e00a      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d46:	2305      	movs	r3, #5
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_DeInit+0xbc>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d132      	bne.n	8002dd2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d6c:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4947      	ldr	r1, [pc, #284]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d7a:	4b46      	ldr	r3, [pc, #280]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	4944      	ldr	r1, [pc, #272]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d88:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	4940      	ldr	r1, [pc, #256]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d96:	4b3f      	ldr	r3, [pc, #252]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	493d      	ldr	r1, [pc, #244]	; (8002e94 <HAL_GPIO_DeInit+0x1f4>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002db4:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_GPIO_DeInit+0x1d0>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	482a      	ldr	r0, [pc, #168]	; (8002e70 <HAL_GPIO_DeInit+0x1d0>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	400a      	ands	r2, r1
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2103      	movs	r1, #3
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	401a      	ands	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	08d2      	lsrs	r2, r2, #3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	2103      	movs	r1, #3
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	401a      	ands	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f af2e 	bls.w	8002cbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40021800 	.word	0x40021800
 8002e90:	40021c00 	.word	0x40021c00
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002edc:	887a      	ldrh	r2, [r7, #2]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	041a      	lsls	r2, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	400b      	ands	r3, r1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e034      	b.n	8002f7a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002f18:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f245 5255 	movw	r2, #21845	; 0x5555
 8002f22:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6852      	ldr	r2, [r2, #4]
 8002f2c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002f38:	f7fe fc9a 	bl	8001870 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f3e:	e00f      	b.n	8002f60 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002f40:	f7fe fc96 	bl	8001870 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b31      	cmp	r3, #49	; 0x31
 8002f4c:	d908      	bls.n	8002f60 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e00c      	b.n	8002f7a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e8      	bne.n	8002f40 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002f76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002f92:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e264      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d075      	beq.n	80030ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d112      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05b      	beq.n	80030ac <HAL_RCC_OscConfig+0x108>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d157      	bne.n	80030ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e23f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x74>
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a8a      	ldr	r2, [pc, #552]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a87      	ldr	r2, [pc, #540]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe fc08 	bl	8001870 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fc04 	bl	8001870 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e204      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xc0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fbf4 	bl	8001870 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe fbf0 	bl	8001870 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1f0      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0xe8>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1c4      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fba9 	bl	8001870 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fba5 	bl	8001870 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1a5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fb88 	bl	8001870 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fb84 	bl	8001870 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e184      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d030      	beq.n	80031f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fb68 	bl	8001870 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fb64 	bl	8001870 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e164      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x200>
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fb51 	bl	8001870 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe fb4d 	bl	8001870 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e14d      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a0 	beq.w	800333e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d121      	bne.n	800327e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe fb13 	bl	8001870 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e011      	b.n	8003272 <HAL_RCC_OscConfig+0x2ce>
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	42470000 	.word	0x42470000
 8003258:	42470e80 	.word	0x42470e80
 800325c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe fb06 	bl	8001870 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e106      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x2f0>
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x312>
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 80032b6:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe facb 	bl	8001870 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe fac7 	bl	8001870 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0c5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x33a>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe fab5 	bl	8001870 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fab1 	bl	8001870 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0af      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a55      	ldr	r2, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 809b 	beq.w	800347e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d05c      	beq.n	800340e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d141      	bne.n	80033e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fa85 	bl	8001870 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe fa81 	bl	8001870 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e081      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	019b      	lsls	r3, r3, #6
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fa5a 	bl	8001870 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe fa56 	bl	8001870 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e056      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 80033de:	e04e      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe fa43 	bl	8001870 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe fa3f 	bl	8001870 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e03f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x44a>
 800340c:	e037      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e032      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d028      	beq.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d121      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d11a      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003450:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d107      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40007000 	.word	0x40007000
 800348c:	40023800 	.word	0x40023800
 8003490:	42470060 	.word	0x42470060

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cc      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90c      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b8      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800350a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	494d      	ldr	r1, [pc, #308]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d044      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d119      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d003      	beq.n	8003552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e067      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fe f974 	bl	8001870 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fe f970 	bl	8001870 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d20c      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e032      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361a:	f000 f821 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd ffa4 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	0800f700 	.word	0x0800f700
 8003658:	20000008 	.word	0x20000008
 800365c:	2000000c 	.word	0x2000000c

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003666:	2100      	movs	r1, #0
 8003668:	6079      	str	r1, [r7, #4]
 800366a:	2100      	movs	r1, #0
 800366c:	60f9      	str	r1, [r7, #12]
 800366e:	2100      	movs	r1, #0
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003672:	2100      	movs	r1, #0
 8003674:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003676:	4952      	ldr	r1, [pc, #328]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003678:	6889      	ldr	r1, [r1, #8]
 800367a:	f001 010c 	and.w	r1, r1, #12
 800367e:	2908      	cmp	r1, #8
 8003680:	d00d      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x3e>
 8003682:	2908      	cmp	r1, #8
 8003684:	f200 8094 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x150>
 8003688:	2900      	cmp	r1, #0
 800368a:	d002      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x32>
 800368c:	2904      	cmp	r1, #4
 800368e:	d003      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x38>
 8003690:	e08e      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003694:	60bb      	str	r3, [r7, #8]
       break;
 8003696:	e08e      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003698:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800369a:	60bb      	str	r3, [r7, #8]
      break;
 800369c:	e08b      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800369e:	4948      	ldr	r1, [pc, #288]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036a0:	6849      	ldr	r1, [r1, #4]
 80036a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a8:	4945      	ldr	r1, [pc, #276]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036aa:	6849      	ldr	r1, [r1, #4]
 80036ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d024      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4942      	ldr	r1, [pc, #264]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036b6:	6849      	ldr	r1, [r1, #4]
 80036b8:	0989      	lsrs	r1, r1, #6
 80036ba:	4608      	mov	r0, r1
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036c4:	f04f 0500 	mov.w	r5, #0
 80036c8:	ea00 0204 	and.w	r2, r0, r4
 80036cc:	ea01 0305 	and.w	r3, r1, r5
 80036d0:	493d      	ldr	r1, [pc, #244]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036d2:	fb01 f003 	mul.w	r0, r1, r3
 80036d6:	2100      	movs	r1, #0
 80036d8:	fb01 f102 	mul.w	r1, r1, r2
 80036dc:	1844      	adds	r4, r0, r1
 80036de:	493a      	ldr	r1, [pc, #232]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036e0:	fba2 0101 	umull	r0, r1, r2, r1
 80036e4:	1863      	adds	r3, r4, r1
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	f7fc fdc6 	bl	8000280 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e04a      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	ea02 0400 	and.w	r4, r2, r0
 8003716:	ea03 0501 	and.w	r5, r3, r1
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	014b      	lsls	r3, r1, #5
 8003728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800372c:	0142      	lsls	r2, r0, #5
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	1b00      	subs	r0, r0, r4
 8003734:	eb61 0105 	sbc.w	r1, r1, r5
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	018b      	lsls	r3, r1, #6
 8003742:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003746:	0182      	lsls	r2, r0, #6
 8003748:	1a12      	subs	r2, r2, r0
 800374a:	eb63 0301 	sbc.w	r3, r3, r1
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	00d9      	lsls	r1, r3, #3
 8003758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800375c:	00d0      	lsls	r0, r2, #3
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	1912      	adds	r2, r2, r4
 8003764:	eb45 0303 	adc.w	r3, r5, r3
 8003768:	f04f 0000 	mov.w	r0, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	0299      	lsls	r1, r3, #10
 8003772:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003776:	0290      	lsls	r0, r2, #10
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	461a      	mov	r2, r3
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f7fc fd7a 	bl	8000280 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	60bb      	str	r3, [r7, #8]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x164>)
 80037b2:	60bb      	str	r3, [r7, #8]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	68bb      	ldr	r3, [r7, #8]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdb0      	pop	{r4, r5, r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	017d7840 	.word	0x017d7840

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000008 	.word	0x20000008

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	0800f710 	.word	0x0800f710

0800380c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003810:	f7ff ffdc 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0b5b      	lsrs	r3, r3, #13
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	0800f710 	.word	0x0800f710

08003834 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	220f      	movs	r2, #15
 8003842:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003844:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0203 	and.w	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_GetClockConfig+0x5c>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	08db      	lsrs	r3, r3, #3
 800386e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_RCC_GetClockConfig+0x60>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	40023c00 	.word	0x40023c00

08003898 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038c0:	4b62      	ldr	r3, [pc, #392]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038c6:	f7fd ffd3 	bl	8001870 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038ce:	f7fd ffcf 	bl	8001870 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0b0      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038e0:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	019a      	lsls	r2, r3, #6
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	071b      	lsls	r3, r3, #28
 80038f8:	4955      	ldr	r1, [pc, #340]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003900:	4b52      	ldr	r3, [pc, #328]	; (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003906:	f7fd ffb3 	bl	8001870 <HAL_GetTick>
 800390a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800390e:	f7fd ffaf 	bl	8001870 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e090      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003920:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8083 	beq.w	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a43      	ldr	r2, [pc, #268]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3e      	ldr	r2, [pc, #248]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800395c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003960:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003962:	f7fd ff85 	bl	8001870 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003968:	e008      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800396a:	f7fd ff81 	bl	8001870 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e062      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0f0      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d028      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a6:	4b2a      	ldr	r3, [pc, #168]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d114      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039ce:	f7fd ff4f 	bl	8001870 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d4:	e00a      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d6:	f7fd ff4b 	bl	8001870 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e02a      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0ee      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a04:	d10d      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	490d      	ldr	r1, [pc, #52]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
 8003a20:	e005      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a28:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	4905      	ldr	r1, [pc, #20]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	42470068 	.word	0x42470068
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000
 8003a58:	42470e40 	.word	0x42470e40

08003a5c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a62:	f7fd ff05 	bl	8001870 <HAL_GetTick>
 8003a66:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a68:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5c      	ldr	r2, [pc, #368]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fd fefb 	bl	8001870 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0a7      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a88:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003a94:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a51      	ldr	r2, [pc, #324]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003aa0:	f7fd fee6 	bl	8001870 <HAL_GetTick>
 8003aa4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aae:	f7fd fedf 	bl	8001870 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e089      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003ac4:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003ad0:	f7fd fece 	bl	8001870 <HAL_GetTick>
 8003ad4:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003adc:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003ae0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fec4 	bl	8001870 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e070      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003af6:	4b3a      	ldr	r3, [pc, #232]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b02:	f7fd feb5 	bl	8001870 <HAL_GetTick>
 8003b06:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b12:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fd feab 	bl	8001870 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e057      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003b34:	f7fd fe9c 	bl	8001870 <HAL_GetTick>
 8003b38:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003b3a:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b48:	f7fd fe92 	bl	8001870 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e03e      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b68:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <HAL_RCC_DeInit+0x188>)
 8003b6a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003b6c:	4b1c      	ldr	r3, [pc, #112]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b6e:	4a1e      	ldr	r2, [pc, #120]	; (8003be8 <HAL_RCC_DeInit+0x18c>)
 8003b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003b74:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b7a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b7e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b8a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b92:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003b96:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003b98:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ba2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_DeInit+0x184>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_DeInit+0x190>)
 8003bbe:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_DeInit+0x194>)
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_DeInit+0x198>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fcde 	bl	8001588 <HAL_InitTick>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40023800 	.word	0x40023800
 8003be4:	04003010 	.word	0x04003010
 8003be8:	20003000 	.word	0x20003000
 8003bec:	20000008 	.word	0x20000008
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	2000000c 	.word	0x2000000c

08003bf8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e066      	b.n	8003cdc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7f5b      	ldrb	r3, [r3, #29]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d105      	bne.n	8003c24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fb40 	bl	80012a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	22ca      	movs	r2, #202	; 0xca
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2253      	movs	r2, #83	; 0x53
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f87a 	bl	8003d34 <RTC_EnterInitMode>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12c      	bne.n	8003ca4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6919      	ldr	r1, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f881 	bl	8003da2 <RTC_ExitInitMode>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d113      	bne.n	8003cd2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d00:	f7fd fdb6 	bl	8001870 <HAL_GetTick>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d06:	e009      	b.n	8003d1c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d08:	f7fd fdb2 	bl	8001870 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d16:	d901      	bls.n	8003d1c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e007      	b.n	8003d2c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d122      	bne.n	8003d98 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d60:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d62:	f7fd fd85 	bl	8001870 <HAL_GetTick>
 8003d66:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d68:	e00c      	b.n	8003d84 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d6a:	f7fd fd81 	bl	8001870 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d78:	d904      	bls.n	8003d84 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <RTC_EnterInitMode+0x64>
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d1e8      	bne.n	8003d6a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dbc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff89 	bl	8003ce4 <HAL_RTC_WaitForSynchro>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e07b      	b.n	8003ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d108      	bne.n	8003e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e0e:	d009      	beq.n	8003e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	61da      	str	r2, [r3, #28]
 8003e16:	e005      	b.n	8003e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d106      	bne.n	8003e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7fd fa5a 	bl	80012f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	ea42 0103 	orr.w	r1, r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0104 	and.w	r1, r3, #4
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	f003 0210 	and.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01a      	b.n	8003f46 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f26:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fd fa2d 	bl	8001388 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b088      	sub	sp, #32
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_SPI_Transmit+0x22>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e126      	b.n	80041be <HAL_SPI_Transmit+0x270>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f78:	f7fd fc7a 	bl	8001870 <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f92:	e10b      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x52>
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa4:	e102      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2203      	movs	r2, #3
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	88fa      	ldrh	r2, [r7, #6]
 8003fbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	88fa      	ldrh	r2, [r7, #6]
 8003fc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fec:	d10f      	bne.n	800400e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800400c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d007      	beq.n	800402c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004034:	d14b      	bne.n	80040ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_SPI_Transmit+0xf6>
 800403e:	8afb      	ldrh	r3, [r7, #22]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d13e      	bne.n	80040c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	1c9a      	adds	r2, r3, #2
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004068:	e02b      	b.n	80040c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d112      	bne.n	800409e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	881a      	ldrh	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	86da      	strh	r2, [r3, #54]	; 0x36
 800409c:	e011      	b.n	80040c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800409e:	f7fd fbe7 	bl	8001870 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d803      	bhi.n	80040b6 <HAL_SPI_Transmit+0x168>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d102      	bne.n	80040bc <HAL_SPI_Transmit+0x16e>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040c0:	e074      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ce      	bne.n	800406a <HAL_SPI_Transmit+0x11c>
 80040cc:	e04c      	b.n	8004168 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_SPI_Transmit+0x18e>
 80040d6:	8afb      	ldrh	r3, [r7, #22]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d140      	bne.n	800415e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004102:	e02c      	b.n	800415e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d113      	bne.n	800413a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
 8004138:	e011      	b.n	800415e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800413a:	f7fd fb99 	bl	8001870 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	429a      	cmp	r2, r3
 8004148:	d803      	bhi.n	8004152 <HAL_SPI_Transmit+0x204>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d102      	bne.n	8004158 <HAL_SPI_Transmit+0x20a>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d102      	bne.n	800415e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800415c:	e026      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1cd      	bne.n	8004104 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fbcb 	bl	8004908 <SPI_EndRxTxTransaction>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e000      	b.n	80041ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80041aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b088      	sub	sp, #32
 80041ca:	af02      	add	r7, sp, #8
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	603b      	str	r3, [r7, #0]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041e2:	d112      	bne.n	800420a <HAL_SPI_Receive+0x44>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10e      	bne.n	800420a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2204      	movs	r2, #4
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f8f1 	bl	80043e8 <HAL_SPI_TransmitReceive>
 8004206:	4603      	mov	r3, r0
 8004208:	e0ea      	b.n	80043e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_SPI_Receive+0x52>
 8004214:	2302      	movs	r3, #2
 8004216:	e0e3      	b.n	80043e0 <HAL_SPI_Receive+0x21a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004220:	f7fd fb26 	bl	8001870 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d002      	beq.n	8004238 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004236:	e0ca      	b.n	80043ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_SPI_Receive+0x7e>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d102      	bne.n	800424a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004248:	e0c1      	b.n	80043ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2204      	movs	r2, #4
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	88fa      	ldrh	r2, [r7, #6]
 8004262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004290:	d10f      	bne.n	80042b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d007      	beq.n	80042d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d162      	bne.n	800439e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042d8:	e02e      	b.n	8004338 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d115      	bne.n	8004314 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f103 020c 	add.w	r2, r3, #12
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004312:	e011      	b.n	8004338 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004314:	f7fd faac 	bl	8001870 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d803      	bhi.n	800432c <HAL_SPI_Receive+0x166>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d102      	bne.n	8004332 <HAL_SPI_Receive+0x16c>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004336:	e04a      	b.n	80043ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1cb      	bne.n	80042da <HAL_SPI_Receive+0x114>
 8004342:	e031      	b.n	80043a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d113      	bne.n	800437a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	b292      	uxth	r2, r2
 800435e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	1c9a      	adds	r2, r3, #2
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004378:	e011      	b.n	800439e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437a:	f7fd fa79 	bl	8001870 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d803      	bhi.n	8004392 <HAL_SPI_Receive+0x1cc>
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Receive+0x1d2>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800439c:	e017      	b.n	80043ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1cd      	bne.n	8004344 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fa45 	bl	800483c <SPI_EndRxTransaction>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
 80043ca:	e000      	b.n	80043ce <HAL_SPI_Receive+0x208>
  }

error :
 80043cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043f6:	2301      	movs	r3, #1
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_SPI_TransmitReceive+0x26>
 800440a:	2302      	movs	r3, #2
 800440c:	e18a      	b.n	8004724 <HAL_SPI_TransmitReceive+0x33c>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004416:	f7fd fa2b 	bl	8001870 <HAL_GetTick>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800442c:	887b      	ldrh	r3, [r7, #2]
 800442e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004434:	2b01      	cmp	r3, #1
 8004436:	d00f      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x70>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443e:	d107      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d103      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x68>
 8004448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800444c:	2b04      	cmp	r3, #4
 800444e:	d003      	beq.n	8004458 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004450:	2302      	movs	r3, #2
 8004452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004456:	e15b      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_SPI_TransmitReceive+0x82>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_TransmitReceive+0x82>
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004470:	e14e      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b04      	cmp	r3, #4
 800447c:	d003      	beq.n	8004486 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2205      	movs	r2, #5
 8004482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	887a      	ldrh	r2, [r7, #2]
 8004496:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d007      	beq.n	80044da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e2:	d178      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x10a>
 80044ec:	8b7b      	ldrh	r3, [r7, #26]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d166      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	881a      	ldrh	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004516:	e053      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d11b      	bne.n	800455e <HAL_SPI_TransmitReceive+0x176>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_SPI_TransmitReceive+0x176>
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d113      	bne.n	800455e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	881a      	ldrh	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d119      	bne.n	80045a0 <HAL_SPI_TransmitReceive+0x1b8>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	b292      	uxth	r2, r2
 8004582:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	1c9a      	adds	r2, r3, #2
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800459c:	2301      	movs	r3, #1
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045a0:	f7fd f966 	bl	8001870 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d807      	bhi.n	80045c0 <HAL_SPI_TransmitReceive+0x1d8>
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d003      	beq.n	80045c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045be:	e0a7      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1a6      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x130>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1a1      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x130>
 80045d4:	e07c      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x1fc>
 80045de:	8b7b      	ldrh	r3, [r7, #26]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d16b      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	7812      	ldrb	r2, [r2, #0]
 80045f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460a:	e057      	b.n	80046bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d11c      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x26c>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x26c>
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d114      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d119      	bne.n	8004696 <HAL_SPI_TransmitReceive+0x2ae>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d014      	beq.n	8004696 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004692:	2301      	movs	r3, #1
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004696:	f7fd f8eb 	bl	8001870 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d803      	bhi.n	80046ae <HAL_SPI_TransmitReceive+0x2c6>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_TransmitReceive+0x2cc>
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d103      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046ba:	e029      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1a2      	bne.n	800460c <HAL_SPI_TransmitReceive+0x224>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d19d      	bne.n	800460c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f917 	bl	8004908 <SPI_EndRxTxTransaction>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d006      	beq.n	80046ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046ec:	e010      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10b      	bne.n	800470e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	e000      	b.n	8004710 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800470e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004720:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004724:	4618      	mov	r0, r3
 8004726:	3730      	adds	r7, #48	; 0x30
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	4613      	mov	r3, r2
 800473a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800473c:	f7fd f898 	bl	8001870 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	4413      	add	r3, r2
 800474a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800474c:	f7fd f890 	bl	8001870 <HAL_GetTick>
 8004750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	015b      	lsls	r3, r3, #5
 8004758:	0d1b      	lsrs	r3, r3, #20
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004762:	e054      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d050      	beq.n	800480e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800476c:	f7fd f880 	bl	8001870 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	429a      	cmp	r2, r3
 800477a:	d902      	bls.n	8004782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d13d      	bne.n	80047fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d111      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d004      	beq.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ae:	d107      	bne.n	80047c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d10f      	bne.n	80047ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e017      	b.n	800482e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	3b01      	subs	r3, #1
 800480c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d19b      	bne.n	8004764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000008 	.word	0x20000008

0800483c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004850:	d111      	bne.n	8004876 <SPI_EndRxTransaction+0x3a>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d004      	beq.n	8004866 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d107      	bne.n	8004876 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487e:	d12a      	bne.n	80048d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d012      	beq.n	80048b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f7ff ff49 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d02d      	beq.n	80048fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	f043 0220 	orr.w	r2, r3, #32
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e026      	b.n	80048fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2101      	movs	r1, #1
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff36 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01a      	beq.n	80048fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e013      	b.n	80048fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2200      	movs	r2, #0
 80048de:	2101      	movs	r1, #1
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff ff23 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e000      	b.n	80048fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af02      	add	r7, sp, #8
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <SPI_EndRxTxTransaction+0x7c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <SPI_EndRxTxTransaction+0x80>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0d5b      	lsrs	r3, r3, #21
 8004920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004932:	d112      	bne.n	800495a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fef4 	bl	800472c <SPI_WaitFlagStateUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d016      	beq.n	8004978 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e00f      	b.n	800497a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3b01      	subs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d0f2      	beq.n	800495a <SPI_EndRxTxTransaction+0x52>
 8004974:	e000      	b.n	8004978 <SPI_EndRxTxTransaction+0x70>
        break;
 8004976:	bf00      	nop
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000008 	.word	0x20000008
 8004988:	165e9f81 	.word	0x165e9f81

0800498c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e041      	b.n	8004a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f839 	bl	8004a2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 f9d8 	bl	8004d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04e      	b.n	8004af6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d022      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d01d      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d018      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00e      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	; (8004b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a19      	ldr	r2, [pc, #100]	; (8004b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d111      	bne.n	8004ae4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b06      	cmp	r3, #6
 8004ad0:	d010      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40010000 	.word	0x40010000
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	40000800 	.word	0x40000800
 8004b10:	40000c00 	.word	0x40000c00
 8004b14:	40010400 	.word	0x40010400
 8004b18:	40014000 	.word	0x40014000
 8004b1c:	40001800 	.word	0x40001800

08004b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d122      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d11b      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0202 	mvn.w	r2, #2
 8004b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f8ee 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004b68:	e005      	b.n	8004b76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8e0 	bl	8004d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8f1 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b04      	cmp	r3, #4
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0204 	mvn.w	r2, #4
 8004ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8c4 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8b6 	bl	8004d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8c7 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f89a 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f88c 	bl	8004d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f89d 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b10      	cmp	r3, #16
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0210 	mvn.w	r2, #16
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f870 	bl	8004d44 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f862 	bl	8004d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f873 	bl	8004d58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0201 	mvn.w	r2, #1
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc fabe 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b80      	cmp	r3, #128	; 0x80
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbc:	2b80      	cmp	r3, #128	; 0x80
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f902 	bl	8004ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d10e      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d107      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f838 	bl	8004d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0220 	mvn.w	r2, #32
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f8cc 	bl	8004ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9e:	d00f      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3d      	ldr	r2, [pc, #244]	; (8004e98 <TIM_Base_SetConfig+0x118>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3c      	ldr	r2, [pc, #240]	; (8004e9c <TIM_Base_SetConfig+0x11c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3b      	ldr	r2, [pc, #236]	; (8004ea0 <TIM_Base_SetConfig+0x120>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3a      	ldr	r2, [pc, #232]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d108      	bne.n	8004dd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d027      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2c      	ldr	r2, [pc, #176]	; (8004e98 <TIM_Base_SetConfig+0x118>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d023      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <TIM_Base_SetConfig+0x11c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01f      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <TIM_Base_SetConfig+0x120>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d017      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <TIM_Base_SetConfig+0x128>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d013      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a27      	ldr	r2, [pc, #156]	; (8004eac <TIM_Base_SetConfig+0x12c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00f      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <TIM_Base_SetConfig+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <TIM_Base_SetConfig+0x134>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <TIM_Base_SetConfig+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <TIM_Base_SetConfig+0x13c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <TIM_Base_SetConfig+0x114>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <TIM_Base_SetConfig+0xf8>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <TIM_Base_SetConfig+0x124>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d103      	bne.n	8004e80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	615a      	str	r2, [r3, #20]
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40010400 	.word	0x40010400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800
 8004eb4:	40001800 	.word	0x40001800
 8004eb8:	40001c00 	.word	0x40001c00
 8004ebc:	40002000 	.word	0x40002000

08004ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e03f      	b.n	8004f7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc fa58 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2224      	movs	r2, #36	; 0x24
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 ff71 	bl	8005e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e021      	b.n	8004fd8 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	; 0x24
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004faa:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fc fabf 	bl	8001530 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d165      	bne.n	80050c6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Transmit_DMA+0x26>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e05e      	b.n	80050c8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Transmit_DMA+0x38>
 8005014:	2302      	movs	r3, #2
 8005016:	e057      	b.n	80050c8 <HAL_UART_Transmit_DMA+0xe8>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	88fa      	ldrh	r2, [r7, #6]
 800502a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2221      	movs	r2, #33	; 0x21
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_UART_Transmit_DMA+0xf0>)
 8005046:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504c:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_UART_Transmit_DMA+0xf4>)
 800504e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005054:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <HAL_UART_Transmit_DMA+0xf8>)
 8005056:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	2200      	movs	r2, #0
 800505e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3304      	adds	r3, #4
 8005074:	461a      	mov	r2, r3
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f7fc fe4a 	bl	8001d10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005084:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3314      	adds	r3, #20
 8005094:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	617b      	str	r3, [r7, #20]
   return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ae:	627a      	str	r2, [r7, #36]	; 0x24
 80050b0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6a39      	ldr	r1, [r7, #32]
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3730      	adds	r7, #48	; 0x30
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	080056ad 	.word	0x080056ad
 80050d4:	08005747 	.word	0x08005747
 80050d8:	080058bf 	.word	0x080058bf

080050dc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d11d      	bne.n	8005132 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_UART_Receive_DMA+0x26>
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e016      	b.n	8005134 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UART_Receive_DMA+0x38>
 8005110:	2302      	movs	r3, #2
 8005112:	e00f      	b.n	8005134 <HAL_UART_Receive_DMA+0x58>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	461a      	mov	r2, r3
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 fc13 	bl	8005954 <UART_Start_Receive_DMA>
 800512e:	4603      	mov	r3, r0
 8005130:	e000      	b.n	8005134 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b0ba      	sub	sp, #232	; 0xe8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005162:	2300      	movs	r3, #0
 8005164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800516e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800517a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_UART_IRQHandler+0x66>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fd7f 	bl	8005c9e <UART_Receive_IT>
      return;
 80051a0:	e256      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80de 	beq.w	8005368 <HAL_UART_IRQHandler+0x22c>
 80051ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80d1 	beq.w	8005368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_UART_IRQHandler+0xae>
 80051d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d005      	beq.n	80051ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_UART_IRQHandler+0xd2>
 80051f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f043 0202 	orr.w	r2, r3, #2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00b      	beq.n	8005232 <HAL_UART_IRQHandler+0xf6>
 800521a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d005      	beq.n	8005232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f043 0204 	orr.w	r2, r3, #4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <HAL_UART_IRQHandler+0x126>
 800523e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b00      	cmp	r3, #0
 8005248:	d105      	bne.n	8005256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800524a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0208 	orr.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 81ed 	beq.w	8005646 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800526c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_UART_IRQHandler+0x14e>
 8005278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fd0a 	bl	8005c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <HAL_UART_IRQHandler+0x17a>
 80052ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d04f      	beq.n	8005356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc12 	bl	8005ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d141      	bne.n	800534e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3314      	adds	r3, #20
 80052f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800530e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1d9      	bne.n	80052ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d013      	beq.n	8005346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4a7d      	ldr	r2, [pc, #500]	; (8005518 <HAL_UART_IRQHandler+0x3dc>)
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4618      	mov	r0, r3
 800532c:	f7fc fdb8 	bl	8001ea0 <HAL_DMA_Abort_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00e      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f99a 	bl	8005680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e00a      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f996 	bl	8005680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e006      	b.n	8005364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f992 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005362:	e170      	b.n	8005646 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	bf00      	nop
    return;
 8005366:	e16e      	b.n	8005646 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	2b01      	cmp	r3, #1
 800536e:	f040 814a 	bne.w	8005606 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 8143 	beq.w	8005606 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 813c 	beq.w	8005606 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	f040 80b4 	bne.w	800551c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8140 	beq.w	800564a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053d2:	429a      	cmp	r2, r3
 80053d4:	f080 8139 	bcs.w	800564a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ea:	f000 8088 	beq.w	80054fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053fc:	e853 3f00 	ldrex	r3, [r3]
 8005400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800540c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800541a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800541e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800542a:	e841 2300 	strex	r3, r2, [r1]
 800542e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1d9      	bne.n	80053ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3314      	adds	r3, #20
 8005440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800544a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800544c:	f023 0301 	bic.w	r3, r3, #1
 8005450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800545e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e1      	bne.n	800543a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800549a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800549c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e3      	bne.n	8005476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	330c      	adds	r3, #12
 80054c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	e853 3f00 	ldrex	r3, [r3]
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ce:	f023 0310 	bic.w	r3, r3, #16
 80054d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	330c      	adds	r3, #12
 80054dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80054e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e3      	bne.n	80054bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fc fc61 	bl	8001dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005506:	b29b      	uxth	r3, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8c0 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005514:	e099      	b.n	800564a <HAL_UART_IRQHandler+0x50e>
 8005516:	bf00      	nop
 8005518:	08005ba7 	.word	0x08005ba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005524:	b29b      	uxth	r3, r3
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 808b 	beq.w	800564e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8086 	beq.w	800564e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005566:	647a      	str	r2, [r7, #68]	; 0x44
 8005568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800556c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3314      	adds	r3, #20
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	623b      	str	r3, [r7, #32]
   return(result);
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	f023 0301 	bic.w	r3, r3, #1
 8005590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800559e:	633a      	str	r2, [r7, #48]	; 0x30
 80055a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0310 	bic.w	r3, r3, #16
 80055d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055e4:	61fa      	str	r2, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	69b9      	ldr	r1, [r7, #24]
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	617b      	str	r3, [r7, #20]
   return(result);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e3      	bne.n	80055c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055fc:	4619      	mov	r1, r3
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f848 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005604:	e023      	b.n	800564e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <HAL_UART_IRQHandler+0x4ea>
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fad5 	bl	8005bce <UART_Transmit_IT>
    return;
 8005624:	e014      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <HAL_UART_IRQHandler+0x514>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fb15 	bl	8005c6e <UART_EndTransmit_IT>
    return;
 8005644:	e004      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
    return;
 8005646:	bf00      	nop
 8005648:	e002      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
      return;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <HAL_UART_IRQHandler+0x514>
      return;
 800564e:	bf00      	nop
  }
}
 8005650:	37e8      	adds	r7, #232	; 0xe8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b090      	sub	sp, #64	; 0x40
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d137      	bne.n	8005738 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2200      	movs	r2, #0
 80056cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3314      	adds	r3, #20
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	623b      	str	r3, [r7, #32]
   return(result);
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ee:	633a      	str	r2, [r7, #48]	; 0x30
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	60fb      	str	r3, [r7, #12]
   return(result);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005722:	61fa      	str	r2, [r7, #28]
 8005724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005726:	69b9      	ldr	r1, [r7, #24]
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	e841 2300 	strex	r3, r2, [r1]
 800572e:	617b      	str	r3, [r7, #20]
   return(result);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1e5      	bne.n	8005702 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005736:	e002      	b.n	800573e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005738:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800573a:	f7fa ff67 	bl	800060c <HAL_UART_TxCpltCallback>
}
 800573e:	bf00      	nop
 8005740:	3740      	adds	r7, #64	; 0x40
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff7f 	bl	8005658 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b09c      	sub	sp, #112	; 0x70
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d172      	bne.n	8005864 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	2200      	movs	r2, #0
 8005782:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330c      	adds	r3, #12
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578e:	e853 3f00 	ldrex	r3, [r3]
 8005792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800579a:	66bb      	str	r3, [r7, #104]	; 0x68
 800579c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80057a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e5      	bne.n	8005784 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3314      	adds	r3, #20
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	667b      	str	r3, [r7, #100]	; 0x64
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057d8:	647a      	str	r2, [r7, #68]	; 0x44
 80057da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3314      	adds	r3, #20
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	623b      	str	r3, [r7, #32]
   return(result);
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005802:	663b      	str	r3, [r7, #96]	; 0x60
 8005804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3314      	adds	r3, #20
 800580a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800580c:	633a      	str	r2, [r7, #48]	; 0x30
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d119      	bne.n	8005864 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0310 	bic.w	r3, r3, #16
 8005846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005850:	61fa      	str	r2, [r7, #28]
 8005852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	69b9      	ldr	r1, [r7, #24]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	617b      	str	r3, [r7, #20]
   return(result);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005870:	4619      	mov	r1, r3
 8005872:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005874:	f7ff ff0e 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005878:	e002      	b.n	8005880 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800587a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800587c:	f7fa fedc 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 8005880:	bf00      	nop
 8005882:	3770      	adds	r7, #112	; 0x70
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589a:	2b01      	cmp	r3, #1
 800589c:	d108      	bne.n	80058b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058a2:	085b      	lsrs	r3, r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fef3 	bl	8005694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058ae:	e002      	b.n	80058b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fedb 	bl	800566c <HAL_UART_RxHalfCpltCallback>
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	bf0c      	ite	eq
 80058de:	2301      	moveq	r3, #1
 80058e0:	2300      	movne	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d108      	bne.n	8005904 <UART_DMAError+0x46>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2200      	movs	r2, #0
 80058fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80058fe:	68b8      	ldr	r0, [r7, #8]
 8005900:	f000 f8c6 	bl	8005a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	bf0c      	ite	eq
 8005912:	2301      	moveq	r3, #1
 8005914:	2300      	movne	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b22      	cmp	r3, #34	; 0x22
 8005924:	d108      	bne.n	8005938 <UART_DMAError+0x7a>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005932:	68b8      	ldr	r0, [r7, #8]
 8005934:	f000 f8d4 	bl	8005ae0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f043 0210 	orr.w	r2, r3, #16
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005944:	68b8      	ldr	r0, [r7, #8]
 8005946:	f7ff fe9b 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b098      	sub	sp, #96	; 0x60
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	4613      	mov	r3, r2
 8005960:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	88fa      	ldrh	r2, [r7, #6]
 800596c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2222      	movs	r2, #34	; 0x22
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <UART_Start_Receive_DMA+0x130>)
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <UART_Start_Receive_DMA+0x134>)
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	4a3e      	ldr	r2, [pc, #248]	; (8005a8c <UART_Start_Receive_DMA+0x138>)
 8005992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2200      	movs	r2, #0
 800599a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	f7fc f9ac 	bl	8001d10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	613b      	str	r3, [r7, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d019      	beq.n	8005a12 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e5      	bne.n	80059de <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	f043 0301 	orr.w	r3, r3, #1
 8005a28:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3314      	adds	r3, #20
 8005a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a32:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e5      	bne.n	8005a12 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	617b      	str	r3, [r7, #20]
   return(result);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3314      	adds	r3, #20
 8005a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a66:	627a      	str	r2, [r7, #36]	; 0x24
 8005a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e5      	bne.n	8005a46 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3760      	adds	r7, #96	; 0x60
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	08005763 	.word	0x08005763
 8005a88:	08005889 	.word	0x08005889
 8005a8c:	080058bf 	.word	0x080058bf

08005a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005aae:	61fb      	str	r3, [r7, #28]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	61ba      	str	r2, [r7, #24]
 8005aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e5      	bne.n	8005a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005ad4:	bf00      	nop
 8005ad6:	3724      	adds	r7, #36	; 0x24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b095      	sub	sp, #84	; 0x54
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b08:	643a      	str	r2, [r7, #64]	; 0x40
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d119      	bne.n	8005b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f023 0310 	bic.w	r3, r3, #16
 8005b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b78:	61ba      	str	r2, [r7, #24]
 8005b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	613b      	str	r3, [r7, #16]
   return(result);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e5      	bne.n	8005b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b9a:	bf00      	nop
 8005b9c:	3754      	adds	r7, #84	; 0x54
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fd5d 	bl	8005680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b21      	cmp	r3, #33	; 0x21
 8005be0:	d13e      	bne.n	8005c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	d114      	bne.n	8005c16 <UART_Transmit_IT+0x48>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d110      	bne.n	8005c16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]
 8005c14:	e008      	b.n	8005c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6211      	str	r1, [r2, #32]
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4619      	mov	r1, r3
 8005c36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10f      	bne.n	8005c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68da      	ldr	r2, [r3, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fa fcbc 	bl	800060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b08c      	sub	sp, #48	; 0x30
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b22      	cmp	r3, #34	; 0x22
 8005cb0:	f040 80ab 	bne.w	8005e0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cbc:	d117      	bne.n	8005cee <UART_Receive_IT+0x50>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d113      	bne.n	8005cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	629a      	str	r2, [r3, #40]	; 0x28
 8005cec:	e026      	b.n	8005d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d00:	d007      	beq.n	8005d12 <UART_Receive_IT+0x74>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <UART_Receive_IT+0x82>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e008      	b.n	8005d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d15a      	bne.n	8005e06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0220 	bic.w	r2, r2, #32
 8005d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695a      	ldr	r2, [r3, #20]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d135      	bne.n	8005dfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	613b      	str	r3, [r7, #16]
   return(result);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f023 0310 	bic.w	r3, r3, #16
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	623a      	str	r2, [r7, #32]
 8005db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	69f9      	ldr	r1, [r7, #28]
 8005dbc:	6a3a      	ldr	r2, [r7, #32]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d10a      	bne.n	8005dee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fc4d 	bl	8005694 <HAL_UARTEx_RxEventCallback>
 8005dfa:	e002      	b.n	8005e02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fa fc1b 	bl	8000638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e002      	b.n	8005e0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e000      	b.n	8005e0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	b09f      	sub	sp, #124	; 0x7c
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	68d9      	ldr	r1, [r3, #12]
 8005e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	ea40 0301 	orr.w	r3, r0, r1
 8005e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	431a      	orrs	r2, r3
 8005e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e58:	f021 010c 	bic.w	r1, r1, #12
 8005e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e62:	430b      	orrs	r3, r1
 8005e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	6999      	ldr	r1, [r3, #24]
 8005e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	ea40 0301 	orr.w	r3, r0, r1
 8005e7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4bc5      	ldr	r3, [pc, #788]	; (8006198 <UART_SetConfig+0x384>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d004      	beq.n	8005e92 <UART_SetConfig+0x7e>
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4bc3      	ldr	r3, [pc, #780]	; (800619c <UART_SetConfig+0x388>)
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d103      	bne.n	8005e9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e92:	f7fd fcbb 	bl	800380c <HAL_RCC_GetPCLK2Freq>
 8005e96:	6778      	str	r0, [r7, #116]	; 0x74
 8005e98:	e002      	b.n	8005ea0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9a:	f7fd fca3 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8005e9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea8:	f040 80b6 	bne.w	8006018 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eae:	461c      	mov	r4, r3
 8005eb0:	f04f 0500 	mov.w	r5, #0
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	6439      	str	r1, [r7, #64]	; 0x40
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ec4:	1912      	adds	r2, r2, r4
 8005ec6:	eb45 0303 	adc.w	r3, r5, r3
 8005eca:	f04f 0000 	mov.w	r0, #0
 8005ece:	f04f 0100 	mov.w	r1, #0
 8005ed2:	00d9      	lsls	r1, r3, #3
 8005ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed8:	00d0      	lsls	r0, r2, #3
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	1911      	adds	r1, r2, r4
 8005ee0:	6639      	str	r1, [r7, #96]	; 0x60
 8005ee2:	416b      	adcs	r3, r5
 8005ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005efc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f00:	f7fa f9be 	bl	8000280 <__aeabi_uldivmod>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4ba5      	ldr	r3, [pc, #660]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	011e      	lsls	r6, r3, #4
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	461c      	mov	r4, r3
 8005f16:	f04f 0500 	mov.w	r5, #0
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	1891      	adds	r1, r2, r2
 8005f20:	6339      	str	r1, [r7, #48]	; 0x30
 8005f22:	415b      	adcs	r3, r3
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f2a:	1912      	adds	r2, r2, r4
 8005f2c:	eb45 0303 	adc.w	r3, r5, r3
 8005f30:	f04f 0000 	mov.w	r0, #0
 8005f34:	f04f 0100 	mov.w	r1, #0
 8005f38:	00d9      	lsls	r1, r3, #3
 8005f3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f3e:	00d0      	lsls	r0, r2, #3
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	1911      	adds	r1, r2, r4
 8005f46:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f48:	416b      	adcs	r3, r5
 8005f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f66:	f7fa f98b 	bl	8000280 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b8c      	ldr	r3, [pc, #560]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a87      	ldr	r2, [pc, #540]	; (80061a0 <UART_SetConfig+0x38c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f90:	441e      	add	r6, r3
 8005f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f94:	4618      	mov	r0, r3
 8005f96:	f04f 0100 	mov.w	r1, #0
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	1894      	adds	r4, r2, r2
 8005fa0:	623c      	str	r4, [r7, #32]
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005faa:	1812      	adds	r2, r2, r0
 8005fac:	eb41 0303 	adc.w	r3, r1, r3
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	f04f 0500 	mov.w	r5, #0
 8005fb8:	00dd      	lsls	r5, r3, #3
 8005fba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fbe:	00d4      	lsls	r4, r2, #3
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	1814      	adds	r4, r2, r0
 8005fc6:	653c      	str	r4, [r7, #80]	; 0x50
 8005fc8:	414b      	adcs	r3, r1
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
 8005fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	1891      	adds	r1, r2, r2
 8005fd8:	61b9      	str	r1, [r7, #24]
 8005fda:	415b      	adcs	r3, r3
 8005fdc:	61fb      	str	r3, [r7, #28]
 8005fde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fe6:	f7fa f94b 	bl	8000280 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b6c      	ldr	r3, [pc, #432]	; (80061a0 <UART_SetConfig+0x38c>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a67      	ldr	r2, [pc, #412]	; (80061a0 <UART_SetConfig+0x38c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 0207 	and.w	r2, r3, #7
 800600e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4432      	add	r2, r6
 8006014:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006016:	e0b9      	b.n	800618c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	461c      	mov	r4, r3
 800601c:	f04f 0500 	mov.w	r5, #0
 8006020:	4622      	mov	r2, r4
 8006022:	462b      	mov	r3, r5
 8006024:	1891      	adds	r1, r2, r2
 8006026:	6139      	str	r1, [r7, #16]
 8006028:	415b      	adcs	r3, r3
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006030:	1912      	adds	r2, r2, r4
 8006032:	eb45 0303 	adc.w	r3, r5, r3
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	00d9      	lsls	r1, r3, #3
 8006040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006044:	00d0      	lsls	r0, r2, #3
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	eb12 0804 	adds.w	r8, r2, r4
 800604e:	eb43 0905 	adc.w	r9, r3, r5
 8006052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4618      	mov	r0, r3
 8006058:	f04f 0100 	mov.w	r1, #0
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	008b      	lsls	r3, r1, #2
 8006066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800606a:	0082      	lsls	r2, r0, #2
 800606c:	4640      	mov	r0, r8
 800606e:	4649      	mov	r1, r9
 8006070:	f7fa f906 	bl	8000280 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4b49      	ldr	r3, [pc, #292]	; (80061a0 <UART_SetConfig+0x38c>)
 800607a:	fba3 2302 	umull	r2, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	011e      	lsls	r6, r3, #4
 8006082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006084:	4618      	mov	r0, r3
 8006086:	f04f 0100 	mov.w	r1, #0
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	1894      	adds	r4, r2, r2
 8006090:	60bc      	str	r4, [r7, #8]
 8006092:	415b      	adcs	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800609a:	1812      	adds	r2, r2, r0
 800609c:	eb41 0303 	adc.w	r3, r1, r3
 80060a0:	f04f 0400 	mov.w	r4, #0
 80060a4:	f04f 0500 	mov.w	r5, #0
 80060a8:	00dd      	lsls	r5, r3, #3
 80060aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060ae:	00d4      	lsls	r4, r2, #3
 80060b0:	4622      	mov	r2, r4
 80060b2:	462b      	mov	r3, r5
 80060b4:	1814      	adds	r4, r2, r0
 80060b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80060b8:	414b      	adcs	r3, r1
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	008b      	lsls	r3, r1, #2
 80060d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d4:	0082      	lsls	r2, r0, #2
 80060d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060da:	f7fa f8d1 	bl	8000280 <__aeabi_uldivmod>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <UART_SetConfig+0x38c>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2164      	movs	r1, #100	; 0x64
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	3332      	adds	r3, #50	; 0x32
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <UART_SetConfig+0x38c>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006102:	441e      	add	r6, r3
 8006104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006106:	4618      	mov	r0, r3
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	1894      	adds	r4, r2, r2
 8006112:	603c      	str	r4, [r7, #0]
 8006114:	415b      	adcs	r3, r3
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611c:	1812      	adds	r2, r2, r0
 800611e:	eb41 0303 	adc.w	r3, r1, r3
 8006122:	f04f 0400 	mov.w	r4, #0
 8006126:	f04f 0500 	mov.w	r5, #0
 800612a:	00dd      	lsls	r5, r3, #3
 800612c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006130:	00d4      	lsls	r4, r2, #3
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	eb12 0a00 	adds.w	sl, r2, r0
 800613a:	eb43 0b01 	adc.w	fp, r3, r1
 800613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4618      	mov	r0, r3
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	008b      	lsls	r3, r1, #2
 8006152:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006156:	0082      	lsls	r2, r0, #2
 8006158:	4650      	mov	r0, sl
 800615a:	4659      	mov	r1, fp
 800615c:	f7fa f890 	bl	8000280 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <UART_SetConfig+0x38c>)
 8006166:	fba3 1302 	umull	r1, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2164      	movs	r1, #100	; 0x64
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	3332      	adds	r3, #50	; 0x32
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <UART_SetConfig+0x38c>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4432      	add	r2, r6
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	377c      	adds	r7, #124	; 0x7c
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40011000 	.word	0x40011000
 800619c:	40011400 	.word	0x40011400
 80061a0:	51eb851f 	.word	0x51eb851f

080061a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80061b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061b6:	2b84      	cmp	r3, #132	; 0x84
 80061b8:	d005      	beq.n	80061c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80061ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4413      	add	r3, r2
 80061c2:	3303      	adds	r3, #3
 80061c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80061c6:	68fb      	ldr	r3, [r7, #12]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061da:	f3ef 8305 	mrs	r3, IPSR
 80061de:	607b      	str	r3, [r7, #4]
  return(result);
 80061e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bf14      	ite	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	2300      	moveq	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80061fc:	f001 ffb0 	bl	8008160 <vTaskStartScheduler>
  
  return osOK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	bd80      	pop	{r7, pc}

08006206 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006208:	b089      	sub	sp, #36	; 0x24
 800620a:	af04      	add	r7, sp, #16
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d020      	beq.n	800625a <osThreadCreate+0x54>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01c      	beq.n	800625a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685c      	ldr	r4, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681d      	ldr	r5, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691e      	ldr	r6, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff ffb6 	bl	80061a4 <makeFreeRtosPriority>
 8006238:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006242:	9202      	str	r2, [sp, #8]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	9100      	str	r1, [sp, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4632      	mov	r2, r6
 800624c:	4629      	mov	r1, r5
 800624e:	4620      	mov	r0, r4
 8006250:	f001 fc14 	bl	8007a7c <xTaskCreateStatic>
 8006254:	4603      	mov	r3, r0
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e01c      	b.n	8006294 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685c      	ldr	r4, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006266:	b29e      	uxth	r6, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff ff98 	bl	80061a4 <makeFreeRtosPriority>
 8006274:	4602      	mov	r2, r0
 8006276:	f107 030c 	add.w	r3, r7, #12
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	9200      	str	r2, [sp, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	4632      	mov	r2, r6
 8006282:	4629      	mov	r1, r5
 8006284:	4620      	mov	r0, r4
 8006286:	f001 fc56 	bl	8007b36 <xTaskCreate>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d001      	beq.n	8006294 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800629e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <osDelay+0x16>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	e000      	b.n	80062b6 <osDelay+0x18>
 80062b4:	2301      	movs	r3, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fd8a 	bl	8007dd0 <vTaskDelay>
  
  return osOK;
 80062bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	460b      	mov	r3, r1
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d013      	beq.n	8006306 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80062de:	7afb      	ldrb	r3, [r7, #11]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <osTimerCreate+0x20>
 80062e4:	2101      	movs	r1, #1
 80062e6:	e000      	b.n	80062ea <osTimerCreate+0x22>
 80062e8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80062f2:	9201      	str	r2, [sp, #4]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	460a      	mov	r2, r1
 80062fa:	2101      	movs	r1, #1
 80062fc:	480b      	ldr	r0, [pc, #44]	; (800632c <osTimerCreate+0x64>)
 80062fe:	f002 fe0e 	bl	8008f1e <xTimerCreateStatic>
 8006302:	4603      	mov	r3, r0
 8006304:	e00e      	b.n	8006324 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <osTimerCreate+0x48>
 800630c:	2201      	movs	r2, #1
 800630e:	e000      	b.n	8006312 <osTimerCreate+0x4a>
 8006310:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2101      	movs	r1, #1
 800631c:	4803      	ldr	r0, [pc, #12]	; (800632c <osTimerCreate+0x64>)
 800631e:	f002 fddd 	bl	8008edc <xTimerCreate>
 8006322:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	0800f494 	.word	0x0800f494

08006330 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <osTimerStart+0x20>
    ticks = 1;
 800634c:	2301      	movs	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8006350:	f7ff ff40 	bl	80061d4 <inHandlerMode>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01a      	beq.n	8006390 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800635a:	f107 030c 	add.w	r3, r7, #12
 800635e:	2200      	movs	r2, #0
 8006360:	9200      	str	r2, [sp, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	2109      	movs	r1, #9
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 fe52 	bl	8009010 <xTimerGenericCommand>
 800636c:	4603      	mov	r3, r0
 800636e:	2b01      	cmp	r3, #1
 8006370:	d002      	beq.n	8006378 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8006372:	23ff      	movs	r3, #255	; 0xff
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e018      	b.n	80063aa <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d015      	beq.n	80063aa <osTimerStart+0x7a>
 800637e:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <osTimerStart+0x84>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	e00c      	b.n	80063aa <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	2104      	movs	r1, #4
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f002 fe38 	bl	8009010 <xTimerGenericCommand>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d001      	beq.n	80063aa <osTimerStart+0x7a>
      result = osErrorOS;
 80063a6:	23ff      	movs	r3, #255	; 0xff
 80063a8:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80063aa:	697b      	ldr	r3, [r7, #20]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	e000ed04 	.word	0xe000ed04

080063b8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af02      	add	r7, sp, #8
 80063be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80063c8:	f7ff ff04 	bl	80061d4 <inHandlerMode>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d019      	beq.n	8006406 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80063d2:	f107 0308 	add.w	r3, r7, #8
 80063d6:	2200      	movs	r2, #0
 80063d8:	9200      	str	r2, [sp, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	2108      	movs	r1, #8
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f002 fe16 	bl	8009010 <xTimerGenericCommand>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d001      	beq.n	80063ee <osTimerStop+0x36>
      return osErrorOS;
 80063ea:	23ff      	movs	r3, #255	; 0xff
 80063ec:	e019      	b.n	8006422 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d015      	beq.n	8006420 <osTimerStop+0x68>
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <osTimerStop+0x74>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	e00c      	b.n	8006420 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006406:	2300      	movs	r3, #0
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	2300      	movs	r3, #0
 800640c:	2200      	movs	r2, #0
 800640e:	2103      	movs	r1, #3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f002 fdfd 	bl	8009010 <xTimerGenericCommand>
 8006416:	4603      	mov	r3, r0
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <osTimerStop+0x68>
      result = osErrorOS;
 800641c:	23ff      	movs	r3, #255	; 0xff
 800641e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d007      	beq.n	8006450 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4619      	mov	r1, r3
 8006446:	2001      	movs	r0, #1
 8006448:	f000 fc7b 	bl	8006d42 <xQueueCreateMutexStatic>
 800644c:	4603      	mov	r3, r0
 800644e:	e003      	b.n	8006458 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006450:	2001      	movs	r0, #1
 8006452:	f000 fc5e 	bl	8006d12 <xQueueCreateMutex>
 8006456:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <osMutexWait+0x18>
    return osErrorParameter;
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	e03a      	b.n	80064ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006482:	d103      	bne.n	800648c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006484:	f04f 33ff 	mov.w	r3, #4294967295
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e009      	b.n	80064a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d006      	beq.n	80064a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <osMutexWait+0x40>
      ticks = 1;
 800649c:	2301      	movs	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80064a0:	f7ff fe98 	bl	80061d4 <inHandlerMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d017      	beq.n	80064da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	461a      	mov	r2, r3
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 f8dc 	bl	8007670 <xQueueReceiveFromISR>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <osMutexWait+0x62>
      return osErrorOS;
 80064be:	23ff      	movs	r3, #255	; 0xff
 80064c0:	e015      	b.n	80064ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d011      	beq.n	80064ec <osMutexWait+0x8c>
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <osMutexWait+0x98>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	e008      	b.n	80064ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80064da:	68f9      	ldr	r1, [r7, #12]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 ffbb 	bl	8007458 <xQueueSemaphoreTake>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d001      	beq.n	80064ec <osMutexWait+0x8c>
    return osErrorOS;
 80064e8:	23ff      	movs	r3, #255	; 0xff
 80064ea:	e000      	b.n	80064ee <osMutexWait+0x8e>
  }
  
  return osOK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800650c:	f7ff fe62 	bl	80061d4 <inHandlerMode>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006516:	f107 0308 	add.w	r3, r7, #8
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fe2e 	bl	800717e <xQueueGiveFromISR>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d001      	beq.n	800652c <osMutexRelease+0x30>
      return osErrorOS;
 8006528:	23ff      	movs	r3, #255	; 0xff
 800652a:	e017      	b.n	800655c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d013      	beq.n	800655a <osMutexRelease+0x5e>
 8006532:	4b0c      	ldr	r3, [pc, #48]	; (8006564 <osMutexRelease+0x68>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	e00a      	b.n	800655a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006544:	2300      	movs	r3, #0
 8006546:	2200      	movs	r2, #0
 8006548:	2100      	movs	r1, #0
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fc7e 	bl	8006e4c <xQueueGenericSend>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006556:	23ff      	movs	r3, #255	; 0xff
 8006558:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <osSemaphoreCreate+0x40>
    if (count == 1) {
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10a      	bne.n	8006596 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2203      	movs	r2, #3
 8006586:	9200      	str	r2, [sp, #0]
 8006588:	2200      	movs	r2, #0
 800658a:	2100      	movs	r1, #0
 800658c:	2001      	movs	r0, #1
 800658e:	f000 fad5 	bl	8006b3c <xQueueGenericCreateStatic>
 8006592:	4603      	mov	r3, r0
 8006594:	e023      	b.n	80065de <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8006596:	6838      	ldr	r0, [r7, #0]
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	461a      	mov	r2, r3
 80065a0:	f000 fbea 	bl	8006d78 <xQueueCreateCountingSemaphoreStatic>
 80065a4:	4603      	mov	r3, r0
 80065a6:	e01a      	b.n	80065de <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d110      	bne.n	80065d0 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80065ae:	2203      	movs	r2, #3
 80065b0:	2100      	movs	r1, #0
 80065b2:	2001      	movs	r0, #1
 80065b4:	f000 fb3a 	bl	8006c2c <xQueueGenericCreate>
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <osSemaphoreCreate+0x64>
 80065c0:	2300      	movs	r3, #0
 80065c2:	2200      	movs	r2, #0
 80065c4:	2100      	movs	r1, #0
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fc40 	bl	8006e4c <xQueueGenericSend>
      return sema;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e006      	b.n	80065de <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fc05 	bl	8006de6 <xQueueCreateCountingSemaphore>
 80065dc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	e03a      	b.n	8006676 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d103      	bne.n	8006614 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800660c:	f04f 33ff 	mov.w	r3, #4294967295
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e009      	b.n	8006628 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d006      	beq.n	8006628 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <osSemaphoreWait+0x40>
      ticks = 1;
 8006624:	2301      	movs	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006628:	f7ff fdd4 	bl	80061d4 <inHandlerMode>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d017      	beq.n	8006662 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	461a      	mov	r2, r3
 8006638:	2100      	movs	r1, #0
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 f818 	bl	8007670 <xQueueReceiveFromISR>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d001      	beq.n	800664a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006646:	23ff      	movs	r3, #255	; 0xff
 8006648:	e015      	b.n	8006676 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d011      	beq.n	8006674 <osSemaphoreWait+0x8c>
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <osSemaphoreWait+0x98>)
 8006652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	e008      	b.n	8006674 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fef7 	bl	8007458 <xQueueSemaphoreTake>
 800666a:	4603      	mov	r3, r0
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006670:	23ff      	movs	r3, #255	; 0xff
 8006672:	e000      	b.n	8006676 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800668c:	2300      	movs	r3, #0
 800668e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006690:	2300      	movs	r3, #0
 8006692:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006694:	f7ff fd9e 	bl	80061d4 <inHandlerMode>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d016      	beq.n	80066cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800669e:	f107 0308 	add.w	r3, r7, #8
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd6a 	bl	800717e <xQueueGiveFromISR>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d001      	beq.n	80066b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80066b0:	23ff      	movs	r3, #255	; 0xff
 80066b2:	e017      	b.n	80066e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d013      	beq.n	80066e2 <osSemaphoreRelease+0x5e>
 80066ba:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <osSemaphoreRelease+0x68>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	e00a      	b.n	80066e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80066cc:	2300      	movs	r3, #0
 80066ce:	2200      	movs	r2, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fbba 	bl	8006e4c <xQueueGenericSend>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d001      	beq.n	80066e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80066de:	23ff      	movs	r3, #255	; 0xff
 80066e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80066e2:	68fb      	ldr	r3, [r7, #12]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	e000ed04 	.word	0xe000ed04

080066f0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80066f0:	b590      	push	{r4, r7, lr}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d011      	beq.n	8006726 <osMessageCreate+0x36>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6859      	ldr	r1, [r3, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2400      	movs	r4, #0
 800671c:	9400      	str	r4, [sp, #0]
 800671e:	f000 fa0d 	bl	8006b3c <xQueueGenericCreateStatic>
 8006722:	4603      	mov	r3, r0
 8006724:	e008      	b.n	8006738 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	4619      	mov	r1, r3
 8006732:	f000 fa7b 	bl	8006c2c <xQueueGenericCreate>
 8006736:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}

08006740 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <osMessagePut+0x1e>
    ticks = 1;
 800675a:	2301      	movs	r3, #1
 800675c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800675e:	f7ff fd39 	bl	80061d4 <inHandlerMode>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d018      	beq.n	800679a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006768:	f107 0210 	add.w	r2, r7, #16
 800676c:	f107 0108 	add.w	r1, r7, #8
 8006770:	2300      	movs	r3, #0
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 fc68 	bl	8007048 <xQueueGenericSendFromISR>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d001      	beq.n	8006782 <osMessagePut+0x42>
      return osErrorOS;
 800677e:	23ff      	movs	r3, #255	; 0xff
 8006780:	e018      	b.n	80067b4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d014      	beq.n	80067b2 <osMessagePut+0x72>
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <osMessagePut+0x7c>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	e00b      	b.n	80067b2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800679a:	f107 0108 	add.w	r1, r7, #8
 800679e:	2300      	movs	r3, #0
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fb52 	bl	8006e4c <xQueueGenericSend>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d001      	beq.n	80067b2 <osMessagePut+0x72>
      return osErrorOS;
 80067ae:	23ff      	movs	r3, #255	; 0xff
 80067b0:	e000      	b.n	80067b4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80067c0:	b590      	push	{r4, r7, lr}
 80067c2:	b08b      	sub	sp, #44	; 0x2c
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	617b      	str	r3, [r7, #20]
    return event;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	461c      	mov	r4, r3
 80067e2:	f107 0314 	add.w	r3, r7, #20
 80067e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067ee:	e054      	b.n	800689a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d103      	bne.n	8006808 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
 8006806:	e009      	b.n	800681c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d006      	beq.n	800681c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <osMessageGet+0x5c>
      ticks = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800681c:	f7ff fcda 	bl	80061d4 <inHandlerMode>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01c      	beq.n	8006860 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006826:	f107 0220 	add.w	r2, r7, #32
 800682a:	f107 0314 	add.w	r3, r7, #20
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	68b8      	ldr	r0, [r7, #8]
 8006834:	f000 ff1c 	bl	8007670 <xQueueReceiveFromISR>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d102      	bne.n	8006844 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800683e:	2310      	movs	r3, #16
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e001      	b.n	8006848 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006844:	2300      	movs	r3, #0
 8006846:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01d      	beq.n	800688a <osMessageGet+0xca>
 800684e:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <osMessageGet+0xe4>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e014      	b.n	800688a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	3304      	adds	r3, #4
 8006866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006868:	4619      	mov	r1, r3
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f000 fd14 	bl	8007298 <xQueueReceive>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d102      	bne.n	800687c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006876:	2310      	movs	r3, #16
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	e006      	b.n	800688a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <osMessageGet+0xc6>
 8006882:	2300      	movs	r3, #0
 8006884:	e000      	b.n	8006888 <osMessageGet+0xc8>
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	461c      	mov	r4, r3
 800688e:	f107 0314 	add.w	r3, r7, #20
 8006892:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006896:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	372c      	adds	r7, #44	; 0x2c
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd90      	pop	{r4, r7, pc}
 80068a2:	bf00      	nop
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fac1 	bl	8007e38 <vTaskSuspend>
  
  return osOK;
 80068b6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80068c8:	f7ff fc84 	bl	80061d4 <inHandlerMode>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00e      	beq.n	80068f0 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fbd2 	bl	800807c <xTaskResumeFromISR>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10b      	bne.n	80068f6 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80068de:	4b08      	ldr	r3, [pc, #32]	; (8006900 <osThreadResume+0x40>)
 80068e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	e002      	b.n	80068f6 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 fb65 	bl	8007fc0 <vTaskResume>
  }
  return osOK;
 80068f6:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f103 0208 	add.w	r2, r3, #8
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f04f 32ff 	mov.w	r2, #4294967295
 800691c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f103 0208 	add.w	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0208 	add.w	r2, r3, #8
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d103      	bne.n	80069c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e00c      	b.n	80069e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3308      	adds	r3, #8
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e002      	b.n	80069d4 <vListInsert+0x2e>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d2f6      	bcs.n	80069ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	601a      	str	r2, [r3, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6892      	ldr	r2, [r2, #8]
 8006a2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6852      	ldr	r2, [r2, #4]
 8006a38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d103      	bne.n	8006a4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	1e5a      	subs	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a96:	f002 fed5 	bl	8009844 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	441a      	add	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	68f9      	ldr	r1, [r7, #12]
 8006aca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006acc:	fb01 f303 	mul.w	r3, r1, r3
 8006ad0:	441a      	add	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d114      	bne.n	8006b16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01a      	beq.n	8006b2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3310      	adds	r3, #16
 8006af8:	4618      	mov	r0, r3
 8006afa:	f001 fdc5 	bl	8008688 <xTaskRemoveFromEventList>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d012      	beq.n	8006b2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <xQueueGenericReset+0xcc>)
 8006b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	e009      	b.n	8006b2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	3310      	adds	r3, #16
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fef2 	bl	8006904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff feed 	bl	8006904 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b2a:	f002 febb 	bl	80098a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b2e:	2301      	movs	r3, #1
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08e      	sub	sp, #56	; 0x38
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10a      	bne.n	8006b82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <xQueueGenericCreateStatic+0x52>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <xQueueGenericCreateStatic+0x56>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueGenericCreateStatic+0x58>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xQueueGenericCreateStatic+0x7e>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueGenericCreateStatic+0x82>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGenericCreateStatic+0x84>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61fb      	str	r3, [r7, #28]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bda:	2348      	movs	r3, #72	; 0x48
 8006bdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b48      	cmp	r3, #72	; 0x48
 8006be2:	d00a      	beq.n	8006bfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	61bb      	str	r3, [r7, #24]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00d      	beq.n	8006c22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4613      	mov	r3, r2
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f83f 	bl	8006ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3730      	adds	r7, #48	; 0x30
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08a      	sub	sp, #40	; 0x28
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	613b      	str	r3, [r7, #16]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	3348      	adds	r3, #72	; 0x48
 8006c64:	4618      	mov	r0, r3
 8006c66:	f002 ff0f 	bl	8009a88 <pvPortMalloc>
 8006c6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d011      	beq.n	8006c96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	3348      	adds	r3, #72	; 0x48
 8006c7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c84:	79fa      	ldrb	r2, [r7, #7]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 f805 	bl	8006ca0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c96:	69bb      	ldr	r3, [r7, #24]
	}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e002      	b.n	8006cc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cce:	2101      	movs	r1, #1
 8006cd0:	69b8      	ldr	r0, [r7, #24]
 8006cd2:	f7ff fecb 	bl	8006a6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cd6:	bf00      	nop
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00e      	beq.n	8006d0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2200      	movs	r2, #0
 8006d02:	2100      	movs	r1, #0
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8a1 	bl	8006e4c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d0a:	bf00      	nop
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	4603      	mov	r3, r0
 8006d1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6939      	ldr	r1, [r7, #16]
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7ff ff7e 	bl	8006c2c <xQueueGenericCreate>
 8006d30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff ffd3 	bl	8006cde <prvInitialiseMutex>

		return xNewQueue;
 8006d38:	68fb      	ldr	r3, [r7, #12]
	}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af02      	add	r7, sp, #8
 8006d48:	4603      	mov	r3, r0
 8006d4a:	6039      	str	r1, [r7, #0]
 8006d4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	2300      	movs	r3, #0
 8006d54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	6939      	ldr	r1, [r7, #16]
 8006d60:	6978      	ldr	r0, [r7, #20]
 8006d62:	f7ff feeb 	bl	8006b3c <xQueueGenericCreateStatic>
 8006d66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ffb8 	bl	8006cde <prvInitialiseMutex>

		return xNewQueue;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	; 0x28
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61bb      	str	r3, [r7, #24]
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d90a      	bls.n	8006dbe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	617b      	str	r3, [r7, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff feb7 	bl	8006b3c <xQueueGenericCreateStatic>
 8006dce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d002      	beq.n	8006ddc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
	}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3720      	adds	r7, #32
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	613b      	str	r3, [r7, #16]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d90a      	bls.n	8006e2a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff fefc 	bl	8006c2c <xQueueGenericCreate>
 8006e34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e42:	697b      	ldr	r3, [r7, #20]
	}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	; 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10a      	bne.n	8006e7e <xQueueGenericSend+0x32>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d103      	bne.n	8006e8c <xQueueGenericSend+0x40>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <xQueueGenericSend+0x44>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <xQueueGenericSend+0x46>
 8006e90:	2300      	movs	r3, #0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <xQueueGenericSend+0x60>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d103      	bne.n	8006eba <xQueueGenericSend+0x6e>
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <xQueueGenericSend+0x72>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueGenericSend+0x74>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueGenericSend+0x8e>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	623b      	str	r3, [r7, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eda:	f001 fd95 	bl	8008a08 <xTaskGetSchedulerState>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <xQueueGenericSend+0x9e>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <xQueueGenericSend+0xa2>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <xQueueGenericSend+0xa4>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xQueueGenericSend+0xbe>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	61fb      	str	r3, [r7, #28]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f0a:	f002 fc9b 	bl	8009844 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <xQueueGenericSend+0xd4>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d129      	bne.n	8006f74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f26:	f000 fc3b 	bl	80077a0 <prvCopyDataToQueue>
 8006f2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	3324      	adds	r3, #36	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fba5 	bl	8008688 <xTaskRemoveFromEventList>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d013      	beq.n	8006f6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f44:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <xQueueGenericSend+0x1f8>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	e00a      	b.n	8006f6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <xQueueGenericSend+0x1f8>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f6c:	f002 fc9a 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e063      	b.n	800703c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f7a:	f002 fc93 	bl	80098a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e05c      	b.n	800703c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d106      	bne.n	8006f96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f88:	f107 0314 	add.w	r3, r7, #20
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fbdd 	bl	800874c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f96:	f002 fc85 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f9a:	f001 f951 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f9e:	f002 fc51 	bl	8009844 <vPortEnterCritical>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d103      	bne.n	8006fb8 <xQueueGenericSend+0x16c>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d103      	bne.n	8006fce <xQueueGenericSend+0x182>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fce:	f002 fc69 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fd2:	1d3a      	adds	r2, r7, #4
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fbcc 	bl	8008778 <xTaskCheckForTimeOut>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d124      	bne.n	8007030 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe8:	f000 fcd2 	bl	8007990 <prvIsQueueFull>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	3310      	adds	r3, #16
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f001 faf4 	bl	80085e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007002:	f000 fc5d 	bl	80078c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007006:	f001 f929 	bl	800825c <xTaskResumeAll>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	f47f af7c 	bne.w	8006f0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007012:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <xQueueGenericSend+0x1f8>)
 8007014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	e772      	b.n	8006f0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007026:	f000 fc4b 	bl	80078c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800702a:	f001 f917 	bl	800825c <xTaskResumeAll>
 800702e:	e76c      	b.n	8006f0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007032:	f000 fc45 	bl	80078c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007036:	f001 f911 	bl	800825c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800703a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800703c:	4618      	mov	r0, r3
 800703e:	3738      	adds	r7, #56	; 0x38
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b090      	sub	sp, #64	; 0x40
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10a      	bne.n	8007076 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <xQueueGenericSendFromISR+0x3c>
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <xQueueGenericSendFromISR+0x40>
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <xQueueGenericSendFromISR+0x42>
 8007088:	2300      	movs	r3, #0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d103      	bne.n	80070b2 <xQueueGenericSendFromISR+0x6a>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <xQueueGenericSendFromISR+0x6e>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueueGenericSendFromISR+0x70>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	623b      	str	r3, [r7, #32]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070d2:	f002 fc99 	bl	8009a08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070d6:	f3ef 8211 	mrs	r2, BASEPRI
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61fa      	str	r2, [r7, #28]
 80070ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <xQueueGenericSendFromISR+0xbc>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d12f      	bne.n	8007164 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800710a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800711a:	f000 fb41 	bl	80077a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800711e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d112      	bne.n	800714e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	3324      	adds	r3, #36	; 0x24
 8007134:	4618      	mov	r0, r3
 8007136:	f001 faa7 	bl	8008688 <xTaskRemoveFromEventList>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00b      	beq.n	800715e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	e007      	b.n	800715e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800714e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007152:	3301      	adds	r3, #1
 8007154:	b2db      	uxtb	r3, r3
 8007156:	b25a      	sxtb	r2, r3
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800715e:	2301      	movs	r3, #1
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007162:	e001      	b.n	8007168 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007172:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007176:	4618      	mov	r0, r3
 8007178:	3740      	adds	r7, #64	; 0x40
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b08e      	sub	sp, #56	; 0x38
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	623b      	str	r3, [r7, #32]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	61fb      	str	r3, [r7, #28]
}
 80071c2:	bf00      	nop
 80071c4:	e7fe      	b.n	80071c4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <xQueueGiveFromISR+0x58>
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <xQueueGiveFromISR+0x5c>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <xQueueGiveFromISR+0x5e>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	61bb      	str	r3, [r7, #24]
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f6:	f002 fc07 	bl	8009a08 <vPortValidateInterruptPriority>
	__asm volatile
 80071fa:	f3ef 8211 	mrs	r2, BASEPRI
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	617a      	str	r2, [r7, #20]
 8007210:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007212:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007222:	429a      	cmp	r2, r3
 8007224:	d22b      	bcs.n	800727e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d112      	bne.n	8007268 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fa1a 	bl	8008688 <xTaskRemoveFromEventList>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e007      	b.n	8007278 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	b25a      	sxtb	r2, r3
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	e001      	b.n	8007282 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f383 8811 	msr	BASEPRI, r3
}
 800728c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007290:	4618      	mov	r0, r3
 8007292:	3738      	adds	r7, #56	; 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08c      	sub	sp, #48	; 0x30
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072a4:	2300      	movs	r3, #0
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <xQueueReceive+0x30>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	623b      	str	r3, [r7, #32]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <xQueueReceive+0x3e>
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <xQueueReceive+0x42>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <xQueueReceive+0x44>
 80072da:	2300      	movs	r3, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xQueueReceive+0x5e>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61fb      	str	r3, [r7, #28]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072f6:	f001 fb87 	bl	8008a08 <xTaskGetSchedulerState>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <xQueueReceive+0x6e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <xQueueReceive+0x72>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <xQueueReceive+0x74>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xQueueReceive+0x8e>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	61bb      	str	r3, [r7, #24]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007326:	f002 fa8d 	bl	8009844 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01f      	beq.n	8007376 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733a:	f000 fa9b 	bl	8007874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	1e5a      	subs	r2, r3, #1
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007344:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00f      	beq.n	800736e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	3310      	adds	r3, #16
 8007352:	4618      	mov	r0, r3
 8007354:	f001 f998 	bl	8008688 <xTaskRemoveFromEventList>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800735e:	4b3d      	ldr	r3, [pc, #244]	; (8007454 <xQueueReceive+0x1bc>)
 8007360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800736e:	f002 fa99 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 8007372:	2301      	movs	r3, #1
 8007374:	e069      	b.n	800744a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d103      	bne.n	8007384 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800737c:	f002 fa92 	bl	80098a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007380:	2300      	movs	r3, #0
 8007382:	e062      	b.n	800744a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800738a:	f107 0310 	add.w	r3, r7, #16
 800738e:	4618      	mov	r0, r3
 8007390:	f001 f9dc 	bl	800874c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007398:	f002 fa84 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800739c:	f000 ff50 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073a0:	f002 fa50 	bl	8009844 <vPortEnterCritical>
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073aa:	b25b      	sxtb	r3, r3
 80073ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b0:	d103      	bne.n	80073ba <xQueueReceive+0x122>
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073c0:	b25b      	sxtb	r3, r3
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c6:	d103      	bne.n	80073d0 <xQueueReceive+0x138>
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073d0:	f002 fa68 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073d4:	1d3a      	adds	r2, r7, #4
 80073d6:	f107 0310 	add.w	r3, r7, #16
 80073da:	4611      	mov	r1, r2
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 f9cb 	bl	8008778 <xTaskCheckForTimeOut>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d123      	bne.n	8007430 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ea:	f000 fabb 	bl	8007964 <prvIsQueueEmpty>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d017      	beq.n	8007424 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	3324      	adds	r3, #36	; 0x24
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 f8f3 	bl	80085e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007404:	f000 fa5c 	bl	80078c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007408:	f000 ff28 	bl	800825c <xTaskResumeAll>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d189      	bne.n	8007326 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007412:	4b10      	ldr	r3, [pc, #64]	; (8007454 <xQueueReceive+0x1bc>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	e780      	b.n	8007326 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007426:	f000 fa4b 	bl	80078c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800742a:	f000 ff17 	bl	800825c <xTaskResumeAll>
 800742e:	e77a      	b.n	8007326 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007432:	f000 fa45 	bl	80078c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007436:	f000 ff11 	bl	800825c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800743a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743c:	f000 fa92 	bl	8007964 <prvIsQueueEmpty>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	f43f af6f 	beq.w	8007326 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007448:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800744a:	4618      	mov	r0, r3
 800744c:	3730      	adds	r7, #48	; 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	e000ed04 	.word	0xe000ed04

08007458 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b08e      	sub	sp, #56	; 0x38
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	623b      	str	r3, [r7, #32]
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00a      	beq.n	80074a8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	61fb      	str	r3, [r7, #28]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a8:	f001 faae 	bl	8008a08 <xTaskGetSchedulerState>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <xQueueSemaphoreTake+0x60>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <xQueueSemaphoreTake+0x64>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <xQueueSemaphoreTake+0x66>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61bb      	str	r3, [r7, #24]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074d8:	f002 f9b4 	bl	8009844 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d024      	beq.n	8007532 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074f8:	f001 fc2e 	bl	8008d58 <pvTaskIncrementMutexHeldCount>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00f      	beq.n	800752a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	3310      	adds	r3, #16
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f8ba 	bl	8008688 <xTaskRemoveFromEventList>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800751a:	4b54      	ldr	r3, [pc, #336]	; (800766c <xQueueSemaphoreTake+0x214>)
 800751c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800752a:	f002 f9bb 	bl	80098a4 <vPortExitCritical>
				return pdPASS;
 800752e:	2301      	movs	r3, #1
 8007530:	e097      	b.n	8007662 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d111      	bne.n	800755c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	617b      	str	r3, [r7, #20]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007554:	f002 f9a6 	bl	80098a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007558:	2300      	movs	r3, #0
 800755a:	e082      	b.n	8007662 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800755c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	4618      	mov	r0, r3
 8007568:	f001 f8f0 	bl	800874c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007570:	f002 f998 	bl	80098a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007574:	f000 fe64 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007578:	f002 f964 	bl	8009844 <vPortEnterCritical>
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007582:	b25b      	sxtb	r3, r3
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d103      	bne.n	8007592 <xQueueSemaphoreTake+0x13a>
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007598:	b25b      	sxtb	r3, r3
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d103      	bne.n	80075a8 <xQueueSemaphoreTake+0x150>
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a8:	f002 f97c 	bl	80098a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ac:	463a      	mov	r2, r7
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f001 f8df 	bl	8008778 <xTaskCheckForTimeOut>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d132      	bne.n	8007626 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075c2:	f000 f9cf 	bl	8007964 <prvIsQueueEmpty>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d026      	beq.n	800761a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80075d4:	f002 f936 	bl	8009844 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4618      	mov	r0, r3
 80075de:	f001 fa31 	bl	8008a44 <xTaskPriorityInherit>
 80075e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075e4:	f002 f95e 	bl	80098a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ea:	3324      	adds	r3, #36	; 0x24
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	4611      	mov	r1, r2
 80075f0:	4618      	mov	r0, r3
 80075f2:	f000 fff9 	bl	80085e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f8:	f000 f962 	bl	80078c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075fc:	f000 fe2e 	bl	800825c <xTaskResumeAll>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af68 	bne.w	80074d8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007608:	4b18      	ldr	r3, [pc, #96]	; (800766c <xQueueSemaphoreTake+0x214>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	e75e      	b.n	80074d8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800761a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800761c:	f000 f950 	bl	80078c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007620:	f000 fe1c 	bl	800825c <xTaskResumeAll>
 8007624:	e758      	b.n	80074d8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007628:	f000 f94a 	bl	80078c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762c:	f000 fe16 	bl	800825c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007632:	f000 f997 	bl	8007964 <prvIsQueueEmpty>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f af4d 	beq.w	80074d8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00d      	beq.n	8007660 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007644:	f002 f8fe 	bl	8009844 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800764a:	f000 f891 	bl	8007770 <prvGetDisinheritPriorityAfterTimeout>
 800764e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007656:	4618      	mov	r0, r3
 8007658:	f001 faf0 	bl	8008c3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800765c:	f002 f922 	bl	80098a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007660:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007662:	4618      	mov	r0, r3
 8007664:	3738      	adds	r7, #56	; 0x38
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	e000ed04 	.word	0xe000ed04

08007670 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08e      	sub	sp, #56	; 0x38
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	623b      	str	r3, [r7, #32]
}
 8007698:	bf00      	nop
 800769a:	e7fe      	b.n	800769a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <xQueueReceiveFromISR+0x3a>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <xQueueReceiveFromISR+0x3e>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <xQueueReceiveFromISR+0x40>
 80076ae:	2300      	movs	r3, #0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	61fb      	str	r3, [r7, #28]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ca:	f002 f99d 	bl	8009a08 <vPortValidateInterruptPriority>
	__asm volatile
 80076ce:	f3ef 8211 	mrs	r2, BASEPRI
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	61ba      	str	r2, [r7, #24]
 80076e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d02f      	beq.n	8007756 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007704:	f000 f8b6 	bl	8007874 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770a:	1e5a      	subs	r2, r3, #1
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d112      	bne.n	8007740 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	3310      	adds	r3, #16
 8007726:	4618      	mov	r0, r3
 8007728:	f000 ffae 	bl	8008688 <xTaskRemoveFromEventList>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00e      	beq.n	8007750 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e007      	b.n	8007750 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007744:	3301      	adds	r3, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	b25a      	sxtb	r2, r3
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007750:	2301      	movs	r3, #1
 8007752:	637b      	str	r3, [r7, #52]	; 0x34
 8007754:	e001      	b.n	800775a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	; 0x34
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f383 8811 	msr	BASEPRI, r3
}
 8007764:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007768:	4618      	mov	r0, r3
 800776a:	3738      	adds	r7, #56	; 0x38
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d006      	beq.n	800778e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e001      	b.n	8007792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007792:	68fb      	ldr	r3, [r7, #12]
	}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10d      	bne.n	80077da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d14d      	bne.n	8007862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 f9b0 	bl	8008b30 <xTaskPriorityDisinherit>
 80077d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
 80077d8:	e043      	b.n	8007862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d119      	bne.n	8007814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6858      	ldr	r0, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	461a      	mov	r2, r3
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	f007 f90a 	bl	800ea04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685a      	ldr	r2, [r3, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	441a      	add	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d32b      	bcc.n	8007862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e026      	b.n	8007862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68d8      	ldr	r0, [r3, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	461a      	mov	r2, r3
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	f007 f8f0 	bl	800ea04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	425b      	negs	r3, r3
 800782e:	441a      	add	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	68da      	ldr	r2, [r3, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	429a      	cmp	r2, r3
 800783e:	d207      	bcs.n	8007850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	425b      	negs	r3, r3
 800784a:	441a      	add	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d105      	bne.n	8007862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d002      	beq.n	8007862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	3b01      	subs	r3, #1
 8007860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800786a:	697b      	ldr	r3, [r7, #20]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d018      	beq.n	80078b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68da      	ldr	r2, [r3, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	441a      	add	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	d303      	bcc.n	80078a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68d9      	ldr	r1, [r3, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	461a      	mov	r2, r3
 80078b2:	6838      	ldr	r0, [r7, #0]
 80078b4:	f007 f8a6 	bl	800ea04 <memcpy>
	}
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078c8:	f001 ffbc 	bl	8009844 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078d4:	e011      	b.n	80078fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d012      	beq.n	8007904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	3324      	adds	r3, #36	; 0x24
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fed0 	bl	8008688 <xTaskRemoveFromEventList>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80078ee:	f000 ffa5 	bl	800883c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dce9      	bgt.n	80078d6 <prvUnlockQueue+0x16>
 8007902:	e000      	b.n	8007906 <prvUnlockQueue+0x46>
					break;
 8007904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	22ff      	movs	r2, #255	; 0xff
 800790a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800790e:	f001 ffc9 	bl	80098a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007912:	f001 ff97 	bl	8009844 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800791c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800791e:	e011      	b.n	8007944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d012      	beq.n	800794e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3310      	adds	r3, #16
 800792c:	4618      	mov	r0, r3
 800792e:	f000 feab 	bl	8008688 <xTaskRemoveFromEventList>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007938:	f000 ff80 	bl	800883c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	3b01      	subs	r3, #1
 8007940:	b2db      	uxtb	r3, r3
 8007942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007948:	2b00      	cmp	r3, #0
 800794a:	dce9      	bgt.n	8007920 <prvUnlockQueue+0x60>
 800794c:	e000      	b.n	8007950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800794e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	22ff      	movs	r2, #255	; 0xff
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007958:	f001 ffa4 	bl	80098a4 <vPortExitCritical>
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800796c:	f001 ff6a 	bl	8009844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	e001      	b.n	8007982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007982:	f001 ff8f 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 8007986:	68fb      	ldr	r3, [r7, #12]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007998:	f001 ff54 	bl	8009844 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d102      	bne.n	80079ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e001      	b.n	80079b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079b2:	f001 ff77 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 80079b6:	68fb      	ldr	r3, [r7, #12]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	e014      	b.n	80079fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079d0:	4a0f      	ldr	r2, [pc, #60]	; (8007a10 <vQueueAddToRegistry+0x50>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10b      	bne.n	80079f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80079dc:	490c      	ldr	r1, [pc, #48]	; (8007a10 <vQueueAddToRegistry+0x50>)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80079e6:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <vQueueAddToRegistry+0x50>)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	4413      	add	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80079f2:	e006      	b.n	8007a02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	3301      	adds	r3, #1
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b07      	cmp	r3, #7
 80079fe:	d9e7      	bls.n	80079d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	2000980c 	.word	0x2000980c

08007a14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a24:	f001 ff0e 	bl	8009844 <vPortEnterCritical>
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a2e:	b25b      	sxtb	r3, r3
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d103      	bne.n	8007a3e <vQueueWaitForMessageRestricted+0x2a>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a44:	b25b      	sxtb	r3, r3
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d103      	bne.n	8007a54 <vQueueWaitForMessageRestricted+0x40>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a54:	f001 ff26 	bl	80098a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d106      	bne.n	8007a6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	3324      	adds	r3, #36	; 0x24
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fde1 	bl	8008630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a6e:	6978      	ldr	r0, [r7, #20]
 8007a70:	f7ff ff26 	bl	80078c0 <prvUnlockQueue>
	}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08e      	sub	sp, #56	; 0x38
 8007a80:	af04      	add	r7, sp, #16
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	623b      	str	r3, [r7, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <xTaskCreateStatic+0x46>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61fb      	str	r3, [r7, #28]
}
 8007abe:	bf00      	nop
 8007ac0:	e7fe      	b.n	8007ac0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ac2:	23b4      	movs	r3, #180	; 0xb4
 8007ac4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2bb4      	cmp	r3, #180	; 0xb4
 8007aca:	d00a      	beq.n	8007ae2 <xTaskCreateStatic+0x66>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	61bb      	str	r3, [r7, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ae2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d01e      	beq.n	8007b28 <xTaskCreateStatic+0xac>
 8007aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01b      	beq.n	8007b28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	2202      	movs	r2, #2
 8007afe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b02:	2300      	movs	r3, #0
 8007b04:	9303      	str	r3, [sp, #12]
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	9302      	str	r3, [sp, #8]
 8007b0a:	f107 0314 	add.w	r3, r7, #20
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68b9      	ldr	r1, [r7, #8]
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f850 	bl	8007bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b22:	f000 f8eb 	bl	8007cfc <prvAddNewTaskToReadyList>
 8007b26:	e001      	b.n	8007b2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b2c:	697b      	ldr	r3, [r7, #20]
	}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3728      	adds	r7, #40	; 0x28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b08c      	sub	sp, #48	; 0x30
 8007b3a:	af04      	add	r7, sp, #16
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	603b      	str	r3, [r7, #0]
 8007b42:	4613      	mov	r3, r2
 8007b44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 ff9c 	bl	8009a88 <pvPortMalloc>
 8007b50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00e      	beq.n	8007b76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b58:	20b4      	movs	r0, #180	; 0xb4
 8007b5a:	f001 ff95 	bl	8009a88 <pvPortMalloc>
 8007b5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b6c:	e005      	b.n	8007b7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b6e:	6978      	ldr	r0, [r7, #20]
 8007b70:	f002 f856 	bl	8009c20 <vPortFree>
 8007b74:	e001      	b.n	8007b7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d017      	beq.n	8007bb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b88:	88fa      	ldrh	r2, [r7, #6]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68b9      	ldr	r1, [r7, #8]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f80e 	bl	8007bc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ba4:	69f8      	ldr	r0, [r7, #28]
 8007ba6:	f000 f8a9 	bl	8007cfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007baa:	2301      	movs	r3, #1
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e002      	b.n	8007bb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3720      	adds	r7, #32
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f023 0307 	bic.w	r3, r3, #7
 8007be6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	617b      	str	r3, [r7, #20]
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d01f      	beq.n	8007c4e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
 8007c12:	e012      	b.n	8007c3a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	4413      	add	r3, r2
 8007c1a:	7819      	ldrb	r1, [r3, #0]
 8007c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	3334      	adds	r3, #52	; 0x34
 8007c24:	460a      	mov	r2, r1
 8007c26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	3301      	adds	r3, #1
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b0f      	cmp	r3, #15
 8007c3e:	d9e9      	bls.n	8007c14 <prvInitialiseNewTask+0x54>
 8007c40:	e000      	b.n	8007c44 <prvInitialiseNewTask+0x84>
			{
				break;
 8007c42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c4c:	e003      	b.n	8007c56 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	d901      	bls.n	8007c60 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c5c:	2306      	movs	r3, #6
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	2200      	movs	r2, #0
 8007c70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fe64 	bl	8006944 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	3318      	adds	r3, #24
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fe5f 	bl	8006944 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8e:	f1c3 0207 	rsb	r2, r3, #7
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	334c      	adds	r3, #76	; 0x4c
 8007cb0:	2260      	movs	r2, #96	; 0x60
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f006 feb3 	bl	800ea20 <memset>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	4a0c      	ldr	r2, [pc, #48]	; (8007cf0 <prvInitialiseNewTask+0x130>)
 8007cbe:	651a      	str	r2, [r3, #80]	; 0x50
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	4a0c      	ldr	r2, [pc, #48]	; (8007cf4 <prvInitialiseNewTask+0x134>)
 8007cc4:	655a      	str	r2, [r3, #84]	; 0x54
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	4a0b      	ldr	r2, [pc, #44]	; (8007cf8 <prvInitialiseNewTask+0x138>)
 8007cca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	69b8      	ldr	r0, [r7, #24]
 8007cd2:	f001 fc87 	bl	80095e4 <pxPortInitialiseStack>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	0800f940 	.word	0x0800f940
 8007cf4:	0800f960 	.word	0x0800f960
 8007cf8:	0800f920 	.word	0x0800f920

08007cfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d04:	f001 fd9e 	bl	8009844 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d08:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <prvAddNewTaskToReadyList+0xb8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	4a29      	ldr	r2, [pc, #164]	; (8007db4 <prvAddNewTaskToReadyList+0xb8>)
 8007d10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d12:	4b29      	ldr	r3, [pc, #164]	; (8007db8 <prvAddNewTaskToReadyList+0xbc>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d1a:	4a27      	ldr	r2, [pc, #156]	; (8007db8 <prvAddNewTaskToReadyList+0xbc>)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d20:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <prvAddNewTaskToReadyList+0xb8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d110      	bne.n	8007d4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d28:	f000 fdac 	bl	8008884 <prvInitialiseTaskLists>
 8007d2c:	e00d      	b.n	8007d4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d2e:	4b23      	ldr	r3, [pc, #140]	; (8007dbc <prvAddNewTaskToReadyList+0xc0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <prvAddNewTaskToReadyList+0xbc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d802      	bhi.n	8007d4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d44:	4a1c      	ldr	r2, [pc, #112]	; (8007db8 <prvAddNewTaskToReadyList+0xbc>)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d4a:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <prvAddNewTaskToReadyList+0xc4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <prvAddNewTaskToReadyList+0xc4>)
 8007d52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	2201      	movs	r2, #1
 8007d5a:	409a      	lsls	r2, r3
 8007d5c:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <prvAddNewTaskToReadyList+0xc8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	4a18      	ldr	r2, [pc, #96]	; (8007dc4 <prvAddNewTaskToReadyList+0xc8>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <prvAddNewTaskToReadyList+0xcc>)
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	f7fe fdee 	bl	800695e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d82:	f001 fd8f 	bl	80098a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d86:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <prvAddNewTaskToReadyList+0xc0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00e      	beq.n	8007dac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvAddNewTaskToReadyList+0xbc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d207      	bcs.n	8007dac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <prvAddNewTaskToReadyList+0xd0>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000914 	.word	0x20000914
 8007db8:	20000814 	.word	0x20000814
 8007dbc:	20000920 	.word	0x20000920
 8007dc0:	20000930 	.word	0x20000930
 8007dc4:	2000091c 	.word	0x2000091c
 8007dc8:	20000818 	.word	0x20000818
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d017      	beq.n	8007e12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007de2:	4b13      	ldr	r3, [pc, #76]	; (8007e30 <vTaskDelay+0x60>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <vTaskDelay+0x30>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	60bb      	str	r3, [r7, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e00:	f000 fa1e 	bl	8008240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 ffba 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e0c:	f000 fa26 	bl	800825c <xTaskResumeAll>
 8007e10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d107      	bne.n	8007e28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e18:	4b06      	ldr	r3, [pc, #24]	; (8007e34 <vTaskDelay+0x64>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e28:	bf00      	nop
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	2000093c 	.word	0x2000093c
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007e40:	f001 fd00 	bl	8009844 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <vTaskSuspend+0x18>
 8007e4a:	4b3c      	ldr	r3, [pc, #240]	; (8007f3c <vTaskSuspend+0x104>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	e000      	b.n	8007e52 <vTaskSuspend+0x1a>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fddd 	bl	8006a18 <uxListRemove>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d115      	bne.n	8007e90 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e68:	4935      	ldr	r1, [pc, #212]	; (8007f40 <vTaskSuspend+0x108>)
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	440b      	add	r3, r1
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <vTaskSuspend+0x58>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	2201      	movs	r2, #1
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	43da      	mvns	r2, r3
 8007e86:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <vTaskSuspend+0x10c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <vTaskSuspend+0x10c>)
 8007e8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3318      	adds	r3, #24
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fe fdbb 	bl	8006a18 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4827      	ldr	r0, [pc, #156]	; (8007f48 <vTaskSuspend+0x110>)
 8007eaa:	f7fe fd58 	bl	800695e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007ec2:	f001 fcef 	bl	80098a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007ec6:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <vTaskSuspend+0x114>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007ece:	f001 fcb9 	bl	8009844 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007ed2:	f000 fd79 	bl	80089c8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007ed6:	f001 fce5 	bl	80098a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007eda:	4b18      	ldr	r3, [pc, #96]	; (8007f3c <vTaskSuspend+0x104>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d127      	bne.n	8007f34 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007ee4:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <vTaskSuspend+0x114>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d017      	beq.n	8007f1c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007eec:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <vTaskSuspend+0x118>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <vTaskSuspend+0xd2>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	60bb      	str	r3, [r7, #8]
}
 8007f06:	bf00      	nop
 8007f08:	e7fe      	b.n	8007f08 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007f0a:	4b12      	ldr	r3, [pc, #72]	; (8007f54 <vTaskSuspend+0x11c>)
 8007f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f1a:	e00b      	b.n	8007f34 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <vTaskSuspend+0x110>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <vTaskSuspend+0x120>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d103      	bne.n	8007f30 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <vTaskSuspend+0x104>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
	}
 8007f2e:	e001      	b.n	8007f34 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007f30:	f000 faf8 	bl	8008524 <vTaskSwitchContext>
	}
 8007f34:	bf00      	nop
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000814 	.word	0x20000814
 8007f40:	20000818 	.word	0x20000818
 8007f44:	2000091c 	.word	0x2000091c
 8007f48:	20000900 	.word	0x20000900
 8007f4c:	20000920 	.word	0x20000920
 8007f50:	2000093c 	.word	0x2000093c
 8007f54:	e000ed04 	.word	0xe000ed04
 8007f58:	20000914 	.word	0x20000914

08007f5c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60fb      	str	r3, [r7, #12]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	4a0a      	ldr	r2, [pc, #40]	; (8007fb8 <prvTaskIsTaskSuspended+0x5c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10a      	bne.n	8007fa8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <prvTaskIsTaskSuspended+0x60>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d005      	beq.n	8007fa8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fa8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007faa:	4618      	mov	r0, r3
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000900 	.word	0x20000900
 8007fbc:	200008d4 	.word	0x200008d4

08007fc0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <vTaskResume+0x28>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	60bb      	str	r3, [r7, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	e7fe      	b.n	8007fe6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <vTaskResume+0xac>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d037      	beq.n	8008062 <vTaskResume+0xa2>
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d034      	beq.n	8008062 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007ff8:	f001 fc24 	bl	8009844 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f7ff ffad 	bl	8007f5c <prvTaskIsTaskSuspended>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d02a      	beq.n	800805e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3304      	adds	r3, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe fd03 	bl	8006a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	2201      	movs	r2, #1
 8008018:	409a      	lsls	r2, r3
 800801a:	4b15      	ldr	r3, [pc, #84]	; (8008070 <vTaskResume+0xb0>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4313      	orrs	r3, r2
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <vTaskResume+0xb0>)
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <vTaskResume+0xb4>)
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe fc8f 	bl	800695e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <vTaskResume+0xac>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	429a      	cmp	r2, r3
 800804c:	d307      	bcc.n	800805e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <vTaskResume+0xb8>)
 8008050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800805e:	f001 fc21 	bl	80098a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000814 	.word	0x20000814
 8008070:	2000091c 	.word	0x2000091c
 8008074:	20000818 	.word	0x20000818
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b08a      	sub	sp, #40	; 0x28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10a      	bne.n	80080a8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	61bb      	str	r3, [r7, #24]
}
 80080a4:	bf00      	nop
 80080a6:	e7fe      	b.n	80080a6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080a8:	f001 fcae 	bl	8009a08 <vPortValidateInterruptPriority>
	__asm volatile
 80080ac:	f3ef 8211 	mrs	r2, BASEPRI
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	617a      	str	r2, [r7, #20]
 80080c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80080c4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080c6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80080c8:	6a38      	ldr	r0, [r7, #32]
 80080ca:	f7ff ff47 	bl	8007f5c <prvTaskIsTaskSuspended>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d02f      	beq.n	8008134 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d4:	4b1d      	ldr	r3, [pc, #116]	; (800814c <xTaskResumeFromISR+0xd0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d125      	bne.n	8008128 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <xTaskResumeFromISR+0xd4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d301      	bcc.n	80080ee <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fc90 	bl	8006a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	2201      	movs	r2, #1
 80080fe:	409a      	lsls	r2, r3
 8008100:	4b14      	ldr	r3, [pc, #80]	; (8008154 <xTaskResumeFromISR+0xd8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4313      	orrs	r3, r2
 8008106:	4a13      	ldr	r2, [pc, #76]	; (8008154 <xTaskResumeFromISR+0xd8>)
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810e:	4613      	mov	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4a10      	ldr	r2, [pc, #64]	; (8008158 <xTaskResumeFromISR+0xdc>)
 8008118:	441a      	add	r2, r3
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	3304      	adds	r3, #4
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f7fe fc1c 	bl	800695e <vListInsertEnd>
 8008126:	e005      	b.n	8008134 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	3318      	adds	r3, #24
 800812c:	4619      	mov	r1, r3
 800812e:	480b      	ldr	r0, [pc, #44]	; (800815c <xTaskResumeFromISR+0xe0>)
 8008130:	f7fe fc15 	bl	800695e <vListInsertEnd>
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f383 8811 	msr	BASEPRI, r3
}
 800813e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008142:	4618      	mov	r0, r3
 8008144:	3728      	adds	r7, #40	; 0x28
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	2000093c 	.word	0x2000093c
 8008150:	20000814 	.word	0x20000814
 8008154:	2000091c 	.word	0x2000091c
 8008158:	20000818 	.word	0x20000818
 800815c:	200008d4 	.word	0x200008d4

08008160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800816e:	463a      	mov	r2, r7
 8008170:	1d39      	adds	r1, r7, #4
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f7f8 f9fe 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	2300      	movs	r3, #0
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	2300      	movs	r3, #0
 800818c:	460a      	mov	r2, r1
 800818e:	4924      	ldr	r1, [pc, #144]	; (8008220 <vTaskStartScheduler+0xc0>)
 8008190:	4824      	ldr	r0, [pc, #144]	; (8008224 <vTaskStartScheduler+0xc4>)
 8008192:	f7ff fc73 	bl	8007a7c <xTaskCreateStatic>
 8008196:	4603      	mov	r3, r0
 8008198:	4a23      	ldr	r2, [pc, #140]	; (8008228 <vTaskStartScheduler+0xc8>)
 800819a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800819c:	4b22      	ldr	r3, [pc, #136]	; (8008228 <vTaskStartScheduler+0xc8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081a4:	2301      	movs	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e001      	b.n	80081ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081b4:	f000 fe4a 	bl	8008e4c <xTimerCreateTimerTask>
 80081b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d11b      	bne.n	80081f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	613b      	str	r3, [r7, #16]
}
 80081d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <vTaskStartScheduler+0xcc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	334c      	adds	r3, #76	; 0x4c
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <vTaskStartScheduler+0xd0>)
 80081dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081de:	4b15      	ldr	r3, [pc, #84]	; (8008234 <vTaskStartScheduler+0xd4>)
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295
 80081e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <vTaskStartScheduler+0xd8>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <vTaskStartScheduler+0xdc>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081f2:	f001 fa85 	bl	8009700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081f6:	e00e      	b.n	8008216 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d10a      	bne.n	8008216 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <vTaskStartScheduler+0xb4>
}
 8008216:	bf00      	nop
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	0800f498 	.word	0x0800f498
 8008224:	08008855 	.word	0x08008855
 8008228:	20000938 	.word	0x20000938
 800822c:	20000814 	.word	0x20000814
 8008230:	20000020 	.word	0x20000020
 8008234:	20000934 	.word	0x20000934
 8008238:	20000920 	.word	0x20000920
 800823c:	20000918 	.word	0x20000918

08008240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <vTaskSuspendAll+0x18>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	4a03      	ldr	r2, [pc, #12]	; (8008258 <vTaskSuspendAll+0x18>)
 800824c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800824e:	bf00      	nop
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	2000093c 	.word	0x2000093c

0800825c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800826a:	4b41      	ldr	r3, [pc, #260]	; (8008370 <xTaskResumeAll+0x114>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <xTaskResumeAll+0x2c>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	603b      	str	r3, [r7, #0]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008288:	f001 fadc 	bl	8009844 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800828c:	4b38      	ldr	r3, [pc, #224]	; (8008370 <xTaskResumeAll+0x114>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	4a37      	ldr	r2, [pc, #220]	; (8008370 <xTaskResumeAll+0x114>)
 8008294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008296:	4b36      	ldr	r3, [pc, #216]	; (8008370 <xTaskResumeAll+0x114>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d161      	bne.n	8008362 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800829e:	4b35      	ldr	r3, [pc, #212]	; (8008374 <xTaskResumeAll+0x118>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d05d      	beq.n	8008362 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a6:	e02e      	b.n	8008306 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a8:	4b33      	ldr	r3, [pc, #204]	; (8008378 <xTaskResumeAll+0x11c>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3318      	adds	r3, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fbaf 	bl	8006a18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3304      	adds	r3, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fbaa 	bl	8006a18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c8:	2201      	movs	r2, #1
 80082ca:	409a      	lsls	r2, r3
 80082cc:	4b2b      	ldr	r3, [pc, #172]	; (800837c <xTaskResumeAll+0x120>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	4a2a      	ldr	r2, [pc, #168]	; (800837c <xTaskResumeAll+0x120>)
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a27      	ldr	r2, [pc, #156]	; (8008380 <xTaskResumeAll+0x124>)
 80082e4:	441a      	add	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7fe fb36 	bl	800695e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f6:	4b23      	ldr	r3, [pc, #140]	; (8008384 <xTaskResumeAll+0x128>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d302      	bcc.n	8008306 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008300:	4b21      	ldr	r3, [pc, #132]	; (8008388 <xTaskResumeAll+0x12c>)
 8008302:	2201      	movs	r2, #1
 8008304:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008306:	4b1c      	ldr	r3, [pc, #112]	; (8008378 <xTaskResumeAll+0x11c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1cc      	bne.n	80082a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008314:	f000 fb58 	bl	80089c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <xTaskResumeAll+0x130>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d010      	beq.n	8008346 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008324:	f000 f846 	bl	80083b4 <xTaskIncrementTick>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <xTaskResumeAll+0x12c>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3b01      	subs	r3, #1
 8008338:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f1      	bne.n	8008324 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <xTaskResumeAll+0x130>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <xTaskResumeAll+0x12c>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800834e:	2301      	movs	r3, #1
 8008350:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTaskResumeAll+0x134>)
 8008354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008362:	f001 fa9f 	bl	80098a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008366:	68bb      	ldr	r3, [r7, #8]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	2000093c 	.word	0x2000093c
 8008374:	20000914 	.word	0x20000914
 8008378:	200008d4 	.word	0x200008d4
 800837c:	2000091c 	.word	0x2000091c
 8008380:	20000818 	.word	0x20000818
 8008384:	20000814 	.word	0x20000814
 8008388:	20000928 	.word	0x20000928
 800838c:	20000924 	.word	0x20000924
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <xTaskGetTickCount+0x1c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083a0:	687b      	ldr	r3, [r7, #4]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000918 	.word	0x20000918

080083b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083be:	4b4e      	ldr	r3, [pc, #312]	; (80084f8 <xTaskIncrementTick+0x144>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f040 808e 	bne.w	80084e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083c8:	4b4c      	ldr	r3, [pc, #304]	; (80084fc <xTaskIncrementTick+0x148>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3301      	adds	r3, #1
 80083ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083d0:	4a4a      	ldr	r2, [pc, #296]	; (80084fc <xTaskIncrementTick+0x148>)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d120      	bne.n	800841e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083dc:	4b48      	ldr	r3, [pc, #288]	; (8008500 <xTaskIncrementTick+0x14c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <xTaskIncrementTick+0x48>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	603b      	str	r3, [r7, #0]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <xTaskIncrementTick+0x46>
 80083fc:	4b40      	ldr	r3, [pc, #256]	; (8008500 <xTaskIncrementTick+0x14c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	4b40      	ldr	r3, [pc, #256]	; (8008504 <xTaskIncrementTick+0x150>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a3e      	ldr	r2, [pc, #248]	; (8008500 <xTaskIncrementTick+0x14c>)
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4a3e      	ldr	r2, [pc, #248]	; (8008504 <xTaskIncrementTick+0x150>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	4b3d      	ldr	r3, [pc, #244]	; (8008508 <xTaskIncrementTick+0x154>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3301      	adds	r3, #1
 8008416:	4a3c      	ldr	r2, [pc, #240]	; (8008508 <xTaskIncrementTick+0x154>)
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	f000 fad5 	bl	80089c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800841e:	4b3b      	ldr	r3, [pc, #236]	; (800850c <xTaskIncrementTick+0x158>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	d348      	bcc.n	80084ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008428:	4b35      	ldr	r3, [pc, #212]	; (8008500 <xTaskIncrementTick+0x14c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008432:	4b36      	ldr	r3, [pc, #216]	; (800850c <xTaskIncrementTick+0x158>)
 8008434:	f04f 32ff 	mov.w	r2, #4294967295
 8008438:	601a      	str	r2, [r3, #0]
					break;
 800843a:	e03e      	b.n	80084ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800843c:	4b30      	ldr	r3, [pc, #192]	; (8008500 <xTaskIncrementTick+0x14c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	429a      	cmp	r2, r3
 8008452:	d203      	bcs.n	800845c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008454:	4a2d      	ldr	r2, [pc, #180]	; (800850c <xTaskIncrementTick+0x158>)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800845a:	e02e      	b.n	80084ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3304      	adds	r3, #4
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe fad9 	bl	8006a18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846a:	2b00      	cmp	r3, #0
 800846c:	d004      	beq.n	8008478 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	3318      	adds	r3, #24
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fad0 	bl	8006a18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	2201      	movs	r2, #1
 800847e:	409a      	lsls	r2, r3
 8008480:	4b23      	ldr	r3, [pc, #140]	; (8008510 <xTaskIncrementTick+0x15c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4313      	orrs	r3, r2
 8008486:	4a22      	ldr	r2, [pc, #136]	; (8008510 <xTaskIncrementTick+0x15c>)
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4a1f      	ldr	r2, [pc, #124]	; (8008514 <xTaskIncrementTick+0x160>)
 8008498:	441a      	add	r2, r3
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3304      	adds	r3, #4
 800849e:	4619      	mov	r1, r3
 80084a0:	4610      	mov	r0, r2
 80084a2:	f7fe fa5c 	bl	800695e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <xTaskIncrementTick+0x164>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d3b9      	bcc.n	8008428 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084b4:	2301      	movs	r3, #1
 80084b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084b8:	e7b6      	b.n	8008428 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084ba:	4b17      	ldr	r3, [pc, #92]	; (8008518 <xTaskIncrementTick+0x164>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	4914      	ldr	r1, [pc, #80]	; (8008514 <xTaskIncrementTick+0x160>)
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	440b      	add	r3, r1
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d901      	bls.n	80084d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <xTaskIncrementTick+0x168>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80084de:	2301      	movs	r3, #1
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e004      	b.n	80084ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <xTaskIncrementTick+0x16c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3301      	adds	r3, #1
 80084ea:	4a0d      	ldr	r2, [pc, #52]	; (8008520 <xTaskIncrementTick+0x16c>)
 80084ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084ee:	697b      	ldr	r3, [r7, #20]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	2000093c 	.word	0x2000093c
 80084fc:	20000918 	.word	0x20000918
 8008500:	200008cc 	.word	0x200008cc
 8008504:	200008d0 	.word	0x200008d0
 8008508:	2000092c 	.word	0x2000092c
 800850c:	20000934 	.word	0x20000934
 8008510:	2000091c 	.word	0x2000091c
 8008514:	20000818 	.word	0x20000818
 8008518:	20000814 	.word	0x20000814
 800851c:	20000928 	.word	0x20000928
 8008520:	20000924 	.word	0x20000924

08008524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800852a:	4b29      	ldr	r3, [pc, #164]	; (80085d0 <vTaskSwitchContext+0xac>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008532:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <vTaskSwitchContext+0xb0>)
 8008534:	2201      	movs	r2, #1
 8008536:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008538:	e044      	b.n	80085c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800853a:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <vTaskSwitchContext+0xb0>)
 800853c:	2200      	movs	r2, #0
 800853e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008540:	4b25      	ldr	r3, [pc, #148]	; (80085d8 <vTaskSwitchContext+0xb4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	fab3 f383 	clz	r3, r3
 800854c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800854e:	7afb      	ldrb	r3, [r7, #11]
 8008550:	f1c3 031f 	rsb	r3, r3, #31
 8008554:	617b      	str	r3, [r7, #20]
 8008556:	4921      	ldr	r1, [pc, #132]	; (80085dc <vTaskSwitchContext+0xb8>)
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	440b      	add	r3, r1
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <vTaskSwitchContext+0x5c>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vTaskSwitchContext+0x5a>
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4a14      	ldr	r2, [pc, #80]	; (80085dc <vTaskSwitchContext+0xb8>)
 800858c:	4413      	add	r3, r2
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	605a      	str	r2, [r3, #4]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3308      	adds	r3, #8
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d104      	bne.n	80085b0 <vTaskSwitchContext+0x8c>
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	605a      	str	r2, [r3, #4]
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <vTaskSwitchContext+0xbc>)
 80085b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085ba:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <vTaskSwitchContext+0xbc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	334c      	adds	r3, #76	; 0x4c
 80085c0:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <vTaskSwitchContext+0xc0>)
 80085c2:	6013      	str	r3, [r2, #0]
}
 80085c4:	bf00      	nop
 80085c6:	371c      	adds	r7, #28
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	2000093c 	.word	0x2000093c
 80085d4:	20000928 	.word	0x20000928
 80085d8:	2000091c 	.word	0x2000091c
 80085dc:	20000818 	.word	0x20000818
 80085e0:	20000814 	.word	0x20000814
 80085e4:	20000020 	.word	0x20000020

080085e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800860e:	4b07      	ldr	r3, [pc, #28]	; (800862c <vTaskPlaceOnEventList+0x44>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3318      	adds	r3, #24
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fe f9c5 	bl	80069a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800861c:	2101      	movs	r1, #1
 800861e:	6838      	ldr	r0, [r7, #0]
 8008620:	f000 fbae 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20000814 	.word	0x20000814

08008630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	617b      	str	r3, [r7, #20]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <vTaskPlaceOnEventListRestricted+0x54>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3318      	adds	r3, #24
 800865e:	4619      	mov	r1, r3
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7fe f97c 	bl	800695e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800866c:	f04f 33ff 	mov.w	r3, #4294967295
 8008670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	68b8      	ldr	r0, [r7, #8]
 8008676:	f000 fb83 	bl	8008d80 <prvAddCurrentTaskToDelayedList>
	}
 800867a:	bf00      	nop
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000814 	.word	0x20000814

08008688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60fb      	str	r3, [r7, #12]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	3318      	adds	r3, #24
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe f9ad 	bl	8006a18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086be:	4b1d      	ldr	r3, [pc, #116]	; (8008734 <xTaskRemoveFromEventList+0xac>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d11c      	bne.n	8008700 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fe f9a4 	bl	8006a18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	2201      	movs	r2, #1
 80086d6:	409a      	lsls	r2, r3
 80086d8:	4b17      	ldr	r3, [pc, #92]	; (8008738 <xTaskRemoveFromEventList+0xb0>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4313      	orrs	r3, r2
 80086de:	4a16      	ldr	r2, [pc, #88]	; (8008738 <xTaskRemoveFromEventList+0xb0>)
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4a13      	ldr	r2, [pc, #76]	; (800873c <xTaskRemoveFromEventList+0xb4>)
 80086f0:	441a      	add	r2, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f7fe f930 	bl	800695e <vListInsertEnd>
 80086fe:	e005      	b.n	800870c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3318      	adds	r3, #24
 8008704:	4619      	mov	r1, r3
 8008706:	480e      	ldr	r0, [pc, #56]	; (8008740 <xTaskRemoveFromEventList+0xb8>)
 8008708:	f7fe f929 	bl	800695e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <xTaskRemoveFromEventList+0xbc>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008716:	429a      	cmp	r2, r3
 8008718:	d905      	bls.n	8008726 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800871a:	2301      	movs	r3, #1
 800871c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800871e:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <xTaskRemoveFromEventList+0xc0>)
 8008720:	2201      	movs	r2, #1
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e001      	b.n	800872a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800872a:	697b      	ldr	r3, [r7, #20]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	2000093c 	.word	0x2000093c
 8008738:	2000091c 	.word	0x2000091c
 800873c:	20000818 	.word	0x20000818
 8008740:	200008d4 	.word	0x200008d4
 8008744:	20000814 	.word	0x20000814
 8008748:	20000928 	.word	0x20000928

0800874c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <vTaskInternalSetTimeOutState+0x24>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800875c:	4b05      	ldr	r3, [pc, #20]	; (8008774 <vTaskInternalSetTimeOutState+0x28>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	605a      	str	r2, [r3, #4]
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	2000092c 	.word	0x2000092c
 8008774:	20000918 	.word	0x20000918

08008778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10a      	bne.n	800879e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
}
 800879a:	bf00      	nop
 800879c:	e7fe      	b.n	800879c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	60fb      	str	r3, [r7, #12]
}
 80087b6:	bf00      	nop
 80087b8:	e7fe      	b.n	80087b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ba:	f001 f843 	bl	8009844 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087be:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <xTaskCheckForTimeOut+0xbc>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d102      	bne.n	80087de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	e023      	b.n	8008826 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	4b15      	ldr	r3, [pc, #84]	; (8008838 <xTaskCheckForTimeOut+0xc0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d007      	beq.n	80087fa <xTaskCheckForTimeOut+0x82>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d302      	bcc.n	80087fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	e015      	b.n	8008826 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	429a      	cmp	r2, r3
 8008802:	d20b      	bcs.n	800881c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff9b 	bl	800874c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
 800881a:	e004      	b.n	8008826 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008822:	2301      	movs	r3, #1
 8008824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008826:	f001 f83d 	bl	80098a4 <vPortExitCritical>

	return xReturn;
 800882a:	69fb      	ldr	r3, [r7, #28]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000918 	.word	0x20000918
 8008838:	2000092c 	.word	0x2000092c

0800883c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008840:	4b03      	ldr	r3, [pc, #12]	; (8008850 <vTaskMissedYield+0x14>)
 8008842:	2201      	movs	r2, #1
 8008844:	601a      	str	r2, [r3, #0]
}
 8008846:	bf00      	nop
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	20000928 	.word	0x20000928

08008854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800885c:	f000 f852 	bl	8008904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <prvIdleTask+0x28>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d9f9      	bls.n	800885c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <prvIdleTask+0x2c>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008878:	e7f0      	b.n	800885c <prvIdleTask+0x8>
 800887a:	bf00      	nop
 800887c:	20000818 	.word	0x20000818
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800888a:	2300      	movs	r3, #0
 800888c:	607b      	str	r3, [r7, #4]
 800888e:	e00c      	b.n	80088aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a12      	ldr	r2, [pc, #72]	; (80088e4 <prvInitialiseTaskLists+0x60>)
 800889c:	4413      	add	r3, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe f830 	bl	8006904 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3301      	adds	r3, #1
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	d9ef      	bls.n	8008890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088b0:	480d      	ldr	r0, [pc, #52]	; (80088e8 <prvInitialiseTaskLists+0x64>)
 80088b2:	f7fe f827 	bl	8006904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088b6:	480d      	ldr	r0, [pc, #52]	; (80088ec <prvInitialiseTaskLists+0x68>)
 80088b8:	f7fe f824 	bl	8006904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088bc:	480c      	ldr	r0, [pc, #48]	; (80088f0 <prvInitialiseTaskLists+0x6c>)
 80088be:	f7fe f821 	bl	8006904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088c2:	480c      	ldr	r0, [pc, #48]	; (80088f4 <prvInitialiseTaskLists+0x70>)
 80088c4:	f7fe f81e 	bl	8006904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088c8:	480b      	ldr	r0, [pc, #44]	; (80088f8 <prvInitialiseTaskLists+0x74>)
 80088ca:	f7fe f81b 	bl	8006904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088ce:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <prvInitialiseTaskLists+0x78>)
 80088d0:	4a05      	ldr	r2, [pc, #20]	; (80088e8 <prvInitialiseTaskLists+0x64>)
 80088d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088d4:	4b0a      	ldr	r3, [pc, #40]	; (8008900 <prvInitialiseTaskLists+0x7c>)
 80088d6:	4a05      	ldr	r2, [pc, #20]	; (80088ec <prvInitialiseTaskLists+0x68>)
 80088d8:	601a      	str	r2, [r3, #0]
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000818 	.word	0x20000818
 80088e8:	200008a4 	.word	0x200008a4
 80088ec:	200008b8 	.word	0x200008b8
 80088f0:	200008d4 	.word	0x200008d4
 80088f4:	200008e8 	.word	0x200008e8
 80088f8:	20000900 	.word	0x20000900
 80088fc:	200008cc 	.word	0x200008cc
 8008900:	200008d0 	.word	0x200008d0

08008904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800890a:	e019      	b.n	8008940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800890c:	f000 ff9a 	bl	8009844 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008910:	4b10      	ldr	r3, [pc, #64]	; (8008954 <prvCheckTasksWaitingTermination+0x50>)
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe f87b 	bl	8006a18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008922:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <prvCheckTasksWaitingTermination+0x54>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3b01      	subs	r3, #1
 8008928:	4a0b      	ldr	r2, [pc, #44]	; (8008958 <prvCheckTasksWaitingTermination+0x54>)
 800892a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800892c:	4b0b      	ldr	r3, [pc, #44]	; (800895c <prvCheckTasksWaitingTermination+0x58>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3b01      	subs	r3, #1
 8008932:	4a0a      	ldr	r2, [pc, #40]	; (800895c <prvCheckTasksWaitingTermination+0x58>)
 8008934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008936:	f000 ffb5 	bl	80098a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f810 	bl	8008960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008940:	4b06      	ldr	r3, [pc, #24]	; (800895c <prvCheckTasksWaitingTermination+0x58>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e1      	bne.n	800890c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200008e8 	.word	0x200008e8
 8008958:	20000914 	.word	0x20000914
 800895c:	200008fc 	.word	0x200008fc

08008960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	334c      	adds	r3, #76	; 0x4c
 800896c:	4618      	mov	r0, r3
 800896e:	f006 f8c7 	bl	800eb00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d108      	bne.n	800898e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	4618      	mov	r0, r3
 8008982:	f001 f94d 	bl	8009c20 <vPortFree>
				vPortFree( pxTCB );
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f94a 	bl	8009c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800898c:	e018      	b.n	80089c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008994:	2b01      	cmp	r3, #1
 8008996:	d103      	bne.n	80089a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 f941 	bl	8009c20 <vPortFree>
	}
 800899e:	e00f      	b.n	80089c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d00a      	beq.n	80089c0 <prvDeleteTCB+0x60>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <prvDeleteTCB+0x5e>
	}
 80089c0:	bf00      	nop
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <prvResetNextTaskUnblockTime+0x38>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <prvResetNextTaskUnblockTime+0x3c>)
 80089da:	f04f 32ff 	mov.w	r2, #4294967295
 80089de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089e0:	e008      	b.n	80089f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e2:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <prvResetNextTaskUnblockTime+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a04      	ldr	r2, [pc, #16]	; (8008a04 <prvResetNextTaskUnblockTime+0x3c>)
 80089f2:	6013      	str	r3, [r2, #0]
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	200008cc 	.word	0x200008cc
 8008a04:	20000934 	.word	0x20000934

08008a08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a0e:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <xTaskGetSchedulerState+0x34>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a16:	2301      	movs	r3, #1
 8008a18:	607b      	str	r3, [r7, #4]
 8008a1a:	e008      	b.n	8008a2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1c:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <xTaskGetSchedulerState+0x38>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d102      	bne.n	8008a2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a24:	2302      	movs	r3, #2
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	e001      	b.n	8008a2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a2e:	687b      	ldr	r3, [r7, #4]
	}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20000920 	.word	0x20000920
 8008a40:	2000093c 	.word	0x2000093c

08008a44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d05e      	beq.n	8008b18 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5e:	4b31      	ldr	r3, [pc, #196]	; (8008b24 <xTaskPriorityInherit+0xe0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d24e      	bcs.n	8008b06 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	db06      	blt.n	8008a7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a70:	4b2c      	ldr	r3, [pc, #176]	; (8008b24 <xTaskPriorityInherit+0xe0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	f1c3 0207 	rsb	r2, r3, #7
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	6959      	ldr	r1, [r3, #20]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	4613      	mov	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4a26      	ldr	r2, [pc, #152]	; (8008b28 <xTaskPriorityInherit+0xe4>)
 8008a90:	4413      	add	r3, r2
 8008a92:	4299      	cmp	r1, r3
 8008a94:	d12f      	bne.n	8008af6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fd ffbc 	bl	8006a18 <uxListRemove>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	2201      	movs	r2, #1
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	43da      	mvns	r2, r3
 8008ab2:	4b1e      	ldr	r3, [pc, #120]	; (8008b2c <xTaskPriorityInherit+0xe8>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	4a1c      	ldr	r2, [pc, #112]	; (8008b2c <xTaskPriorityInherit+0xe8>)
 8008aba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008abc:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <xTaskPriorityInherit+0xe0>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	2201      	movs	r2, #1
 8008acc:	409a      	lsls	r2, r3
 8008ace:	4b17      	ldr	r3, [pc, #92]	; (8008b2c <xTaskPriorityInherit+0xe8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	4a15      	ldr	r2, [pc, #84]	; (8008b2c <xTaskPriorityInherit+0xe8>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a10      	ldr	r2, [pc, #64]	; (8008b28 <xTaskPriorityInherit+0xe4>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fd ff35 	bl	800695e <vListInsertEnd>
 8008af4:	e004      	b.n	8008b00 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <xTaskPriorityInherit+0xe0>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e008      	b.n	8008b18 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b0a:	4b06      	ldr	r3, [pc, #24]	; (8008b24 <xTaskPriorityInherit+0xe0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d201      	bcs.n	8008b18 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b18:	68fb      	ldr	r3, [r7, #12]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000814 	.word	0x20000814
 8008b28:	20000818 	.word	0x20000818
 8008b2c:	2000091c 	.word	0x2000091c

08008b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d06e      	beq.n	8008c24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b46:	4b3a      	ldr	r3, [pc, #232]	; (8008c30 <xTaskPriorityDisinherit+0x100>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d00a      	beq.n	8008b66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10a      	bne.n	8008b84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60bb      	str	r3, [r7, #8]
}
 8008b80:	bf00      	nop
 8008b82:	e7fe      	b.n	8008b82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b88:	1e5a      	subs	r2, r3, #1
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d044      	beq.n	8008c24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d140      	bne.n	8008c24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fd ff36 	bl	8006a18 <uxListRemove>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d115      	bne.n	8008bde <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb6:	491f      	ldr	r1, [pc, #124]	; (8008c34 <xTaskPriorityDisinherit+0x104>)
 8008bb8:	4613      	mov	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10a      	bne.n	8008bde <xTaskPriorityDisinherit+0xae>
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	2201      	movs	r2, #1
 8008bce:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd2:	43da      	mvns	r2, r3
 8008bd4:	4b18      	ldr	r3, [pc, #96]	; (8008c38 <xTaskPriorityDisinherit+0x108>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	4a17      	ldr	r2, [pc, #92]	; (8008c38 <xTaskPriorityDisinherit+0x108>)
 8008bdc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	f1c3 0207 	rsb	r2, r3, #7
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	4b0f      	ldr	r3, [pc, #60]	; (8008c38 <xTaskPriorityDisinherit+0x108>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	4a0d      	ldr	r2, [pc, #52]	; (8008c38 <xTaskPriorityDisinherit+0x108>)
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <xTaskPriorityDisinherit+0x104>)
 8008c12:	441a      	add	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7fd fe9f 	bl	800695e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c20:	2301      	movs	r3, #1
 8008c22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c24:	697b      	ldr	r3, [r7, #20]
	}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000814 	.word	0x20000814
 8008c34:	20000818 	.word	0x20000818
 8008c38:	2000091c 	.word	0x2000091c

08008c3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d077      	beq.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	60fb      	str	r3, [r7, #12]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d902      	bls.n	8008c82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	61fb      	str	r3, [r7, #28]
 8008c80:	e002      	b.n	8008c88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d058      	beq.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d153      	bne.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c9c:	4b2b      	ldr	r3, [pc, #172]	; (8008d4c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d10a      	bne.n	8008cbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	60bb      	str	r3, [r7, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	699b      	ldr	r3, [r3, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	db04      	blt.n	8008cda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f1c3 0207 	rsb	r2, r3, #7
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	6959      	ldr	r1, [r3, #20]
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4a19      	ldr	r2, [pc, #100]	; (8008d50 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008cea:	4413      	add	r3, r2
 8008cec:	4299      	cmp	r1, r3
 8008cee:	d129      	bne.n	8008d44 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fd fe8f 	bl	8006a18 <uxListRemove>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	2201      	movs	r2, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4013      	ands	r3, r2
 8008d12:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d14:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	409a      	lsls	r2, r3
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	4a0b      	ldr	r2, [pc, #44]	; (8008d54 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4a06      	ldr	r2, [pc, #24]	; (8008d50 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008d36:	441a      	add	r2, r3
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	4610      	mov	r0, r2
 8008d40:	f7fd fe0d 	bl	800695e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d44:	bf00      	nop
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000814 	.word	0x20000814
 8008d50:	20000818 	.word	0x20000818
 8008d54:	2000091c 	.word	0x2000091c

08008d58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d6a:	3201      	adds	r2, #1
 8008d6c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d6e:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d70:	681b      	ldr	r3, [r3, #0]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20000814 	.word	0x20000814

08008d80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d8a:	4b29      	ldr	r3, [pc, #164]	; (8008e30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3304      	adds	r3, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fd fe3e 	bl	8006a18 <uxListRemove>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10b      	bne.n	8008dba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008da2:	4b24      	ldr	r3, [pc, #144]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	2201      	movs	r2, #1
 8008daa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dae:	43da      	mvns	r2, r3
 8008db0:	4b21      	ldr	r3, [pc, #132]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4013      	ands	r3, r2
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008db8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d10a      	bne.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x58>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc8:	4b1a      	ldr	r3, [pc, #104]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	481a      	ldr	r0, [pc, #104]	; (8008e3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dd2:	f7fd fdc4 	bl	800695e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dd6:	e026      	b.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4413      	add	r3, r2
 8008dde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008de0:	4b14      	ldr	r3, [pc, #80]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d209      	bcs.n	8008e04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df0:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7fd fdd2 	bl	80069a6 <vListInsert>
}
 8008e02:	e010      	b.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b0a      	ldr	r3, [pc, #40]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fd fdc8 	bl	80069a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e16:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d202      	bcs.n	8008e26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e20:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6013      	str	r3, [r2, #0]
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000918 	.word	0x20000918
 8008e34:	20000814 	.word	0x20000814
 8008e38:	2000091c 	.word	0x2000091c
 8008e3c:	20000900 	.word	0x20000900
 8008e40:	200008d0 	.word	0x200008d0
 8008e44:	200008cc 	.word	0x200008cc
 8008e48:	20000934 	.word	0x20000934

08008e4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08a      	sub	sp, #40	; 0x28
 8008e50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e56:	f000 fb85 	bl	8009564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e5a:	4b1c      	ldr	r3, [pc, #112]	; (8008ecc <xTimerCreateTimerTask+0x80>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d021      	beq.n	8008ea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e6a:	1d3a      	adds	r2, r7, #4
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	f107 030c 	add.w	r3, r7, #12
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7f7 fb99 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	9202      	str	r2, [sp, #8]
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	2305      	movs	r3, #5
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	460a      	mov	r2, r1
 8008e8c:	4910      	ldr	r1, [pc, #64]	; (8008ed0 <xTimerCreateTimerTask+0x84>)
 8008e8e:	4811      	ldr	r0, [pc, #68]	; (8008ed4 <xTimerCreateTimerTask+0x88>)
 8008e90:	f7fe fdf4 	bl	8007a7c <xTaskCreateStatic>
 8008e94:	4603      	mov	r3, r0
 8008e96:	4a10      	ldr	r2, [pc, #64]	; (8008ed8 <xTimerCreateTimerTask+0x8c>)
 8008e98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <xTimerCreateTimerTask+0x8c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10a      	bne.n	8008ec2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	613b      	str	r3, [r7, #16]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ec2:	697b      	ldr	r3, [r7, #20]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000970 	.word	0x20000970
 8008ed0:	0800f4a0 	.word	0x0800f4a0
 8008ed4:	08009145 	.word	0x08009145
 8008ed8:	20000974 	.word	0x20000974

08008edc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af02      	add	r7, sp, #8
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
 8008ee8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008eea:	2028      	movs	r0, #40	; 0x28
 8008eec:	f000 fdcc 	bl	8009a88 <pvPortMalloc>
 8008ef0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	68b9      	ldr	r1, [r7, #8]
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f843 	bl	8008f9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008f14:	697b      	ldr	r3, [r7, #20]
	}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b08a      	sub	sp, #40	; 0x28
 8008f22:	af02      	add	r7, sp, #8
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008f2c:	2328      	movs	r3, #40	; 0x28
 8008f2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2b28      	cmp	r3, #40	; 0x28
 8008f34:	d00a      	beq.n	8008f4c <xTimerCreateStatic+0x2e>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	61bb      	str	r3, [r7, #24]
}
 8008f48:	bf00      	nop
 8008f4a:	e7fe      	b.n	8008f4a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <xTimerCreateStatic+0x4c>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	f383 8811 	msr	BASEPRI, r3
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	617b      	str	r3, [r7, #20]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00d      	beq.n	8008f90 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f805 	bl	8008f9a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008f90:	69fb      	ldr	r3, [r7, #28]
	}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3720      	adds	r7, #32
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b086      	sub	sp, #24
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	607a      	str	r2, [r7, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	617b      	str	r3, [r7, #20]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01e      	beq.n	8009008 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008fca:	f000 facb 	bl	8009564 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	6a3a      	ldr	r2, [r7, #32]
 8008fe4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fd fcaa 	bl	8006944 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ffc:	f043 0304 	orr.w	r3, r3, #4
 8009000:	b2da      	uxtb	r2, r3
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009008:	bf00      	nop
 800900a:	3718      	adds	r7, #24
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800901e:	2300      	movs	r3, #0
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	623b      	str	r3, [r7, #32]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800903e:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <xTimerGenericCommand+0x98>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d02a      	beq.n	800909c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b05      	cmp	r3, #5
 8009056:	dc18      	bgt.n	800908a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009058:	f7ff fcd6 	bl	8008a08 <xTaskGetSchedulerState>
 800905c:	4603      	mov	r3, r0
 800905e:	2b02      	cmp	r3, #2
 8009060:	d109      	bne.n	8009076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <xTimerGenericCommand+0x98>)
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f107 0114 	add.w	r1, r7, #20
 800906a:	2300      	movs	r3, #0
 800906c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906e:	f7fd feed 	bl	8006e4c <xQueueGenericSend>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24
 8009074:	e012      	b.n	800909c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <xTimerGenericCommand+0x98>)
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f107 0114 	add.w	r1, r7, #20
 800907e:	2300      	movs	r3, #0
 8009080:	2200      	movs	r2, #0
 8009082:	f7fd fee3 	bl	8006e4c <xQueueGenericSend>
 8009086:	6278      	str	r0, [r7, #36]	; 0x24
 8009088:	e008      	b.n	800909c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <xTimerGenericCommand+0x98>)
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f107 0114 	add.w	r1, r7, #20
 8009092:	2300      	movs	r3, #0
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	f7fd ffd7 	bl	8007048 <xQueueGenericSendFromISR>
 800909a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3728      	adds	r7, #40	; 0x28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000970 	.word	0x20000970

080090ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090b6:	4b22      	ldr	r3, [pc, #136]	; (8009140 <prvProcessExpiredTimer+0x94>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fd fca7 	bl	8006a18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d022      	beq.n	800911e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	699a      	ldr	r2, [r3, #24]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	18d1      	adds	r1, r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	6978      	ldr	r0, [r7, #20]
 80090e6:	f000 f8d1 	bl	800928c <prvInsertTimerInActiveList>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d01f      	beq.n	8009130 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090f0:	2300      	movs	r3, #0
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	2300      	movs	r3, #0
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	2100      	movs	r1, #0
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	f7ff ff88 	bl	8009010 <xTimerGenericCommand>
 8009100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d113      	bne.n	8009130 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	60fb      	str	r3, [r7, #12]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	6978      	ldr	r0, [r7, #20]
 8009136:	4798      	blx	r3
}
 8009138:	bf00      	nop
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000968 	.word	0x20000968

08009144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4618      	mov	r0, r3
 8009152:	f000 f857 	bl	8009204 <prvGetNextExpireTime>
 8009156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	4619      	mov	r1, r3
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 f803 	bl	8009168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009162:	f000 f8d5 	bl	8009310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009166:	e7f1      	b.n	800914c <prvTimerTask+0x8>

08009168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009172:	f7ff f865 	bl	8008240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009176:	f107 0308 	add.w	r3, r7, #8
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f866 	bl	800924c <prvSampleTimeNow>
 8009180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d130      	bne.n	80091ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <prvProcessTimerOrBlockTask+0x3c>
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	429a      	cmp	r2, r3
 8009194:	d806      	bhi.n	80091a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009196:	f7ff f861 	bl	800825c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ff85 	bl	80090ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091a2:	e024      	b.n	80091ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091aa:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <prvProcessTimerOrBlockTask+0x90>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <prvProcessTimerOrBlockTask+0x50>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <prvProcessTimerOrBlockTask+0x52>
 80091b8:	2300      	movs	r3, #0
 80091ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091bc:	4b0f      	ldr	r3, [pc, #60]	; (80091fc <prvProcessTimerOrBlockTask+0x94>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f7fe fc23 	bl	8007a14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091ce:	f7ff f845 	bl	800825c <xTaskResumeAll>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091d8:	4b09      	ldr	r3, [pc, #36]	; (8009200 <prvProcessTimerOrBlockTask+0x98>)
 80091da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	f3bf 8f6f 	isb	sy
}
 80091e8:	e001      	b.n	80091ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ea:	f7ff f837 	bl	800825c <xTaskResumeAll>
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	2000096c 	.word	0x2000096c
 80091fc:	20000970 	.word	0x20000970
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800920c:	4b0e      	ldr	r3, [pc, #56]	; (8009248 <prvGetNextExpireTime+0x44>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <prvGetNextExpireTime+0x16>
 8009216:	2201      	movs	r2, #1
 8009218:	e000      	b.n	800921c <prvGetNextExpireTime+0x18>
 800921a:	2200      	movs	r2, #0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d105      	bne.n	8009234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <prvGetNextExpireTime+0x44>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e001      	b.n	8009238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009238:	68fb      	ldr	r3, [r7, #12]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000968 	.word	0x20000968

0800924c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009254:	f7ff f89e 	bl	8008394 <xTaskGetTickCount>
 8009258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <prvSampleTimeNow+0x3c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	429a      	cmp	r2, r3
 8009262:	d205      	bcs.n	8009270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009264:	f000 f91a 	bl	800949c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e002      	b.n	8009276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009276:	4a04      	ldr	r2, [pc, #16]	; (8009288 <prvSampleTimeNow+0x3c>)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800927c:	68fb      	ldr	r3, [r7, #12]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000978 	.word	0x20000978

0800928c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d812      	bhi.n	80092d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e01b      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <prvInsertTimerInActiveList+0x7c>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7fd fb68 	bl	80069a6 <vListInsert>
 80092d6:	e012      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d206      	bcs.n	80092ee <prvInsertTimerInActiveList+0x62>
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e007      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <prvInsertTimerInActiveList+0x80>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fd fb54 	bl	80069a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092fe:	697b      	ldr	r3, [r7, #20]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	2000096c 	.word	0x2000096c
 800930c:	20000968 	.word	0x20000968

08009310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08c      	sub	sp, #48	; 0x30
 8009314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009316:	e0ae      	b.n	8009476 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	f2c0 80aa 	blt.w	8009474 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7fd fb71 	bl	8006a18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009336:	1d3b      	adds	r3, r7, #4
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff ff87 	bl	800924c <prvSampleTimeNow>
 800933e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b09      	cmp	r3, #9
 8009344:	f200 8097 	bhi.w	8009476 <prvProcessReceivedCommands+0x166>
 8009348:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <prvProcessReceivedCommands+0x40>)
 800934a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800934e:	bf00      	nop
 8009350:	08009379 	.word	0x08009379
 8009354:	08009379 	.word	0x08009379
 8009358:	08009379 	.word	0x08009379
 800935c:	080093ed 	.word	0x080093ed
 8009360:	08009401 	.word	0x08009401
 8009364:	0800944b 	.word	0x0800944b
 8009368:	08009379 	.word	0x08009379
 800936c:	08009379 	.word	0x08009379
 8009370:	080093ed 	.word	0x080093ed
 8009374:	08009401 	.word	0x08009401
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800937e:	f043 0301 	orr.w	r3, r3, #1
 8009382:	b2da      	uxtb	r2, r3
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	18d1      	adds	r1, r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a3a      	ldr	r2, [r7, #32]
 8009396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009398:	f7ff ff78 	bl	800928c <prvInsertTimerInActiveList>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d069      	beq.n	8009476 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d05e      	beq.n	8009476 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	441a      	add	r2, r3
 80093c0:	2300      	movs	r3, #0
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	2300      	movs	r3, #0
 80093c6:	2100      	movs	r1, #0
 80093c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093ca:	f7ff fe21 	bl	8009010 <xTimerGenericCommand>
 80093ce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d14f      	bne.n	8009476 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	61bb      	str	r3, [r7, #24]
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093f2:	f023 0301 	bic.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80093fe:	e03a      	b.n	8009476 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	b2da      	uxtb	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10a      	bne.n	8009436 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	617b      	str	r3, [r7, #20]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	699a      	ldr	r2, [r3, #24]
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	18d1      	adds	r1, r2, r3
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009444:	f7ff ff22 	bl	800928c <prvInsertTimerInActiveList>
					break;
 8009448:	e015      	b.n	8009476 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800945a:	f000 fbe1 	bl	8009c20 <vPortFree>
 800945e:	e00a      	b.n	8009476 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009472:	e000      	b.n	8009476 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009476:	4b08      	ldr	r3, [pc, #32]	; (8009498 <prvProcessReceivedCommands+0x188>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f107 0108 	add.w	r1, r7, #8
 800947e:	2200      	movs	r2, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f7fd ff09 	bl	8007298 <xQueueReceive>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	f47f af45 	bne.w	8009318 <prvProcessReceivedCommands+0x8>
	}
}
 800948e:	bf00      	nop
 8009490:	bf00      	nop
 8009492:	3728      	adds	r7, #40	; 0x28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20000970 	.word	0x20000970

0800949c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094a2:	e048      	b.n	8009536 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094a4:	4b2d      	ldr	r3, [pc, #180]	; (800955c <prvSwitchTimerLists+0xc0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ae:	4b2b      	ldr	r3, [pc, #172]	; (800955c <prvSwitchTimerLists+0xc0>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fd faab 	bl	8006a18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d02e      	beq.n	8009536 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	693a      	ldr	r2, [r7, #16]
 80094de:	4413      	add	r3, r2
 80094e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d90e      	bls.n	8009508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094f6:	4b19      	ldr	r3, [pc, #100]	; (800955c <prvSwitchTimerLists+0xc0>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f7fd fa50 	bl	80069a6 <vListInsert>
 8009506:	e016      	b.n	8009536 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009508:	2300      	movs	r3, #0
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	2100      	movs	r1, #0
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f7ff fd7c 	bl	8009010 <xTimerGenericCommand>
 8009518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10a      	bne.n	8009536 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	603b      	str	r3, [r7, #0]
}
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009536:	4b09      	ldr	r3, [pc, #36]	; (800955c <prvSwitchTimerLists+0xc0>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1b1      	bne.n	80094a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009540:	4b06      	ldr	r3, [pc, #24]	; (800955c <prvSwitchTimerLists+0xc0>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <prvSwitchTimerLists+0xc4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a04      	ldr	r2, [pc, #16]	; (800955c <prvSwitchTimerLists+0xc0>)
 800954c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800954e:	4a04      	ldr	r2, [pc, #16]	; (8009560 <prvSwitchTimerLists+0xc4>)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	6013      	str	r3, [r2, #0]
}
 8009554:	bf00      	nop
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000968 	.word	0x20000968
 8009560:	2000096c 	.word	0x2000096c

08009564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800956a:	f000 f96b 	bl	8009844 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800956e:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <prvCheckForValidListAndQueue+0x60>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d120      	bne.n	80095b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009576:	4814      	ldr	r0, [pc, #80]	; (80095c8 <prvCheckForValidListAndQueue+0x64>)
 8009578:	f7fd f9c4 	bl	8006904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800957c:	4813      	ldr	r0, [pc, #76]	; (80095cc <prvCheckForValidListAndQueue+0x68>)
 800957e:	f7fd f9c1 	bl	8006904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009582:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <prvCheckForValidListAndQueue+0x6c>)
 8009584:	4a10      	ldr	r2, [pc, #64]	; (80095c8 <prvCheckForValidListAndQueue+0x64>)
 8009586:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009588:	4b12      	ldr	r3, [pc, #72]	; (80095d4 <prvCheckForValidListAndQueue+0x70>)
 800958a:	4a10      	ldr	r2, [pc, #64]	; (80095cc <prvCheckForValidListAndQueue+0x68>)
 800958c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800958e:	2300      	movs	r3, #0
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <prvCheckForValidListAndQueue+0x74>)
 8009594:	4a11      	ldr	r2, [pc, #68]	; (80095dc <prvCheckForValidListAndQueue+0x78>)
 8009596:	210c      	movs	r1, #12
 8009598:	200a      	movs	r0, #10
 800959a:	f7fd facf 	bl	8006b3c <xQueueGenericCreateStatic>
 800959e:	4603      	mov	r3, r0
 80095a0:	4a08      	ldr	r2, [pc, #32]	; (80095c4 <prvCheckForValidListAndQueue+0x60>)
 80095a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095a4:	4b07      	ldr	r3, [pc, #28]	; (80095c4 <prvCheckForValidListAndQueue+0x60>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d005      	beq.n	80095b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095ac:	4b05      	ldr	r3, [pc, #20]	; (80095c4 <prvCheckForValidListAndQueue+0x60>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	490b      	ldr	r1, [pc, #44]	; (80095e0 <prvCheckForValidListAndQueue+0x7c>)
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fa04 	bl	80079c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095b8:	f000 f974 	bl	80098a4 <vPortExitCritical>
}
 80095bc:	bf00      	nop
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20000970 	.word	0x20000970
 80095c8:	20000940 	.word	0x20000940
 80095cc:	20000954 	.word	0x20000954
 80095d0:	20000968 	.word	0x20000968
 80095d4:	2000096c 	.word	0x2000096c
 80095d8:	200009f4 	.word	0x200009f4
 80095dc:	2000097c 	.word	0x2000097c
 80095e0:	0800f4a8 	.word	0x0800f4a8

080095e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3b04      	subs	r3, #4
 80095f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3b04      	subs	r3, #4
 8009602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f023 0201 	bic.w	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b04      	subs	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009614:	4a0c      	ldr	r2, [pc, #48]	; (8009648 <pxPortInitialiseStack+0x64>)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3b14      	subs	r3, #20
 800961e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3b04      	subs	r3, #4
 800962a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f06f 0202 	mvn.w	r2, #2
 8009632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3b20      	subs	r3, #32
 8009638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800963a:	68fb      	ldr	r3, [r7, #12]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	0800964d 	.word	0x0800964d

0800964c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009656:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <prvTaskExitError+0x54>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965e:	d00a      	beq.n	8009676 <prvTaskExitError+0x2a>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60fb      	str	r3, [r7, #12]
}
 8009672:	bf00      	nop
 8009674:	e7fe      	b.n	8009674 <prvTaskExitError+0x28>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60bb      	str	r3, [r7, #8]
}
 8009688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800968a:	bf00      	nop
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0fc      	beq.n	800968c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009692:	bf00      	nop
 8009694:	bf00      	nop
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	20000014 	.word	0x20000014
	...

080096b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <pxCurrentTCBConst2>)
 80096b2:	6819      	ldr	r1, [r3, #0]
 80096b4:	6808      	ldr	r0, [r1, #0]
 80096b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ba:	f380 8809 	msr	PSP, r0
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8811 	msr	BASEPRI, r0
 80096ca:	4770      	bx	lr
 80096cc:	f3af 8000 	nop.w

080096d0 <pxCurrentTCBConst2>:
 80096d0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop

080096d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096d8:	4808      	ldr	r0, [pc, #32]	; (80096fc <prvPortStartFirstTask+0x24>)
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	6800      	ldr	r0, [r0, #0]
 80096de:	f380 8808 	msr	MSP, r0
 80096e2:	f04f 0000 	mov.w	r0, #0
 80096e6:	f380 8814 	msr	CONTROL, r0
 80096ea:	b662      	cpsie	i
 80096ec:	b661      	cpsie	f
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	df00      	svc	0
 80096f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096fa:	bf00      	nop
 80096fc:	e000ed08 	.word	0xe000ed08

08009700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009706:	4b46      	ldr	r3, [pc, #280]	; (8009820 <xPortStartScheduler+0x120>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a46      	ldr	r2, [pc, #280]	; (8009824 <xPortStartScheduler+0x124>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d10a      	bne.n	8009726 <xPortStartScheduler+0x26>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	613b      	str	r3, [r7, #16]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009726:	4b3e      	ldr	r3, [pc, #248]	; (8009820 <xPortStartScheduler+0x120>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a3f      	ldr	r2, [pc, #252]	; (8009828 <xPortStartScheduler+0x128>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10a      	bne.n	8009746 <xPortStartScheduler+0x46>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	60fb      	str	r3, [r7, #12]
}
 8009742:	bf00      	nop
 8009744:	e7fe      	b.n	8009744 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009746:	4b39      	ldr	r3, [pc, #228]	; (800982c <xPortStartScheduler+0x12c>)
 8009748:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	22ff      	movs	r2, #255	; 0xff
 8009756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009768:	b2da      	uxtb	r2, r3
 800976a:	4b31      	ldr	r3, [pc, #196]	; (8009830 <xPortStartScheduler+0x130>)
 800976c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <xPortStartScheduler+0x134>)
 8009770:	2207      	movs	r2, #7
 8009772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009774:	e009      	b.n	800978a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009776:	4b2f      	ldr	r3, [pc, #188]	; (8009834 <xPortStartScheduler+0x134>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3b01      	subs	r3, #1
 800977c:	4a2d      	ldr	r2, [pc, #180]	; (8009834 <xPortStartScheduler+0x134>)
 800977e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	b2db      	uxtb	r3, r3
 8009788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009792:	2b80      	cmp	r3, #128	; 0x80
 8009794:	d0ef      	beq.n	8009776 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009796:	4b27      	ldr	r3, [pc, #156]	; (8009834 <xPortStartScheduler+0x134>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f1c3 0307 	rsb	r3, r3, #7
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d00a      	beq.n	80097b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80097a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	60bb      	str	r3, [r7, #8]
}
 80097b4:	bf00      	nop
 80097b6:	e7fe      	b.n	80097b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097b8:	4b1e      	ldr	r3, [pc, #120]	; (8009834 <xPortStartScheduler+0x134>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	021b      	lsls	r3, r3, #8
 80097be:	4a1d      	ldr	r2, [pc, #116]	; (8009834 <xPortStartScheduler+0x134>)
 80097c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097c2:	4b1c      	ldr	r3, [pc, #112]	; (8009834 <xPortStartScheduler+0x134>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ca:	4a1a      	ldr	r2, [pc, #104]	; (8009834 <xPortStartScheduler+0x134>)
 80097cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097d6:	4b18      	ldr	r3, [pc, #96]	; (8009838 <xPortStartScheduler+0x138>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a17      	ldr	r2, [pc, #92]	; (8009838 <xPortStartScheduler+0x138>)
 80097dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <xPortStartScheduler+0x138>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a14      	ldr	r2, [pc, #80]	; (8009838 <xPortStartScheduler+0x138>)
 80097e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097ee:	f000 f8dd 	bl	80099ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097f2:	4b12      	ldr	r3, [pc, #72]	; (800983c <xPortStartScheduler+0x13c>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097f8:	f000 f8fc 	bl	80099f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097fc:	4b10      	ldr	r3, [pc, #64]	; (8009840 <xPortStartScheduler+0x140>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0f      	ldr	r2, [pc, #60]	; (8009840 <xPortStartScheduler+0x140>)
 8009802:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009806:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009808:	f7ff ff66 	bl	80096d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800980c:	f7fe fe8a 	bl	8008524 <vTaskSwitchContext>
	prvTaskExitError();
 8009810:	f7ff ff1c 	bl	800964c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	e000ed00 	.word	0xe000ed00
 8009824:	410fc271 	.word	0x410fc271
 8009828:	410fc270 	.word	0x410fc270
 800982c:	e000e400 	.word	0xe000e400
 8009830:	20000a3c 	.word	0x20000a3c
 8009834:	20000a40 	.word	0x20000a40
 8009838:	e000ed20 	.word	0xe000ed20
 800983c:	20000014 	.word	0x20000014
 8009840:	e000ef34 	.word	0xe000ef34

08009844 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	607b      	str	r3, [r7, #4]
}
 800985c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800985e:	4b0f      	ldr	r3, [pc, #60]	; (800989c <vPortEnterCritical+0x58>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a0d      	ldr	r2, [pc, #52]	; (800989c <vPortEnterCritical+0x58>)
 8009866:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009868:	4b0c      	ldr	r3, [pc, #48]	; (800989c <vPortEnterCritical+0x58>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10f      	bne.n	8009890 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009870:	4b0b      	ldr	r3, [pc, #44]	; (80098a0 <vPortEnterCritical+0x5c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <vPortEnterCritical+0x4c>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <vPortEnterCritical+0x4a>
	}
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	20000014 	.word	0x20000014
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098aa:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <vPortExitCritical+0x50>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <vPortExitCritical+0x24>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	607b      	str	r3, [r7, #4]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <vPortExitCritical+0x50>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	4a09      	ldr	r2, [pc, #36]	; (80098f4 <vPortExitCritical+0x50>)
 80098d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098d2:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <vPortExitCritical+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <vPortExitCritical+0x42>
 80098da:	2300      	movs	r3, #0
 80098dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f383 8811 	msr	BASEPRI, r3
}
 80098e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098e6:	bf00      	nop
 80098e8:	370c      	adds	r7, #12
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	20000014 	.word	0x20000014
	...

08009900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009900:	f3ef 8009 	mrs	r0, PSP
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4b15      	ldr	r3, [pc, #84]	; (8009960 <pxCurrentTCBConst>)
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	f01e 0f10 	tst.w	lr, #16
 8009910:	bf08      	it	eq
 8009912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	6010      	str	r0, [r2, #0]
 800991c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009924:	f380 8811 	msr	BASEPRI, r0
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	f3bf 8f6f 	isb	sy
 8009930:	f7fe fdf8 	bl	8008524 <vTaskSwitchContext>
 8009934:	f04f 0000 	mov.w	r0, #0
 8009938:	f380 8811 	msr	BASEPRI, r0
 800993c:	bc09      	pop	{r0, r3}
 800993e:	6819      	ldr	r1, [r3, #0]
 8009940:	6808      	ldr	r0, [r1, #0]
 8009942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009946:	f01e 0f10 	tst.w	lr, #16
 800994a:	bf08      	it	eq
 800994c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009950:	f380 8809 	msr	PSP, r0
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	f3af 8000 	nop.w

08009960 <pxCurrentTCBConst>:
 8009960:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop

08009968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	607b      	str	r3, [r7, #4]
}
 8009980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009982:	f7fe fd17 	bl	80083b4 <xTaskIncrementTick>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <SysTick_Handler+0x40>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f383 8811 	msr	BASEPRI, r3
}
 800999e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099a0:	bf00      	nop
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099b0:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <vPortSetupTimerInterrupt+0x38>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099bc:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <vPortSetupTimerInterrupt+0x3c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0a      	ldr	r2, [pc, #40]	; (80099ec <vPortSetupTimerInterrupt+0x40>)
 80099c2:	fba2 2303 	umull	r2, r3, r2, r3
 80099c6:	099b      	lsrs	r3, r3, #6
 80099c8:	4a09      	ldr	r2, [pc, #36]	; (80099f0 <vPortSetupTimerInterrupt+0x44>)
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <vPortSetupTimerInterrupt+0x34>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	e000e010 	.word	0xe000e010
 80099e4:	e000e018 	.word	0xe000e018
 80099e8:	20000008 	.word	0x20000008
 80099ec:	10624dd3 	.word	0x10624dd3
 80099f0:	e000e014 	.word	0xe000e014

080099f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a04 <vPortEnableVFP+0x10>
 80099f8:	6801      	ldr	r1, [r0, #0]
 80099fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099fe:	6001      	str	r1, [r0, #0]
 8009a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a02:	bf00      	nop
 8009a04:	e000ed88 	.word	0xe000ed88

08009a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a0e:	f3ef 8305 	mrs	r3, IPSR
 8009a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d914      	bls.n	8009a44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a1a:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <vPortValidateInterruptPriority+0x70>)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a24:	4b15      	ldr	r3, [pc, #84]	; (8009a7c <vPortValidateInterruptPriority+0x74>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	7afa      	ldrb	r2, [r7, #11]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d20a      	bcs.n	8009a44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a44:	4b0e      	ldr	r3, [pc, #56]	; (8009a80 <vPortValidateInterruptPriority+0x78>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a4c:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <vPortValidateInterruptPriority+0x7c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d90a      	bls.n	8009a6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	603b      	str	r3, [r7, #0]
}
 8009a66:	bf00      	nop
 8009a68:	e7fe      	b.n	8009a68 <vPortValidateInterruptPriority+0x60>
	}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	e000e3f0 	.word	0xe000e3f0
 8009a7c:	20000a3c 	.word	0x20000a3c
 8009a80:	e000ed0c 	.word	0xe000ed0c
 8009a84:	20000a40 	.word	0x20000a40

08009a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a94:	f7fe fbd4 	bl	8008240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a98:	4b5b      	ldr	r3, [pc, #364]	; (8009c08 <pvPortMalloc+0x180>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009aa0:	f000 f920 	bl	8009ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009aa4:	4b59      	ldr	r3, [pc, #356]	; (8009c0c <pvPortMalloc+0x184>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f040 8093 	bne.w	8009bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d01d      	beq.n	8009af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ab8:	2208      	movs	r2, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4413      	add	r3, r2
 8009abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d014      	beq.n	8009af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f023 0307 	bic.w	r3, r3, #7
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00a      	beq.n	8009af4 <pvPortMalloc+0x6c>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	617b      	str	r3, [r7, #20]
}
 8009af0:	bf00      	nop
 8009af2:	e7fe      	b.n	8009af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d06e      	beq.n	8009bd8 <pvPortMalloc+0x150>
 8009afa:	4b45      	ldr	r3, [pc, #276]	; (8009c10 <pvPortMalloc+0x188>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d869      	bhi.n	8009bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b04:	4b43      	ldr	r3, [pc, #268]	; (8009c14 <pvPortMalloc+0x18c>)
 8009b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b08:	4b42      	ldr	r3, [pc, #264]	; (8009c14 <pvPortMalloc+0x18c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0e:	e004      	b.n	8009b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <pvPortMalloc+0xa4>
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f1      	bne.n	8009b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b2c:	4b36      	ldr	r3, [pc, #216]	; (8009c08 <pvPortMalloc+0x180>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d050      	beq.n	8009bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2208      	movs	r2, #8
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	2308      	movs	r3, #8
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d91f      	bls.n	8009b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <pvPortMalloc+0xf8>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	613b      	str	r3, [r7, #16]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	1ad2      	subs	r2, r2, r3
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b92:	69b8      	ldr	r0, [r7, #24]
 8009b94:	f000 f908 	bl	8009da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b98:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <pvPortMalloc+0x188>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	4a1b      	ldr	r2, [pc, #108]	; (8009c10 <pvPortMalloc+0x188>)
 8009ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <pvPortMalloc+0x188>)
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	4b1b      	ldr	r3, [pc, #108]	; (8009c18 <pvPortMalloc+0x190>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d203      	bcs.n	8009bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bb2:	4b17      	ldr	r3, [pc, #92]	; (8009c10 <pvPortMalloc+0x188>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	; (8009c18 <pvPortMalloc+0x190>)
 8009bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <pvPortMalloc+0x184>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	2200      	movs	r2, #0
 8009bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bce:	4b13      	ldr	r3, [pc, #76]	; (8009c1c <pvPortMalloc+0x194>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <pvPortMalloc+0x194>)
 8009bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bd8:	f7fe fb40 	bl	800825c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	f003 0307 	and.w	r3, r3, #7
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00a      	beq.n	8009bfc <pvPortMalloc+0x174>
	__asm volatile
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	60fb      	str	r3, [r7, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	e7fe      	b.n	8009bfa <pvPortMalloc+0x172>
	return pvReturn;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3728      	adds	r7, #40	; 0x28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20007f7c 	.word	0x20007f7c
 8009c0c:	20007f90 	.word	0x20007f90
 8009c10:	20007f80 	.word	0x20007f80
 8009c14:	20007f74 	.word	0x20007f74
 8009c18:	20007f84 	.word	0x20007f84
 8009c1c:	20007f88 	.word	0x20007f88

08009c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04d      	beq.n	8009cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c32:	2308      	movs	r3, #8
 8009c34:	425b      	negs	r3, r3
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	4413      	add	r3, r2
 8009c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <vPortFree+0xb8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <vPortFree+0x44>
	__asm volatile
 8009c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c52:	f383 8811 	msr	BASEPRI, r3
 8009c56:	f3bf 8f6f 	isb	sy
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	60fb      	str	r3, [r7, #12]
}
 8009c60:	bf00      	nop
 8009c62:	e7fe      	b.n	8009c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <vPortFree+0x62>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	60bb      	str	r3, [r7, #8]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <vPortFree+0xb8>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01e      	beq.n	8009cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11a      	bne.n	8009cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <vPortFree+0xb8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	43db      	mvns	r3, r3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ca8:	f7fe faca 	bl	8008240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <vPortFree+0xbc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <vPortFree+0xbc>)
 8009cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cba:	6938      	ldr	r0, [r7, #16]
 8009cbc:	f000 f874 	bl	8009da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <vPortFree+0xc0>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <vPortFree+0xc0>)
 8009cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cca:	f7fe fac7 	bl	800825c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cce:	bf00      	nop
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20007f90 	.word	0x20007f90
 8009cdc:	20007f80 	.word	0x20007f80
 8009ce0:	20007f8c 	.word	0x20007f8c

08009ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cea:	f247 5330 	movw	r3, #30000	; 0x7530
 8009cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cf0:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <prvHeapInit+0xac>)
 8009cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00c      	beq.n	8009d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3307      	adds	r3, #7
 8009d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	4a1f      	ldr	r2, [pc, #124]	; (8009d90 <prvHeapInit+0xac>)
 8009d14:	4413      	add	r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d1c:	4a1d      	ldr	r2, [pc, #116]	; (8009d94 <prvHeapInit+0xb0>)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d22:	4b1c      	ldr	r3, [pc, #112]	; (8009d94 <prvHeapInit+0xb0>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d30:	2208      	movs	r2, #8
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1a9b      	subs	r3, r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0307 	bic.w	r3, r3, #7
 8009d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <prvHeapInit+0xb4>)
 8009d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <prvHeapInit+0xb4>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d4e:	4b12      	ldr	r3, [pc, #72]	; (8009d98 <prvHeapInit+0xb4>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	1ad2      	subs	r2, r2, r3
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d64:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <prvHeapInit+0xb4>)
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <prvHeapInit+0xb8>)
 8009d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	4a09      	ldr	r2, [pc, #36]	; (8009da0 <prvHeapInit+0xbc>)
 8009d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d7c:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <prvHeapInit+0xc0>)
 8009d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	20000a44 	.word	0x20000a44
 8009d94:	20007f74 	.word	0x20007f74
 8009d98:	20007f7c 	.word	0x20007f7c
 8009d9c:	20007f84 	.word	0x20007f84
 8009da0:	20007f80 	.word	0x20007f80
 8009da4:	20007f90 	.word	0x20007f90

08009da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009db0:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <prvInsertBlockIntoFreeList+0xac>)
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e002      	b.n	8009dbc <prvInsertBlockIntoFreeList+0x14>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	60fb      	str	r3, [r7, #12]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d8f7      	bhi.n	8009db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d108      	bne.n	8009dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	441a      	add	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	441a      	add	r2, r3
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d118      	bne.n	8009e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <prvInsertBlockIntoFreeList+0xb0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d00d      	beq.n	8009e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	441a      	add	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e008      	b.n	8009e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <prvInsertBlockIntoFreeList+0xb0>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e003      	b.n	8009e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d002      	beq.n	8009e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20007f74 	.word	0x20007f74
 8009e58:	20007f7c 	.word	0x20007f7c

08009e5c <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 8009e64:	4bbe      	ldr	r3, [pc, #760]	; (800a160 <ThreadM95Task+0x304>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fc fd1d 	bl	80068a8 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8009e6e:	4bbd      	ldr	r3, [pc, #756]	; (800a164 <ThreadM95Task+0x308>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f04f 31ff 	mov.w	r1, #4294967295
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7fc fbb6 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер для перезагрузки по его окончанию
 8009e7c:	4bba      	ldr	r3, [pc, #744]	; (800a168 <ThreadM95Task+0x30c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f64e 2160 	movw	r1, #60000	; 0xea60
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fc fa53 	bl	8006330 <osTimerStart>


	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009e8a:	4bb8      	ldr	r3, [pc, #736]	; (800a16c <ThreadM95Task+0x310>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fc fae4 	bl	8006460 <osMutexWait>

	fm25v02_write(2*VERSION_REG, 0); // записываем версию прошивки для бутлоадера старший байт
 8009e98:	2100      	movs	r1, #0
 8009e9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009e9e:	f001 fbc3 	bl	800b628 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 255); // записываем версию прошивки для бутлоадера младший байт
 8009ea2:	21ff      	movs	r1, #255	; 0xff
 8009ea4:	f242 0001 	movw	r0, #8193	; 0x2001
 8009ea8:	f001 fbbe 	bl	800b628 <fm25v02_write>

	fm25v02_write(2*BOOTLOADER_VERSION_REG, 0); // записываем версию прошивки бутлоадера старший байт
 8009eac:	2100      	movs	r1, #0
 8009eae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009eb2:	f001 fbb9 	bl	800b628 <fm25v02_write>
	fm25v02_write(2*BOOTLOADER_VERSION_REG+1, 255); // записываем версию прошивки бутлоадера младший байт
 8009eb6:	21ff      	movs	r1, #255	; 0xff
 8009eb8:	f240 2001 	movw	r0, #513	; 0x201
 8009ebc:	f001 fbb4 	bl	800b628 <fm25v02_write>

	osMutexRelease(Fm25v02MutexHandle);
 8009ec0:	4baa      	ldr	r3, [pc, #680]	; (800a16c <ThreadM95Task+0x310>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fc fb19 	bl	80064fc <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009eca:	4ba8      	ldr	r3, [pc, #672]	; (800a16c <ThreadM95Task+0x310>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f04f 31ff 	mov.w	r1, #4294967295
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7fc fac4 	bl	8006460 <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 8009ed8:	49a5      	ldr	r1, [pc, #660]	; (800a170 <ThreadM95Task+0x314>)
 8009eda:	f242 105f 	movw	r0, #8543	; 0x215f
 8009ede:	f001 fb69 	bl	800b5b4 <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 8009ee2:	49a4      	ldr	r1, [pc, #656]	; (800a174 <ThreadM95Task+0x318>)
 8009ee4:	f242 1061 	movw	r0, #8545	; 0x2161
 8009ee8:	f001 fb64 	bl	800b5b4 <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 8009eec:	49a2      	ldr	r1, [pc, #648]	; (800a178 <ThreadM95Task+0x31c>)
 8009eee:	f242 1063 	movw	r0, #8547	; 0x2163
 8009ef2:	f001 fb5f 	bl	800b5b4 <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 8009ef6:	49a1      	ldr	r1, [pc, #644]	; (800a17c <ThreadM95Task+0x320>)
 8009ef8:	f242 1065 	movw	r0, #8549	; 0x2165
 8009efc:	f001 fb5a 	bl	800b5b4 <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 8009f00:	499f      	ldr	r1, [pc, #636]	; (800a180 <ThreadM95Task+0x324>)
 8009f02:	f242 1067 	movw	r0, #8551	; 0x2167
 8009f06:	f001 fb55 	bl	800b5b4 <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 8009f0a:	499e      	ldr	r1, [pc, #632]	; (800a184 <ThreadM95Task+0x328>)
 8009f0c:	f242 1069 	movw	r0, #8553	; 0x2169
 8009f10:	f001 fb50 	bl	800b5b4 <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 8009f14:	4b95      	ldr	r3, [pc, #596]	; (800a16c <ThreadM95Task+0x310>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fc faef 	bl	80064fc <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 8009f1e:	4b98      	ldr	r3, [pc, #608]	; (800a180 <ThreadM95Task+0x324>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	b2db      	uxtb	r3, r3
 8009f24:	021b      	lsls	r3, r3, #8
 8009f26:	b21a      	sxth	r2, r3
 8009f28:	4b96      	ldr	r3, [pc, #600]	; (800a184 <ThreadM95Task+0x328>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	b21b      	sxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	4b94      	ldr	r3, [pc, #592]	; (800a188 <ThreadM95Task+0x32c>)
 8009f38:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 8009f3a:	4b8d      	ldr	r3, [pc, #564]	; (800a170 <ThreadM95Task+0x314>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d123      	bne.n	8009f8c <ThreadM95Task+0x130>
 8009f44:	4b8b      	ldr	r3, [pc, #556]	; (800a174 <ThreadM95Task+0x318>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d11e      	bne.n	8009f8c <ThreadM95Task+0x130>
 8009f4e:	4b8a      	ldr	r3, [pc, #552]	; (800a178 <ThreadM95Task+0x31c>)
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d119      	bne.n	8009f8c <ThreadM95Task+0x130>
 8009f58:	4b88      	ldr	r3, [pc, #544]	; (800a17c <ThreadM95Task+0x320>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d114      	bne.n	8009f8c <ThreadM95Task+0x130>
 8009f62:	4b89      	ldr	r3, [pc, #548]	; (800a188 <ThreadM95Task+0x32c>)
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10f      	bne.n	8009f8c <ThreadM95Task+0x130>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 8009f6c:	4b80      	ldr	r3, [pc, #512]	; (800a170 <ThreadM95Task+0x314>)
 8009f6e:	22c3      	movs	r2, #195	; 0xc3
 8009f70:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 8009f72:	4b80      	ldr	r3, [pc, #512]	; (800a174 <ThreadM95Task+0x318>)
 8009f74:	22d0      	movs	r2, #208	; 0xd0
 8009f76:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 8009f78:	4b7f      	ldr	r3, [pc, #508]	; (800a178 <ThreadM95Task+0x31c>)
 8009f7a:	22a3      	movs	r2, #163	; 0xa3
 8009f7c:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 8009f7e:	4b7f      	ldr	r3, [pc, #508]	; (800a17c <ThreadM95Task+0x320>)
 8009f80:	2243      	movs	r2, #67	; 0x43
 8009f82:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 8009f84:	4b80      	ldr	r3, [pc, #512]	; (800a188 <ThreadM95Task+0x32c>)
 8009f86:	f648 02ea 	movw	r2, #35050	; 0x88ea
 8009f8a:	801a      	strh	r2, [r3, #0]
			//ip4 = 67;     // значение по умолчанию
			//port = 35070; // значение по умолчанию
		}


		osMutexWait(UartMutexHandle, osWaitForever);
 8009f8c:	4b7f      	ldr	r3, [pc, #508]	; (800a18c <ThreadM95Task+0x330>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f04f 31ff 	mov.w	r1, #4294967295
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7fc fa63 	bl	8006460 <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 8009f9a:	f001 fd17 	bl	800b9cc <AT>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d106      	bne.n	8009fb2 <ThreadM95Task+0x156>
		{
			if(AT()==AT_ERROR)
 8009fa4:	f001 fd12 	bl	800b9cc <AT>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <ThreadM95Task+0x156>
			{
				m95_power_on();
 8009fae:	f001 fc65 	bl	800b87c <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 8009fb2:	f001 fcb5 	bl	800b920 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 8009fb6:	4b75      	ldr	r3, [pc, #468]	; (800a18c <ThreadM95Task+0x330>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fc fa9e 	bl	80064fc <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 8009fc0:	4b72      	ldr	r3, [pc, #456]	; (800a18c <ThreadM95Task+0x330>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fc fa49 	bl	8006460 <osMutexWait>

		switch(AT_QISTATE())
 8009fce:	f002 fcd7 	bl	800c980 <AT_QISTATE>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	3b02      	subs	r3, #2
 8009fd6:	2b0a      	cmp	r3, #10
 8009fd8:	f200 812d 	bhi.w	800a236 <ThreadM95Task+0x3da>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <ThreadM95Task+0x188>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	0800a011 	.word	0x0800a011
 8009fe8:	0800a111 	.word	0x0800a111
 8009fec:	0800a237 	.word	0x0800a237
 8009ff0:	0800a11b 	.word	0x0800a11b
 8009ff4:	0800a125 	.word	0x0800a125
 8009ff8:	0800a227 	.word	0x0800a227
 8009ffc:	0800a237 	.word	0x0800a237
 800a000:	0800a237 	.word	0x0800a237
 800a004:	0800a1a5 	.word	0x0800a1a5
 800a008:	0800a1e1 	.word	0x0800a1e1
 800a00c:	0800a1d7 	.word	0x0800a1d7
		{
			case IP_INITIAL:

				LED1_OFF();
 800a010:	f001 fbe8 	bl	800b7e4 <LED1_OFF>
				if( AT_QIMUX(0) == AT_OK )
 800a014:	2000      	movs	r0, #0
 800a016:	f002 faf5 	bl	800c604 <AT_QIMUX>
				{

				}
				if( AT_COPS() == AT_OK )
 800a01a:	f002 f935 	bl	800c288 <AT_COPS>
				{

				}
				if(	AT_QCCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 800a01e:	495c      	ldr	r1, [pc, #368]	; (800a190 <ThreadM95Task+0x334>)
 800a020:	485c      	ldr	r0, [pc, #368]	; (800a194 <ThreadM95Task+0x338>)
 800a022:	f001 fda7 	bl	800bb74 <AT_QCCID>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d16b      	bne.n	800a104 <ThreadM95Task+0x2a8>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a02c:	4b4f      	ldr	r3, [pc, #316]	; (800a16c <ThreadM95Task+0x310>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f04f 31ff 	mov.w	r1, #4294967295
 800a034:	4618      	mov	r0, r3
 800a036:	f7fc fa13 	bl	8006460 <osMutexWait>

					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00); // записываем в регистры CCID сим-карты
 800a03a:	2100      	movs	r1, #0
 800a03c:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800a040:	f001 faf2 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800a044:	4b53      	ldr	r3, [pc, #332]	; (800a194 <ThreadM95Task+0x338>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	4619      	mov	r1, r3
 800a04a:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800a04e:	f001 faeb 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800a052:	2100      	movs	r1, #0
 800a054:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800a058:	f001 fae6 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800a05c:	4b4d      	ldr	r3, [pc, #308]	; (800a194 <ThreadM95Task+0x338>)
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	4619      	mov	r1, r3
 800a062:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800a066:	f001 fadf 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800a06a:	2100      	movs	r1, #0
 800a06c:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800a070:	f001 fada 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800a074:	4b47      	ldr	r3, [pc, #284]	; (800a194 <ThreadM95Task+0x338>)
 800a076:	789b      	ldrb	r3, [r3, #2]
 800a078:	4619      	mov	r1, r3
 800a07a:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800a07e:	f001 fad3 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800a082:	2100      	movs	r1, #0
 800a084:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800a088:	f001 face 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800a08c:	4b41      	ldr	r3, [pc, #260]	; (800a194 <ThreadM95Task+0x338>)
 800a08e:	78db      	ldrb	r3, [r3, #3]
 800a090:	4619      	mov	r1, r3
 800a092:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800a096:	f001 fac7 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800a09a:	2100      	movs	r1, #0
 800a09c:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800a0a0:	f001 fac2 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800a0a4:	4b3b      	ldr	r3, [pc, #236]	; (800a194 <ThreadM95Task+0x338>)
 800a0a6:	791b      	ldrb	r3, [r3, #4]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800a0ae:	f001 fabb 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800a0b8:	f001 fab6 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800a0bc:	4b35      	ldr	r3, [pc, #212]	; (800a194 <ThreadM95Task+0x338>)
 800a0be:	795b      	ldrb	r3, [r3, #5]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800a0c6:	f001 faaf 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800a0d0:	f001 faaa 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800a0d4:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <ThreadM95Task+0x338>)
 800a0d6:	799b      	ldrb	r3, [r3, #6]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800a0de:	f001 faa3 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f242 00be 	movw	r0, #8382	; 0x20be
 800a0e8:	f001 fa9e 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800a0ec:	4b29      	ldr	r3, [pc, #164]	; (800a194 <ThreadM95Task+0x338>)
 800a0ee:	79db      	ldrb	r3, [r3, #7]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800a0f6:	f001 fa97 	bl	800b628 <fm25v02_write>

					osMutexRelease(Fm25v02MutexHandle);
 800a0fa:	4b1c      	ldr	r3, [pc, #112]	; (800a16c <ThreadM95Task+0x310>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fc f9fc 	bl	80064fc <osMutexRelease>
				}

				if(AT_QIREGAPP("mts.internet.ru", "mts", "mts") == AT_OK)
 800a104:	4a24      	ldr	r2, [pc, #144]	; (800a198 <ThreadM95Task+0x33c>)
 800a106:	4924      	ldr	r1, [pc, #144]	; (800a198 <ThreadM95Task+0x33c>)
 800a108:	4824      	ldr	r0, [pc, #144]	; (800a19c <ThreadM95Task+0x340>)
 800a10a:	f002 fae9 	bl	800c6e0 <AT_QIREGAPP>
				{

				}

			break;
 800a10e:	e092      	b.n	800a236 <ThreadM95Task+0x3da>

			case IP_START:

				LED1_OFF();
 800a110:	f001 fb68 	bl	800b7e4 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800a114:	f002 fb60 	bl	800c7d8 <AT_QIACT>
				{

				}

			break;
 800a118:	e08d      	b.n	800a236 <ThreadM95Task+0x3da>

			case IP_IND:

				LED1_OFF();
 800a11a:	f001 fb63 	bl	800b7e4 <LED1_OFF>
				if(AT_QIDEACT()!=AT_OK)
 800a11e:	f002 fbc5 	bl	800c8ac <AT_QIDEACT>
				{

				}

			break;
 800a122:	e088      	b.n	800a236 <ThreadM95Task+0x3da>

			case IP_GPRSACT:

				LED1_OFF();
 800a124:	f001 fb5e 	bl	800b7e4 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800a128:	4b11      	ldr	r3, [pc, #68]	; (800a170 <ThreadM95Task+0x314>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	b2d9      	uxtb	r1, r3
 800a12e:	4b11      	ldr	r3, [pc, #68]	; (800a174 <ThreadM95Task+0x318>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	b2d8      	uxtb	r0, r3
 800a134:	4b10      	ldr	r3, [pc, #64]	; (800a178 <ThreadM95Task+0x31c>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	b2dc      	uxtb	r4, r3
 800a13a:	4b10      	ldr	r3, [pc, #64]	; (800a17c <ThreadM95Task+0x320>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	4a11      	ldr	r2, [pc, #68]	; (800a188 <ThreadM95Task+0x32c>)
 800a142:	8812      	ldrh	r2, [r2, #0]
 800a144:	b292      	uxth	r2, r2
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	4623      	mov	r3, r4
 800a14c:	4602      	mov	r2, r0
 800a14e:	4814      	ldr	r0, [pc, #80]	; (800a1a0 <ThreadM95Task+0x344>)
 800a150:	f002 f8f6 	bl	800c340 <AT_QIOPEN>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d06a      	beq.n	800a230 <ThreadM95Task+0x3d4>
				{

				}
				else
				{
					LED1_OFF();
 800a15a:	f001 fb43 	bl	800b7e4 <LED1_OFF>
				}

			break;
 800a15e:	e067      	b.n	800a230 <ThreadM95Task+0x3d4>
 800a160:	20009550 	.word	0x20009550
 800a164:	2000978c 	.word	0x2000978c
 800a168:	200094d4 	.word	0x200094d4
 800a16c:	2000957c 	.word	0x2000957c
 800a170:	20007f94 	.word	0x20007f94
 800a174:	20007f95 	.word	0x20007f95
 800a178:	20007f96 	.word	0x20007f96
 800a17c:	20007f97 	.word	0x20007f97
 800a180:	20007f98 	.word	0x20007f98
 800a184:	20007f99 	.word	0x20007f99
 800a188:	20007f9a 	.word	0x20007f9a
 800a18c:	200094d0 	.word	0x200094d0
 800a190:	20009860 	.word	0x20009860
 800a194:	20009854 	.word	0x20009854
 800a198:	0800f4b0 	.word	0x0800f4b0
 800a19c:	0800f4b4 	.word	0x0800f4b4
 800a1a0:	0800f4c4 	.word	0x0800f4c4

			case IP_CLOSE:
				//osThreadSuspend(CallRingCenterTaskHandle);
				LED1_OFF();
 800a1a4:	f001 fb1e 	bl	800b7e4 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
 800a1a8:	4b28      	ldr	r3, [pc, #160]	; (800a24c <ThreadM95Task+0x3f0>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2d9      	uxtb	r1, r3
 800a1ae:	4b28      	ldr	r3, [pc, #160]	; (800a250 <ThreadM95Task+0x3f4>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b2d8      	uxtb	r0, r3
 800a1b4:	4b27      	ldr	r3, [pc, #156]	; (800a254 <ThreadM95Task+0x3f8>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	b2dc      	uxtb	r4, r3
 800a1ba:	4b27      	ldr	r3, [pc, #156]	; (800a258 <ThreadM95Task+0x3fc>)
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	4a26      	ldr	r2, [pc, #152]	; (800a25c <ThreadM95Task+0x400>)
 800a1c2:	8812      	ldrh	r2, [r2, #0]
 800a1c4:	b292      	uxth	r2, r2
 800a1c6:	9201      	str	r2, [sp, #4]
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	4824      	ldr	r0, [pc, #144]	; (800a260 <ThreadM95Task+0x404>)
 800a1d0:	f002 f8b6 	bl	800c340 <AT_QIOPEN>
				else
				{

				}

			break;
 800a1d4:	e02f      	b.n	800a236 <ThreadM95Task+0x3da>

			case PDP_DEACT:

				LED1_OFF();
 800a1d6:	f001 fb05 	bl	800b7e4 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800a1da:	f002 fafd 	bl	800c7d8 <AT_QIACT>
				{

				}
			break;
 800a1de:	e02a      	b.n	800a236 <ThreadM95Task+0x3da>

			case CONNECT_OK: // Если соединение установлено

				LED1_ON();
 800a1e0:	f001 fb0c 	bl	800b7fc <LED1_ON>

				if( AT_COPS() == AT_OK )
 800a1e4:	f002 f850 	bl	800c288 <AT_COPS>
				{

				}
				if( AT_CSQ(&level) == AT_OK )
 800a1e8:	481e      	ldr	r0, [pc, #120]	; (800a264 <ThreadM95Task+0x408>)
 800a1ea:	f001 fc45 	bl	800ba78 <AT_CSQ>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d11f      	bne.n	800a234 <ThreadM95Task+0x3d8>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	; (800a268 <ThreadM95Task+0x40c>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7fc f92f 	bl	8006460 <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 800a202:	2100      	movs	r1, #0
 800a204:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800a208:	f001 fa0e 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 800a20c:	4b15      	ldr	r3, [pc, #84]	; (800a264 <ThreadM95Task+0x408>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800a216:	f001 fa07 	bl	800b628 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800a21a:	4b13      	ldr	r3, [pc, #76]	; (800a268 <ThreadM95Task+0x40c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fc f96c 	bl	80064fc <osMutexRelease>
				}

			break;
 800a224:	e006      	b.n	800a234 <ThreadM95Task+0x3d8>

			case IP_STATUS:

				LED1_OFF();
 800a226:	f001 fadd 	bl	800b7e4 <LED1_OFF>
				m95_power_off();
 800a22a:	f001 fb43 	bl	800b8b4 <m95_power_off>
				//else
				//{

				//}

			break;
 800a22e:	e002      	b.n	800a236 <ThreadM95Task+0x3da>
			break;
 800a230:	bf00      	nop
 800a232:	e000      	b.n	800a236 <ThreadM95Task+0x3da>
			break;
 800a234:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 800a236:	4b0d      	ldr	r3, [pc, #52]	; (800a26c <ThreadM95Task+0x410>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fc f95e 	bl	80064fc <osMutexRelease>
		if(AT_QIMODE(0) == AT_OK){}
		if(AT_QIHEAD(1) == AT_OK){}
		if(AT_QISHOWPT(0) == AT_OK){}
		*/

		osDelay(1000);
 800a240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a244:	f7fc f82b 	bl	800629e <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a248:	e63f      	b.n	8009eca <ThreadM95Task+0x6e>
 800a24a:	bf00      	nop
 800a24c:	20007f94 	.word	0x20007f94
 800a250:	20007f95 	.word	0x20007f95
 800a254:	20007f96 	.word	0x20007f96
 800a258:	20007f97 	.word	0x20007f97
 800a25c:	20007f9a 	.word	0x20007f9a
 800a260:	0800f4c4 	.word	0x0800f4c4
 800a264:	20009850 	.word	0x20009850
 800a268:	2000957c 	.word	0x2000957c
 800a26c:	200094d0 	.word	0x200094d0

0800a270 <__NVIC_SystemReset>:
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a274:	f3bf 8f4f 	dsb	sy
}
 800a278:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a27a:	4b06      	ldr	r3, [pc, #24]	; (800a294 <__NVIC_SystemReset+0x24>)
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a282:	4904      	ldr	r1, [pc, #16]	; (800a294 <__NVIC_SystemReset+0x24>)
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <__NVIC_SystemReset+0x28>)
 800a286:	4313      	orrs	r3, r2
 800a288:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a28a:	f3bf 8f4f 	dsb	sy
}
 800a28e:	bf00      	nop
    __NOP();
 800a290:	bf00      	nop
 800a292:	e7fd      	b.n	800a290 <__NVIC_SystemReset+0x20>
 800a294:	e000ed00 	.word	0xe000ed00
 800a298:	05fa0004 	.word	0x05fa0004

0800a29c <ThreadMainTask>:
uint32_t ApplicationAddress2 = 0x08010000;
*/


void ThreadMainTask(void const * argument)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	uint8_t temp_read_l;

	uint8_t temp_reg_h1;
	uint8_t temp_reg_l1;

	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 800a2a4:	4bbf      	ldr	r3, [pc, #764]	; (800a5a4 <ThreadMainTask+0x308>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7fc fafd 	bl	80068a8 <osThreadSuspend>
	//bootloader_registers.ready_download_reg = 0x0001;
	//osMutexRelease(Fm25v02MutexHandle);

	//----test--------------------------------

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a2ae:	4bbe      	ldr	r3, [pc, #760]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f04f 31ff 	mov.w	r1, #4294967295
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fc f8d2 	bl	8006460 <osMutexWait>

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h1);
 800a2bc:	f107 030c 	add.w	r3, r7, #12
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a2c6:	f001 f975 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l1);
 800a2ca:	f107 030b 	add.w	r3, r7, #11
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	f240 2041 	movw	r0, #577	; 0x241
 800a2d4:	f001 f96e 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a2d8:	7b3b      	ldrb	r3, [r7, #12]
 800a2da:	021b      	lsls	r3, r3, #8
 800a2dc:	b21a      	sxth	r2, r3
 800a2de:	7afb      	ldrb	r3, [r7, #11]
 800a2e0:	b21b      	sxth	r3, r3
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	b21b      	sxth	r3, r3
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	4bb0      	ldr	r3, [pc, #704]	; (800a5ac <ThreadMainTask+0x310>)
 800a2ea:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h1);
 800a2ec:	f107 030c 	add.w	r3, r7, #12
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f240 2042 	movw	r0, #578	; 0x242
 800a2f6:	f001 f95d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l1);
 800a2fa:	f107 030b 	add.w	r3, r7, #11
 800a2fe:	4619      	mov	r1, r3
 800a300:	f240 2043 	movw	r0, #579	; 0x243
 800a304:	f001 f956 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a308:	7b3b      	ldrb	r3, [r7, #12]
 800a30a:	021b      	lsls	r3, r3, #8
 800a30c:	b21a      	sxth	r2, r3
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	b21b      	sxth	r3, r3
 800a312:	4313      	orrs	r3, r2
 800a314:	b21b      	sxth	r3, r3
 800a316:	b29a      	uxth	r2, r3
 800a318:	4ba4      	ldr	r3, [pc, #656]	; (800a5ac <ThreadMainTask+0x310>)
 800a31a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h1);
 800a31c:	f107 030c 	add.w	r3, r7, #12
 800a320:	4619      	mov	r1, r3
 800a322:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a326:	f001 f945 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l1);
 800a32a:	f107 030b 	add.w	r3, r7, #11
 800a32e:	4619      	mov	r1, r3
 800a330:	f240 2045 	movw	r0, #581	; 0x245
 800a334:	f001 f93e 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a338:	7b3b      	ldrb	r3, [r7, #12]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	b21a      	sxth	r2, r3
 800a33e:	7afb      	ldrb	r3, [r7, #11]
 800a340:	b21b      	sxth	r3, r3
 800a342:	4313      	orrs	r3, r2
 800a344:	b21b      	sxth	r3, r3
 800a346:	b29a      	uxth	r2, r3
 800a348:	4b98      	ldr	r3, [pc, #608]	; (800a5ac <ThreadMainTask+0x310>)
 800a34a:	869a      	strh	r2, [r3, #52]	; 0x34

	osMutexRelease(Fm25v02MutexHandle);
 800a34c:	4b96      	ldr	r3, [pc, #600]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4618      	mov	r0, r3
 800a352:	f7fc f8d3 	bl	80064fc <osMutexRelease>

	//----------------------------------------

	if(bootloader_registers.clear_page_on_reg != 0x0001)
 800a356:	4b95      	ldr	r3, [pc, #596]	; (800a5ac <ThreadMainTask+0x310>)
 800a358:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d018      	beq.n	800a390 <ThreadMainTask+0xf4>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр очистки страниц, чтобы при запуске не произошла очистка
 800a35e:	4b92      	ldr	r3, [pc, #584]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f04f 31ff 	mov.w	r1, #4294967295
 800a366:	4618      	mov	r0, r3
 800a368:	f7fc f87a 	bl	8006460 <osMutexWait>
		fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00);
 800a36c:	2100      	movs	r1, #0
 800a36e:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a372:	f001 f959 	bl	800b628 <fm25v02_write>
		fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800a376:	2100      	movs	r1, #0
 800a378:	f240 2041 	movw	r0, #577	; 0x241
 800a37c:	f001 f954 	bl	800b628 <fm25v02_write>
		bootloader_registers.clear_page_on_reg = 0x0000;
 800a380:	4b8a      	ldr	r3, [pc, #552]	; (800a5ac <ThreadMainTask+0x310>)
 800a382:	2200      	movs	r2, #0
 800a384:	861a      	strh	r2, [r3, #48]	; 0x30
		osMutexRelease(Fm25v02MutexHandle);
 800a386:	4b88      	ldr	r3, [pc, #544]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fc f8b6 	bl	80064fc <osMutexRelease>
	}
	if(bootloader_registers.write_array_reg != 0x0001)
 800a390:	4b86      	ldr	r3, [pc, #536]	; (800a5ac <ThreadMainTask+0x310>)
 800a392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a394:	2b01      	cmp	r3, #1
 800a396:	d018      	beq.n	800a3ca <ThreadMainTask+0x12e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр записи в память контроллера, чтобы при запуске не произошла запись
 800a398:	4b83      	ldr	r3, [pc, #524]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f04f 31ff 	mov.w	r1, #4294967295
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fc f85d 	bl	8006460 <osMutexWait>
		fm25v02_write(2*WRITE_ARRAY_REG, 0x00);
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	f240 2042 	movw	r0, #578	; 0x242
 800a3ac:	f001 f93c 	bl	800b628 <fm25v02_write>
		fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	f240 2043 	movw	r0, #579	; 0x243
 800a3b6:	f001 f937 	bl	800b628 <fm25v02_write>
		bootloader_registers.write_array_reg = 0x0000;
 800a3ba:	4b7c      	ldr	r3, [pc, #496]	; (800a5ac <ThreadMainTask+0x310>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	865a      	strh	r2, [r3, #50]	; 0x32
		osMutexRelease(Fm25v02MutexHandle);
 800a3c0:	4b79      	ldr	r3, [pc, #484]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fc f899 	bl	80064fc <osMutexRelease>
	}
	if(bootloader_registers.read_array_reg != 0x0001)
 800a3ca:	4b78      	ldr	r3, [pc, #480]	; (800a5ac <ThreadMainTask+0x310>)
 800a3cc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d018      	beq.n	800a404 <ThreadMainTask+0x168>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр чтения страниц, чтобы при запуске не произошло чтение
 800a3d2:	4b75      	ldr	r3, [pc, #468]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f04f 31ff 	mov.w	r1, #4294967295
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fc f840 	bl	8006460 <osMutexWait>
		fm25v02_write(2*READ_ARRAY_REG, 0x00);
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a3e6:	f001 f91f 	bl	800b628 <fm25v02_write>
		fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	f240 2045 	movw	r0, #581	; 0x245
 800a3f0:	f001 f91a 	bl	800b628 <fm25v02_write>
		bootloader_registers.read_array_reg = 0x0000;
 800a3f4:	4b6d      	ldr	r3, [pc, #436]	; (800a5ac <ThreadMainTask+0x310>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	869a      	strh	r2, [r3, #52]	; 0x34
		osMutexRelease(Fm25v02MutexHandle);
 800a3fa:	4b6b      	ldr	r3, [pc, #428]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fc f87c 	bl	80064fc <osMutexRelease>



	for(;;)
	{
		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800a404:	4b69      	ldr	r3, [pc, #420]	; (800a5ac <ThreadMainTask+0x310>)
 800a406:	8b9b      	ldrh	r3, [r3, #28]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	f040 8325 	bne.w	800aa58 <ThreadMainTask+0x7bc>
		{

			//if(bootloader_registers.ready_download_reg == 0x0000)
			if(bootloader_registers.ready_download_reg != 0x0001)
 800a40e:	4b67      	ldr	r3, [pc, #412]	; (800a5ac <ThreadMainTask+0x310>)
 800a410:	8bdb      	ldrh	r3, [r3, #30]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d018      	beq.n	800a448 <ThreadMainTask+0x1ac>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a416:	4b64      	ldr	r3, [pc, #400]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f04f 31ff 	mov.w	r1, #4294967295
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fc f81e 	bl	8006460 <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // устанавливаем регистр готовности к загрузке прошивки
 800a424:	2100      	movs	r1, #0
 800a426:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a42a:	f001 f8fd 	bl	800b628 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x01);
 800a42e:	2101      	movs	r1, #1
 800a430:	f240 2021 	movw	r0, #545	; 0x221
 800a434:	f001 f8f8 	bl	800b628 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0001;
 800a438:	4b5c      	ldr	r3, [pc, #368]	; (800a5ac <ThreadMainTask+0x310>)
 800a43a:	2201      	movs	r2, #1
 800a43c:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800a43e:	4b5a      	ldr	r3, [pc, #360]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f7fc f85a 	bl	80064fc <osMutexRelease>
			}

			switch(bootloader_registers.write_array_reg) // запись массива байт в память контроллера
 800a448:	4b58      	ldr	r3, [pc, #352]	; (800a5ac <ThreadMainTask+0x310>)
 800a44a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 8164 	beq.w	800a71a <ThreadMainTask+0x47e>
 800a452:	2b01      	cmp	r3, #1
 800a454:	f040 8164 	bne.w	800a720 <ThreadMainTask+0x484>
					//LED4_TOGGLE();
					//LED5_TOGGLE();

					//address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a458:	4b53      	ldr	r3, [pc, #332]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f04f 31ff 	mov.w	r1, #4294967295
 800a460:	4618      	mov	r0, r3
 800a462:	f7fb fffd 	bl	8006460 <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a466:	f107 030c 	add.w	r3, r7, #12
 800a46a:	4619      	mov	r1, r3
 800a46c:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a470:	f001 f8a0 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a474:	f107 030b 	add.w	r3, r7, #11
 800a478:	4619      	mov	r1, r3
 800a47a:	f240 202d 	movw	r0, #557	; 0x22d
 800a47e:	f001 f899 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a482:	7b3b      	ldrb	r3, [r7, #12]
 800a484:	021b      	lsls	r3, r3, #8
 800a486:	b21a      	sxth	r2, r3
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	b21b      	sxth	r3, r3
 800a48c:	4313      	orrs	r3, r2
 800a48e:	b21b      	sxth	r3, r3
 800a490:	b29a      	uxth	r2, r3
 800a492:	4b46      	ldr	r3, [pc, #280]	; (800a5ac <ThreadMainTask+0x310>)
 800a494:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a496:	f107 030c 	add.w	r3, r7, #12
 800a49a:	4619      	mov	r1, r3
 800a49c:	f240 202e 	movw	r0, #558	; 0x22e
 800a4a0:	f001 f888 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a4a4:	f107 030b 	add.w	r3, r7, #11
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f240 202f 	movw	r0, #559	; 0x22f
 800a4ae:	f001 f881 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a4b2:	7b3b      	ldrb	r3, [r7, #12]
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	b21a      	sxth	r2, r3
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	b21b      	sxth	r3, r3
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	4b3a      	ldr	r3, [pc, #232]	; (800a5ac <ThreadMainTask+0x310>)
 800a4c4:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a4c6:	f107 030c 	add.w	r3, r7, #12
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	f240 2046 	movw	r0, #582	; 0x246
 800a4d0:	f001 f870 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a4d4:	f107 030b 	add.w	r3, r7, #11
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f240 2047 	movw	r0, #583	; 0x247
 800a4de:	f001 f869 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a4e2:	7b3b      	ldrb	r3, [r7, #12]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	b21a      	sxth	r2, r3
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	b21b      	sxth	r3, r3
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	b21b      	sxth	r3, r3
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	4b2e      	ldr	r3, [pc, #184]	; (800a5ac <ThreadMainTask+0x310>)
 800a4f4:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a4f6:	f107 030c 	add.w	r3, r7, #12
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a500:	f001 f858 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a504:	f107 030b 	add.w	r3, r7, #11
 800a508:	4619      	mov	r1, r3
 800a50a:	f240 2049 	movw	r0, #585	; 0x249
 800a50e:	f001 f851 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a512:	7b3b      	ldrb	r3, [r7, #12]
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	b21a      	sxth	r2, r3
 800a518:	7afb      	ldrb	r3, [r7, #11]
 800a51a:	b21b      	sxth	r3, r3
 800a51c:	4313      	orrs	r3, r2
 800a51e:	b21b      	sxth	r3, r3
 800a520:	b29a      	uxth	r2, r3
 800a522:	4b22      	ldr	r3, [pc, #136]	; (800a5ac <ThreadMainTask+0x310>)
 800a524:	871a      	strh	r2, [r3, #56]	; 0x38

					fm25v02_read(2*PACKET_CRC_HIGH_REG, &temp_reg_h1);
 800a526:	f107 030c 	add.w	r3, r7, #12
 800a52a:	4619      	mov	r1, r3
 800a52c:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a530:	f001 f840 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &temp_reg_l1);
 800a534:	f107 030b 	add.w	r3, r7, #11
 800a538:	4619      	mov	r1, r3
 800a53a:	f240 204d 	movw	r0, #589	; 0x24d
 800a53e:	f001 f839 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.packet_crc_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a542:	7b3b      	ldrb	r3, [r7, #12]
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	b21a      	sxth	r2, r3
 800a548:	7afb      	ldrb	r3, [r7, #11]
 800a54a:	b21b      	sxth	r3, r3
 800a54c:	4313      	orrs	r3, r2
 800a54e:	b21b      	sxth	r3, r3
 800a550:	b29a      	uxth	r2, r3
 800a552:	4b16      	ldr	r3, [pc, #88]	; (800a5ac <ThreadMainTask+0x310>)
 800a554:	879a      	strh	r2, [r3, #60]	; 0x3c

					fm25v02_read(2*PACKET_CRC_LOW_REG, &temp_reg_h1);
 800a556:	f107 030c 	add.w	r3, r7, #12
 800a55a:	4619      	mov	r1, r3
 800a55c:	f240 204e 	movw	r0, #590	; 0x24e
 800a560:	f001 f828 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_LOW_REG+1, &temp_reg_l1);
 800a564:	f107 030b 	add.w	r3, r7, #11
 800a568:	4619      	mov	r1, r3
 800a56a:	f240 204f 	movw	r0, #591	; 0x24f
 800a56e:	f001 f821 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.packet_crc_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a572:	7b3b      	ldrb	r3, [r7, #12]
 800a574:	021b      	lsls	r3, r3, #8
 800a576:	b21a      	sxth	r2, r3
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	b21b      	sxth	r3, r3
 800a57c:	4313      	orrs	r3, r2
 800a57e:	b21b      	sxth	r3, r3
 800a580:	b29a      	uxth	r2, r3
 800a582:	4b0a      	ldr	r3, [pc, #40]	; (800a5ac <ThreadMainTask+0x310>)
 800a584:	87da      	strh	r2, [r3, #62]	; 0x3e

					osMutexRelease(Fm25v02MutexHandle);
 800a586:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <ThreadMainTask+0x30c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fb ffb6 	bl	80064fc <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера
 800a590:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <ThreadMainTask+0x310>)
 800a592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a594:	061a      	lsls	r2, r3, #24
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <ThreadMainTask+0x310>)
 800a598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a59a:	041b      	lsls	r3, r3, #16
 800a59c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a5a0:	e006      	b.n	800a5b0 <ThreadMainTask+0x314>
 800a5a2:	bf00      	nop
 800a5a4:	20009548 	.word	0x20009548
 800a5a8:	2000957c 	.word	0x2000957c
 800a5ac:	20009d5c 	.word	0x20009d5c
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	4b9f      	ldr	r3, [pc, #636]	; (800a830 <ThreadMainTask+0x594>)
 800a5b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	4b9c      	ldr	r3, [pc, #624]	; (800a830 <ThreadMainTask+0x594>)
 800a5be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	4a9b      	ldr	r2, [pc, #620]	; (800a834 <ThreadMainTask+0x598>)
 800a5c6:	6013      	str	r3, [r2, #0]

					packet_crc = (((bootloader_registers.packet_crc_low_reg)<<8)&0xFF00) | ((bootloader_registers.packet_crc_high_reg)&0x00FF); // получаем значение контрольной суммы из регистров контрольной суммы пакета
 800a5c8:	4b99      	ldr	r3, [pc, #612]	; (800a830 <ThreadMainTask+0x594>)
 800a5ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b21a      	sxth	r2, r3
 800a5d0:	4b97      	ldr	r3, [pc, #604]	; (800a830 <ThreadMainTask+0x594>)
 800a5d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a5d4:	b21b      	sxth	r3, r3
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	b21b      	sxth	r3, r3
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	b21b      	sxth	r3, r3
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	4b95      	ldr	r3, [pc, #596]	; (800a838 <ThreadMainTask+0x59c>)
 800a5e2:	801a      	strh	r2, [r3, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	82fb      	strh	r3, [r7, #22]
 800a5e8:	e020      	b.n	800a62c <ThreadMainTask+0x390>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a5ea:	4b94      	ldr	r3, [pc, #592]	; (800a83c <ThreadMainTask+0x5a0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fb ff34 	bl	8006460 <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a5f8:	8afb      	ldrh	r3, [r7, #22]
 800a5fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	005b      	lsls	r3, r3, #1
 800a602:	b29b      	uxth	r3, r3
 800a604:	3301      	adds	r3, #1
 800a606:	b29b      	uxth	r3, r3
 800a608:	f107 020d 	add.w	r2, r7, #13
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 ffd0 	bl	800b5b4 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a614:	4b89      	ldr	r3, [pc, #548]	; (800a83c <ThreadMainTask+0x5a0>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fb ff6f 	bl	80064fc <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a61e:	8afb      	ldrh	r3, [r7, #22]
 800a620:	7b79      	ldrb	r1, [r7, #13]
 800a622:	4a87      	ldr	r2, [pc, #540]	; (800a840 <ThreadMainTask+0x5a4>)
 800a624:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a626:	8afb      	ldrh	r3, [r7, #22]
 800a628:	3301      	adds	r3, #1
 800a62a:	82fb      	strh	r3, [r7, #22]
 800a62c:	4b80      	ldr	r3, [pc, #512]	; (800a830 <ThreadMainTask+0x594>)
 800a62e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a630:	8afa      	ldrh	r2, [r7, #22]
 800a632:	429a      	cmp	r2, r3
 800a634:	d3d9      	bcc.n	800a5ea <ThreadMainTask+0x34e>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a636:	4b7e      	ldr	r3, [pc, #504]	; (800a830 <ThreadMainTask+0x594>)
 800a638:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a63a:	4619      	mov	r1, r3
 800a63c:	4880      	ldr	r0, [pc, #512]	; (800a840 <ThreadMainTask+0x5a4>)
 800a63e:	f004 f983 	bl	800e948 <CRC16>
 800a642:	4603      	mov	r3, r0
 800a644:	4a7f      	ldr	r2, [pc, #508]	; (800a844 <ThreadMainTask+0x5a8>)
 800a646:	6013      	str	r3, [r2, #0]

					if( packet_crc == calculating_packet_crc) // если контрольная сумма из регистров контрольной суммы пакета совпадает с расчетной контрольной суммой данных из регистров с данными
 800a648:	4b7b      	ldr	r3, [pc, #492]	; (800a838 <ThreadMainTask+0x59c>)
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	461a      	mov	r2, r3
 800a64e:	4b7d      	ldr	r3, [pc, #500]	; (800a844 <ThreadMainTask+0x5a8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	429a      	cmp	r2, r3
 800a654:	d163      	bne.n	800a71e <ThreadMainTask+0x482>
					{
						//osThreadSuspendAll();

						taskENTER_CRITICAL();
 800a656:	f7ff f8f5 	bl	8009844 <vPortEnterCritical>

						HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a65a:	f7f7 ff01 	bl	8002460 <HAL_FLASH_Unlock>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a65e:	2300      	movs	r3, #0
 800a660:	82bb      	strh	r3, [r7, #20]
 800a662:	e013      	b.n	800a68c <ThreadMainTask+0x3f0>
						{
							//if( *( (uint32_t*)(address_to_read_write+i) ) == 0xFF) // тестовое услови для проверки значения байта 0xFF перед тем как начать запись
							//{
								while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address_to_read_write+i, buffer_packet_data[i]) != HAL_OK ) // ничего не делаем пока не выполнится запись в память контроллера
 800a664:	bf00      	nop
 800a666:	8aba      	ldrh	r2, [r7, #20]
 800a668:	4b72      	ldr	r3, [pc, #456]	; (800a834 <ThreadMainTask+0x598>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	18d1      	adds	r1, r2, r3
 800a66e:	8abb      	ldrh	r3, [r7, #20]
 800a670:	4a73      	ldr	r2, [pc, #460]	; (800a840 <ThreadMainTask+0x5a4>)
 800a672:	5cd3      	ldrb	r3, [r2, r3]
 800a674:	b2da      	uxtb	r2, r3
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	2000      	movs	r0, #0
 800a67c:	f7f7 fe9c 	bl	80023b8 <HAL_FLASH_Program>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1ef      	bne.n	800a666 <ThreadMainTask+0x3ca>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a686:	8abb      	ldrh	r3, [r7, #20]
 800a688:	3301      	adds	r3, #1
 800a68a:	82bb      	strh	r3, [r7, #20]
 800a68c:	4b68      	ldr	r3, [pc, #416]	; (800a830 <ThreadMainTask+0x594>)
 800a68e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a690:	8aba      	ldrh	r2, [r7, #20]
 800a692:	429a      	cmp	r2, r3
 800a694:	d3e6      	bcc.n	800a664 <ThreadMainTask+0x3c8>

								}
							//}

						}
						HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800a696:	f7f7 ff05 	bl	80024a4 <HAL_FLASH_Lock>

						taskEXIT_CRITICAL();
 800a69a:	f7ff f903 	bl	80098a4 <vPortExitCritical>

						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a69e:	2300      	movs	r3, #0
 800a6a0:	827b      	strh	r3, [r7, #18]
 800a6a2:	e00b      	b.n	800a6bc <ThreadMainTask+0x420>
						{
							buffer_packet_data_flash[i] = *((uint32_t*)(address_to_read_write+i));
 800a6a4:	8a7a      	ldrh	r2, [r7, #18]
 800a6a6:	4b63      	ldr	r3, [pc, #396]	; (800a834 <ThreadMainTask+0x598>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	8a7b      	ldrh	r3, [r7, #18]
 800a6b0:	b2d1      	uxtb	r1, r2
 800a6b2:	4a65      	ldr	r2, [pc, #404]	; (800a848 <ThreadMainTask+0x5ac>)
 800a6b4:	54d1      	strb	r1, [r2, r3]
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a6b6:	8a7b      	ldrh	r3, [r7, #18]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	827b      	strh	r3, [r7, #18]
 800a6bc:	4b5c      	ldr	r3, [pc, #368]	; (800a830 <ThreadMainTask+0x594>)
 800a6be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6c0:	8a7a      	ldrh	r2, [r7, #18]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d3ee      	bcc.n	800a6a4 <ThreadMainTask+0x408>
						}

						calculating_packet_flash_crc = CRC16( (unsigned char*)(&buffer_packet_data_flash[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы записанных данных в память микроконтроллера
 800a6c6:	4b5a      	ldr	r3, [pc, #360]	; (800a830 <ThreadMainTask+0x594>)
 800a6c8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	485e      	ldr	r0, [pc, #376]	; (800a848 <ThreadMainTask+0x5ac>)
 800a6ce:	f004 f93b 	bl	800e948 <CRC16>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4a5d      	ldr	r2, [pc, #372]	; (800a84c <ThreadMainTask+0x5b0>)
 800a6d6:	6013      	str	r3, [r2, #0]

						if( packet_crc == calculating_packet_flash_crc)
 800a6d8:	4b57      	ldr	r3, [pc, #348]	; (800a838 <ThreadMainTask+0x59c>)
 800a6da:	881b      	ldrh	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	4b5b      	ldr	r3, [pc, #364]	; (800a84c <ThreadMainTask+0x5b0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d11b      	bne.n	800a71e <ThreadMainTask+0x482>
						{

						//osThreadResumeAll();

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a6e6:	4b55      	ldr	r3, [pc, #340]	; (800a83c <ThreadMainTask+0x5a0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fb feb6 	bl	8006460 <osMutexWait>

						fm25v02_write(2*WRITE_ARRAY_REG, 0x00); // обнуляем регистр и переменную записи массива
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	f240 2042 	movw	r0, #578	; 0x242
 800a6fa:	f000 ff95 	bl	800b628 <fm25v02_write>
						fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a6fe:	2100      	movs	r1, #0
 800a700:	f240 2043 	movw	r0, #579	; 0x243
 800a704:	f000 ff90 	bl	800b628 <fm25v02_write>
						bootloader_registers.write_array_reg = 0x0000;
 800a708:	4b49      	ldr	r3, [pc, #292]	; (800a830 <ThreadMainTask+0x594>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	865a      	strh	r2, [r3, #50]	; 0x32

						osMutexRelease(Fm25v02MutexHandle);
 800a70e:	4b4b      	ldr	r3, [pc, #300]	; (800a83c <ThreadMainTask+0x5a0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f7fb fef2 	bl	80064fc <osMutexRelease>

						}

					}

				break;
 800a718:	e001      	b.n	800a71e <ThreadMainTask+0x482>

					//LED3_OFF();
					//LED4_OFF();
					//LED5_OFF();

				break;
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <ThreadMainTask+0x484>
				break;
 800a71e:	bf00      	nop
			}

			switch(bootloader_registers.read_array_reg) // чтение массива из памяти контроллера
 800a720:	4b43      	ldr	r3, [pc, #268]	; (800a830 <ThreadMainTask+0x594>)
 800a722:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a724:	2b01      	cmp	r3, #1
 800a726:	f040 8129 	bne.w	800a97c <ThreadMainTask+0x6e0>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a72a:	4b44      	ldr	r3, [pc, #272]	; (800a83c <ThreadMainTask+0x5a0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f04f 31ff 	mov.w	r1, #4294967295
 800a732:	4618      	mov	r0, r3
 800a734:	f7fb fe94 	bl	8006460 <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a738:	f107 030c 	add.w	r3, r7, #12
 800a73c:	4619      	mov	r1, r3
 800a73e:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a742:	f000 ff37 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a746:	f107 030b 	add.w	r3, r7, #11
 800a74a:	4619      	mov	r1, r3
 800a74c:	f240 202d 	movw	r0, #557	; 0x22d
 800a750:	f000 ff30 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a754:	7b3b      	ldrb	r3, [r7, #12]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	b21a      	sxth	r2, r3
 800a75a:	7afb      	ldrb	r3, [r7, #11]
 800a75c:	b21b      	sxth	r3, r3
 800a75e:	4313      	orrs	r3, r2
 800a760:	b21b      	sxth	r3, r3
 800a762:	b29a      	uxth	r2, r3
 800a764:	4b32      	ldr	r3, [pc, #200]	; (800a830 <ThreadMainTask+0x594>)
 800a766:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a768:	f107 030c 	add.w	r3, r7, #12
 800a76c:	4619      	mov	r1, r3
 800a76e:	f240 202e 	movw	r0, #558	; 0x22e
 800a772:	f000 ff1f 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a776:	f107 030b 	add.w	r3, r7, #11
 800a77a:	4619      	mov	r1, r3
 800a77c:	f240 202f 	movw	r0, #559	; 0x22f
 800a780:	f000 ff18 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a784:	7b3b      	ldrb	r3, [r7, #12]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	b21a      	sxth	r2, r3
 800a78a:	7afb      	ldrb	r3, [r7, #11]
 800a78c:	b21b      	sxth	r3, r3
 800a78e:	4313      	orrs	r3, r2
 800a790:	b21b      	sxth	r3, r3
 800a792:	b29a      	uxth	r2, r3
 800a794:	4b26      	ldr	r3, [pc, #152]	; (800a830 <ThreadMainTask+0x594>)
 800a796:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a798:	f107 030c 	add.w	r3, r7, #12
 800a79c:	4619      	mov	r1, r3
 800a79e:	f240 2046 	movw	r0, #582	; 0x246
 800a7a2:	f000 ff07 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a7a6:	f107 030b 	add.w	r3, r7, #11
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	f240 2047 	movw	r0, #583	; 0x247
 800a7b0:	f000 ff00 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a7b4:	7b3b      	ldrb	r3, [r7, #12]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	b21a      	sxth	r2, r3
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	b21b      	sxth	r3, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	b21b      	sxth	r3, r3
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <ThreadMainTask+0x594>)
 800a7c6:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a7c8:	f107 030c 	add.w	r3, r7, #12
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a7d2:	f000 feef 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a7d6:	f107 030b 	add.w	r3, r7, #11
 800a7da:	4619      	mov	r1, r3
 800a7dc:	f240 2049 	movw	r0, #585	; 0x249
 800a7e0:	f000 fee8 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a7e4:	7b3b      	ldrb	r3, [r7, #12]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	b21a      	sxth	r2, r3
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	b21b      	sxth	r3, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	b21b      	sxth	r3, r3
 800a7f2:	b29a      	uxth	r2, r3
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <ThreadMainTask+0x594>)
 800a7f6:	871a      	strh	r2, [r3, #56]	; 0x38

					osMutexRelease(Fm25v02MutexHandle);
 800a7f8:	4b10      	ldr	r3, [pc, #64]	; (800a83c <ThreadMainTask+0x5a0>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fb fe7d 	bl	80064fc <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для чтения данных из памяти контроллера
 800a802:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <ThreadMainTask+0x594>)
 800a804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a806:	061a      	lsls	r2, r3, #24
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <ThreadMainTask+0x594>)
 800a80a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a80c:	041b      	lsls	r3, r3, #16
 800a80e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a812:	431a      	orrs	r2, r3
 800a814:	4b06      	ldr	r3, [pc, #24]	; (800a830 <ThreadMainTask+0x594>)
 800a816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a818:	021b      	lsls	r3, r3, #8
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	431a      	orrs	r2, r3
 800a81e:	4b04      	ldr	r3, [pc, #16]	; (800a830 <ThreadMainTask+0x594>)
 800a820:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a822:	b2db      	uxtb	r3, r3
 800a824:	4313      	orrs	r3, r2
 800a826:	4a03      	ldr	r2, [pc, #12]	; (800a834 <ThreadMainTask+0x598>)
 800a828:	6013      	str	r3, [r2, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a82a:	2300      	movs	r3, #0
 800a82c:	823b      	strh	r3, [r7, #16]
 800a82e:	e039      	b.n	800a8a4 <ThreadMainTask+0x608>
 800a830:	20009d5c 	.word	0x20009d5c
 800a834:	20009904 	.word	0x20009904
 800a838:	20009b1c 	.word	0x20009b1c
 800a83c:	2000957c 	.word	0x2000957c
 800a840:	20009918 	.word	0x20009918
 800a844:	20009b38 	.word	0x20009b38
 800a848:	20009a18 	.word	0x20009a18
 800a84c:	20009b40 	.word	0x20009b40
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a850:	4bad      	ldr	r3, [pc, #692]	; (800ab08 <ThreadMainTask+0x86c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f04f 31ff 	mov.w	r1, #4294967295
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fb fe01 	bl	8006460 <osMutexWait>

						fm25v02_write(2*(PACKET_DATA_0_REG+i), 0x00);
 800a85e:	8a3b      	ldrh	r3, [r7, #16]
 800a860:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a864:	b29b      	uxth	r3, r3
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	b29b      	uxth	r3, r3
 800a86a:	2100      	movs	r1, #0
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 fedb 	bl	800b628 <fm25v02_write>
						fm25v02_write(2*(PACKET_DATA_0_REG+i)+1, *( (uint32_t*)(address_to_read_write+i) ) );
 800a872:	8a3b      	ldrh	r3, [r7, #16]
 800a874:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a878:	b29b      	uxth	r3, r3
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3301      	adds	r3, #1
 800a880:	b298      	uxth	r0, r3
 800a882:	8a3a      	ldrh	r2, [r7, #16]
 800a884:	4ba1      	ldr	r3, [pc, #644]	; (800ab0c <ThreadMainTask+0x870>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	f000 feca 	bl	800b628 <fm25v02_write>

						osMutexRelease(Fm25v02MutexHandle);
 800a894:	4b9c      	ldr	r3, [pc, #624]	; (800ab08 <ThreadMainTask+0x86c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fb fe2f 	bl	80064fc <osMutexRelease>
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a89e:	8a3b      	ldrh	r3, [r7, #16]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	823b      	strh	r3, [r7, #16]
 800a8a4:	4b9a      	ldr	r3, [pc, #616]	; (800ab10 <ThreadMainTask+0x874>)
 800a8a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a8a8:	8a3a      	ldrh	r2, [r7, #16]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d3d0      	bcc.n	800a850 <ThreadMainTask+0x5b4>
					}

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	81fb      	strh	r3, [r7, #14]
 800a8b2:	e020      	b.n	800a8f6 <ThreadMainTask+0x65a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a8b4:	4b94      	ldr	r3, [pc, #592]	; (800ab08 <ThreadMainTask+0x86c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fb fdcf 	bl	8006460 <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a8c2:	89fb      	ldrh	r3, [r7, #14]
 800a8c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f107 020d 	add.w	r2, r7, #13
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 fe6b 	bl	800b5b4 <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a8de:	4b8a      	ldr	r3, [pc, #552]	; (800ab08 <ThreadMainTask+0x86c>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fb fe0a 	bl	80064fc <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a8e8:	89fb      	ldrh	r3, [r7, #14]
 800a8ea:	7b79      	ldrb	r1, [r7, #13]
 800a8ec:	4a89      	ldr	r2, [pc, #548]	; (800ab14 <ThreadMainTask+0x878>)
 800a8ee:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a8f0:	89fb      	ldrh	r3, [r7, #14]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	81fb      	strh	r3, [r7, #14]
 800a8f6:	4b86      	ldr	r3, [pc, #536]	; (800ab10 <ThreadMainTask+0x874>)
 800a8f8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a8fa:	89fa      	ldrh	r2, [r7, #14]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3d9      	bcc.n	800a8b4 <ThreadMainTask+0x618>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a900:	4b83      	ldr	r3, [pc, #524]	; (800ab10 <ThreadMainTask+0x874>)
 800a902:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a904:	4619      	mov	r1, r3
 800a906:	4883      	ldr	r0, [pc, #524]	; (800ab14 <ThreadMainTask+0x878>)
 800a908:	f004 f81e 	bl	800e948 <CRC16>
 800a90c:	4603      	mov	r3, r0
 800a90e:	4a82      	ldr	r2, [pc, #520]	; (800ab18 <ThreadMainTask+0x87c>)
 800a910:	6013      	str	r3, [r2, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a912:	4b7d      	ldr	r3, [pc, #500]	; (800ab08 <ThreadMainTask+0x86c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f04f 31ff 	mov.w	r1, #4294967295
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fb fda0 	bl	8006460 <osMutexWait>

					fm25v02_write(2*PACKET_CRC_HIGH_REG, 0x00);
 800a920:	2100      	movs	r1, #0
 800a922:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a926:	f000 fe7f 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_HIGH_REG+1, (uint8_t)calculating_packet_crc ); //записываем в регистр старший байт контрольной суммы пакета
 800a92a:	4b7b      	ldr	r3, [pc, #492]	; (800ab18 <ThreadMainTask+0x87c>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	4619      	mov	r1, r3
 800a932:	f240 204d 	movw	r0, #589	; 0x24d
 800a936:	f000 fe77 	bl	800b628 <fm25v02_write>

					fm25v02_write(2*PACKET_CRC_LOW_REG, 0x00);
 800a93a:	2100      	movs	r1, #0
 800a93c:	f240 204e 	movw	r0, #590	; 0x24e
 800a940:	f000 fe72 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_LOW_REG+1, (uint8_t)(calculating_packet_crc>>8) ); //записываем в регистр младший байт контрольной суммы пакета
 800a944:	4b74      	ldr	r3, [pc, #464]	; (800ab18 <ThreadMainTask+0x87c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	0a1b      	lsrs	r3, r3, #8
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	4619      	mov	r1, r3
 800a94e:	f240 204f 	movw	r0, #591	; 0x24f
 800a952:	f000 fe69 	bl	800b628 <fm25v02_write>

					fm25v02_write(2*READ_ARRAY_REG, 0x00); // обнуляем регистр и переменную чтения массива
 800a956:	2100      	movs	r1, #0
 800a958:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a95c:	f000 fe64 	bl	800b628 <fm25v02_write>
					fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a960:	2100      	movs	r1, #0
 800a962:	f240 2045 	movw	r0, #581	; 0x245
 800a966:	f000 fe5f 	bl	800b628 <fm25v02_write>
					bootloader_registers.read_array_reg = 0x0000;
 800a96a:	4b69      	ldr	r3, [pc, #420]	; (800ab10 <ThreadMainTask+0x874>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800a970:	4b65      	ldr	r3, [pc, #404]	; (800ab08 <ThreadMainTask+0x86c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f7fb fdc1 	bl	80064fc <osMutexRelease>

				break;
 800a97a:	bf00      	nop
			}

			switch(bootloader_registers.clear_page_on_reg) // очистка указанной страницы памяти контроллера
 800a97c:	4b64      	ldr	r3, [pc, #400]	; (800ab10 <ThreadMainTask+0x874>)
 800a97e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a980:	2b01      	cmp	r3, #1
 800a982:	f040 809e 	bne.w	800aac2 <ThreadMainTask+0x826>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a986:	4b60      	ldr	r3, [pc, #384]	; (800ab08 <ThreadMainTask+0x86c>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f04f 31ff 	mov.w	r1, #4294967295
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fb fd66 	bl	8006460 <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &temp_reg_h1);
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	4619      	mov	r1, r3
 800a99a:	f240 203e 	movw	r0, #574	; 0x23e
 800a99e:	f000 fe09 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &temp_reg_l1);
 800a9a2:	f107 030b 	add.w	r3, r7, #11
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	f240 203f 	movw	r0, #575	; 0x23f
 800a9ac:	f000 fe02 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.clear_page_number_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a9b0:	7b3b      	ldrb	r3, [r7, #12]
 800a9b2:	021b      	lsls	r3, r3, #8
 800a9b4:	b21a      	sxth	r2, r3
 800a9b6:	7afb      	ldrb	r3, [r7, #11]
 800a9b8:	b21b      	sxth	r3, r3
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	b21b      	sxth	r3, r3
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	4b53      	ldr	r3, [pc, #332]	; (800ab10 <ThreadMainTask+0x874>)
 800a9c2:	85da      	strh	r2, [r3, #46]	; 0x2e

					osMutexRelease(Fm25v02MutexHandle);
 800a9c4:	4b50      	ldr	r3, [pc, #320]	; (800ab08 <ThreadMainTask+0x86c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fb fd97 	bl	80064fc <osMutexRelease>

					erase_init.TypeErase = FLASH_TYPEERASE_SECTORS; // заполняем структуру с параметрами очистки памяти
 800a9ce:	4b53      	ldr	r3, [pc, #332]	; (800ab1c <ThreadMainTask+0x880>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	601a      	str	r2, [r3, #0]
					erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800a9d4:	4b51      	ldr	r3, [pc, #324]	; (800ab1c <ThreadMainTask+0x880>)
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	611a      	str	r2, [r3, #16]
					erase_init.Sector = bootloader_registers.clear_page_number_reg;
 800a9da:	4b4d      	ldr	r3, [pc, #308]	; (800ab10 <ThreadMainTask+0x874>)
 800a9dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9de:	461a      	mov	r2, r3
 800a9e0:	4b4e      	ldr	r3, [pc, #312]	; (800ab1c <ThreadMainTask+0x880>)
 800a9e2:	609a      	str	r2, [r3, #8]
					erase_init.NbSectors = 1;
 800a9e4:	4b4d      	ldr	r3, [pc, #308]	; (800ab1c <ThreadMainTask+0x880>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	60da      	str	r2, [r3, #12]
					erase_init.Banks = 1;
 800a9ea:	4b4c      	ldr	r3, [pc, #304]	; (800ab1c <ThreadMainTask+0x880>)
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	605a      	str	r2, [r3, #4]

					//osThreadSuspendAll();
					taskENTER_CRITICAL();
 800a9f0:	f7fe ff28 	bl	8009844 <vPortEnterCritical>

					HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a9f4:	f7f7 fd34 	bl	8002460 <HAL_FLASH_Unlock>

					while( HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK ) // выполняем очистку указанной страницы памяти
 800a9f8:	bf00      	nop
 800a9fa:	4949      	ldr	r1, [pc, #292]	; (800ab20 <ThreadMainTask+0x884>)
 800a9fc:	4847      	ldr	r0, [pc, #284]	; (800ab1c <ThreadMainTask+0x880>)
 800a9fe:	f7f7 fe91 	bl	8002724 <HAL_FLASHEx_Erase>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1f8      	bne.n	800a9fa <ThreadMainTask+0x75e>
					{

					}

					HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800aa08:	f7f7 fd4c 	bl	80024a4 <HAL_FLASH_Lock>

					taskEXIT_CRITICAL();
 800aa0c:	f7fe ff4a 	bl	80098a4 <vPortExitCritical>
					//osThreadResumeAll();

					if(sector_error != 0xFFFFFFFF) // если произошла ошибка очистки сектора памяти
 800aa10:	4b43      	ldr	r3, [pc, #268]	; (800ab20 <ThreadMainTask+0x884>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa18:	d152      	bne.n	800aac0 <ThreadMainTask+0x824>
					{
						// здесь должен быть обработчик ошибки очистки сектора памяти
					}

					else if( sector_error == 0xFFFFFFFF ) // если не произошло ошибок памяти, то обнуляем регистр и переменную для стирания
 800aa1a:	4b41      	ldr	r3, [pc, #260]	; (800ab20 <ThreadMainTask+0x884>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa22:	d14d      	bne.n	800aac0 <ThreadMainTask+0x824>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aa24:	4b38      	ldr	r3, [pc, #224]	; (800ab08 <ThreadMainTask+0x86c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f04f 31ff 	mov.w	r1, #4294967295
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fb fd17 	bl	8006460 <osMutexWait>

						fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00); // обнуляем регистр и переменную очистки страницы
 800aa32:	2100      	movs	r1, #0
 800aa34:	f44f 7010 	mov.w	r0, #576	; 0x240
 800aa38:	f000 fdf6 	bl	800b628 <fm25v02_write>
						fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	f240 2041 	movw	r0, #577	; 0x241
 800aa42:	f000 fdf1 	bl	800b628 <fm25v02_write>
						bootloader_registers.clear_page_on_reg = 0x0000;
 800aa46:	4b32      	ldr	r3, [pc, #200]	; (800ab10 <ThreadMainTask+0x874>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	861a      	strh	r2, [r3, #48]	; 0x30

						osMutexRelease(Fm25v02MutexHandle);
 800aa4c:	4b2e      	ldr	r3, [pc, #184]	; (800ab08 <ThreadMainTask+0x86c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7fb fd53 	bl	80064fc <osMutexRelease>
					}

				break;
 800aa56:	e033      	b.n	800aac0 <ThreadMainTask+0x824>
			}

		}

		else if(bootloader_registers.working_mode_reg == 0) // если включен режим работы
 800aa58:	4b2d      	ldr	r3, [pc, #180]	; (800ab10 <ThreadMainTask+0x874>)
 800aa5a:	8b9b      	ldrh	r3, [r3, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d130      	bne.n	800aac2 <ThreadMainTask+0x826>
		{

			if(bootloader_registers.ready_download_reg != 0x0000)
 800aa60:	4b2b      	ldr	r3, [pc, #172]	; (800ab10 <ThreadMainTask+0x874>)
 800aa62:	8bdb      	ldrh	r3, [r3, #30]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d018      	beq.n	800aa9a <ThreadMainTask+0x7fe>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aa68:	4b27      	ldr	r3, [pc, #156]	; (800ab08 <ThreadMainTask+0x86c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f04f 31ff 	mov.w	r1, #4294967295
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fb fcf5 	bl	8006460 <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // сбрасываем регистр готовности к загрузке прошивки
 800aa76:	2100      	movs	r1, #0
 800aa78:	f44f 7008 	mov.w	r0, #544	; 0x220
 800aa7c:	f000 fdd4 	bl	800b628 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x00);
 800aa80:	2100      	movs	r1, #0
 800aa82:	f240 2021 	movw	r0, #545	; 0x221
 800aa86:	f000 fdcf 	bl	800b628 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0000;
 800aa8a:	4b21      	ldr	r3, [pc, #132]	; (800ab10 <ThreadMainTask+0x874>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800aa90:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <ThreadMainTask+0x86c>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fb fd31 	bl	80064fc <osMutexRelease>
			}

			if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 800aa9a:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <ThreadMainTask+0x874>)
 800aa9c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800aa9e:	4b1c      	ldr	r3, [pc, #112]	; (800ab10 <ThreadMainTask+0x874>)
 800aaa0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d20d      	bcs.n	800aac2 <ThreadMainTask+0x826>
			{
				osDelay(5000); // добавил задержку для теста, чтобы устройство успело отправить значение регистра номер 289, после записи
 800aaa6:	f241 3088 	movw	r0, #5000	; 0x1388
 800aaaa:	f7fb fbf8 	bl	800629e <osDelay>
				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800aaae:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <ThreadMainTask+0x86c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f04f 31ff 	mov.w	r1, #4294967295
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fb fcd2 	bl	8006460 <osMutexWait>
				NVIC_SystemReset();
 800aabc:	f7ff fbd8 	bl	800a270 <__NVIC_SystemReset>
				break;
 800aac0:	bf00      	nop

			}
		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800aac2:	4b18      	ldr	r3, [pc, #96]	; (800ab24 <ThreadMainTask+0x888>)
 800aac4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d12e      	bne.n	800ab28 <ThreadMainTask+0x88c>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aaca:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <ThreadMainTask+0x86c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f04f 31ff 	mov.w	r1, #4294967295
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fb fcc4 	bl	8006460 <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800aad8:	2100      	movs	r1, #0
 800aada:	f242 105a 	movw	r0, #8538	; 0x215a
 800aade:	f000 fda3 	bl	800b628 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800aae2:	2100      	movs	r1, #0
 800aae4:	f242 105b 	movw	r0, #8539	; 0x215b
 800aae8:	f000 fd9e 	bl	800b628 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <ThreadMainTask+0x86c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fb fd03 	bl	80064fc <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800aaf6:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <ThreadMainTask+0x86c>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f04f 31ff 	mov.w	r1, #4294967295
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fb fcae 	bl	8006460 <osMutexWait>
				NVIC_SystemReset();
 800ab04:	f7ff fbb4 	bl	800a270 <__NVIC_SystemReset>
 800ab08:	2000957c 	.word	0x2000957c
 800ab0c:	20009904 	.word	0x20009904
 800ab10:	20009d5c 	.word	0x20009d5c
 800ab14:	20009918 	.word	0x20009918
 800ab18:	20009b38 	.word	0x20009b38
 800ab1c:	20009b20 	.word	0x20009b20
 800ab20:	2000990c 	.word	0x2000990c
 800ab24:	20009e88 	.word	0x20009e88



		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);

		if( modem_reset_state == 1)
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <ThreadMainTask+0x8cc>)
 800ab2a:	781b      	ldrb	r3, [r3, #0]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d116      	bne.n	800ab60 <ThreadMainTask+0x8c4>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800ab32:	4b0e      	ldr	r3, [pc, #56]	; (800ab6c <ThreadMainTask+0x8d0>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f04f 31ff 	mov.w	r1, #4294967295
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fb fc90 	bl	8006460 <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <ThreadMainTask+0x8d4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fb feaf 	bl	80068a8 <osThreadSuspend>
			modem_reset_state = 0;
 800ab4a:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <ThreadMainTask+0x8cc>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
			//AT_QPOWD(0);
			m95_power_off();
 800ab50:	f000 feb0 	bl	800b8b4 <m95_power_off>
			HAL_Delay(5000);
 800ab54:	f241 3088 	movw	r0, #5000	; 0x1388
 800ab58:	f7f6 fe96 	bl	8001888 <HAL_Delay>
			NVIC_SystemReset();
 800ab5c:	f7ff fb88 	bl	800a270 <__NVIC_SystemReset>
		}


		osDelay(10);
 800ab60:	200a      	movs	r0, #10
 800ab62:	f7fb fb9c 	bl	800629e <osDelay>
		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800ab66:	e44d      	b.n	800a404 <ThreadMainTask+0x168>
 800ab68:	2000080d 	.word	0x2000080d
 800ab6c:	2000957c 	.word	0x2000957c
 800ab70:	20009550 	.word	0x20009550

0800ab74 <ThreadModbusPacketTask>:
extern bootloader_register_struct bootloader_registers;



void ThreadModbusPacketTask(void const * argument)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	uint8_t temp_reg_h;
	uint8_t temp_reg_l;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800ab7c:	4b8a      	ldr	r3, [pc, #552]	; (800ada8 <ThreadModbusPacketTask+0x234>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f04f 31ff 	mov.w	r1, #4294967295
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fb fd2f 	bl	80065e8 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800ab8a:	4b87      	ldr	r3, [pc, #540]	; (800ada8 <ThreadModbusPacketTask+0x234>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f04f 31ff 	mov.w	r1, #4294967295
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fb fd28 	bl	80065e8 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 800ab98:	4b84      	ldr	r3, [pc, #528]	; (800adac <ThreadModbusPacketTask+0x238>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4a84      	ldr	r2, [pc, #528]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800ab9e:	021b      	lsls	r3, r3, #8
 800aba0:	4413      	add	r3, r2
 800aba2:	3301      	adds	r3, #1
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d003      	beq.n	800abb2 <ThreadModbusPacketTask+0x3e>
 800abaa:	2b10      	cmp	r3, #16
 800abac:	f000 80b2 	beq.w	800ad14 <ThreadModbusPacketTask+0x1a0>
 800abb0:	e267      	b.n	800b082 <ThreadModbusPacketTask+0x50e>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 800abb2:	4b7e      	ldr	r3, [pc, #504]	; (800adac <ThreadModbusPacketTask+0x238>)
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	4a7e      	ldr	r2, [pc, #504]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	4413      	add	r3, r2
 800abbc:	3302      	adds	r3, #2
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	b21a      	sxth	r2, r3
 800abc4:	4b79      	ldr	r3, [pc, #484]	; (800adac <ThreadModbusPacketTask+0x238>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	4979      	ldr	r1, [pc, #484]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800abca:	021b      	lsls	r3, r3, #8
 800abcc:	440b      	add	r3, r1
 800abce:	3303      	adds	r3, #3
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	b21b      	sxth	r3, r3
 800abd4:	4313      	orrs	r3, r2
 800abd6:	b21b      	sxth	r3, r3
 800abd8:	b29a      	uxth	r2, r3
 800abda:	4b76      	ldr	r3, [pc, #472]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800abdc:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800abde:	4b73      	ldr	r3, [pc, #460]	; (800adac <ThreadModbusPacketTask+0x238>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	4a73      	ldr	r2, [pc, #460]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800abe4:	021b      	lsls	r3, r3, #8
 800abe6:	4413      	add	r3, r2
 800abe8:	3304      	adds	r3, #4
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	b21a      	sxth	r2, r3
 800abf0:	4b6e      	ldr	r3, [pc, #440]	; (800adac <ThreadModbusPacketTask+0x238>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	496e      	ldr	r1, [pc, #440]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	440b      	add	r3, r1
 800abfa:	3305      	adds	r3, #5
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	4313      	orrs	r3, r2
 800ac02:	b21b      	sxth	r3, r3
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	4b6c      	ldr	r3, [pc, #432]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ac08:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ac0a:	4b6c      	ldr	r3, [pc, #432]	; (800adbc <ThreadModbusPacketTask+0x248>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f04f 31ff 	mov.w	r1, #4294967295
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fb fc24 	bl	8006460 <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 800ac18:	4b66      	ldr	r3, [pc, #408]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	b298      	uxth	r0, r3
 800ac20:	4b65      	ldr	r3, [pc, #404]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4965      	ldr	r1, [pc, #404]	; (800adc0 <ThreadModbusPacketTask+0x24c>)
 800ac2c:	f000 fd6c 	bl	800b708 <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 800ac30:	4b62      	ldr	r3, [pc, #392]	; (800adbc <ThreadModbusPacketTask+0x248>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fb fc61 	bl	80064fc <osMutexRelease>

				buf_out1[0] = 0x01;
 800ac3a:	4b62      	ldr	r3, [pc, #392]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 800ac40:	4b60      	ldr	r3, [pc, #384]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac42:	2203      	movs	r2, #3
 800ac44:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 800ac46:	4b5c      	ldr	r3, [pc, #368]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	4b5c      	ldr	r3, [pc, #368]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac52:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
 800ac58:	e015      	b.n	800ac86 <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	005a      	lsls	r2, r3, #1
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	3303      	adds	r3, #3
 800ac64:	4956      	ldr	r1, [pc, #344]	; (800adc0 <ThreadModbusPacketTask+0x24c>)
 800ac66:	5c89      	ldrb	r1, [r1, r2]
 800ac68:	4a56      	ldr	r2, [pc, #344]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac6a:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	005b      	lsls	r3, r3, #1
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	3302      	adds	r3, #2
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	4951      	ldr	r1, [pc, #324]	; (800adc0 <ThreadModbusPacketTask+0x24c>)
 800ac7a:	5c89      	ldrb	r1, [r1, r2]
 800ac7c:	4a51      	ldr	r2, [pc, #324]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac7e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	3301      	adds	r3, #1
 800ac84:	73fb      	strb	r3, [r7, #15]
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	4b4b      	ldr	r3, [pc, #300]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3e3      	bcc.n	800ac5a <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 800ac92:	4b49      	ldr	r3, [pc, #292]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	3303      	adds	r3, #3
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4849      	ldr	r0, [pc, #292]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800ac9e:	f003 fe53 	bl	800e948 <CRC16>
 800aca2:	4603      	mov	r3, r0
 800aca4:	4a48      	ldr	r2, [pc, #288]	; (800adc8 <ThreadModbusPacketTask+0x254>)
 800aca6:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 800aca8:	4b47      	ldr	r3, [pc, #284]	; (800adc8 <ThreadModbusPacketTask+0x254>)
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	4b42      	ldr	r3, [pc, #264]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800acae:	881b      	ldrh	r3, [r3, #0]
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	3303      	adds	r3, #3
 800acb4:	b2d1      	uxtb	r1, r2
 800acb6:	4a43      	ldr	r2, [pc, #268]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800acb8:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 800acba:	4b43      	ldr	r3, [pc, #268]	; (800adc8 <ThreadModbusPacketTask+0x254>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	0a1a      	lsrs	r2, r3, #8
 800acc0:	4b3d      	ldr	r3, [pc, #244]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	3302      	adds	r3, #2
 800acc6:	005b      	lsls	r3, r3, #1
 800acc8:	b2d1      	uxtb	r1, r2
 800acca:	4a3e      	ldr	r2, [pc, #248]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800accc:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 800acce:	4b3f      	ldr	r3, [pc, #252]	; (800adcc <ThreadModbusPacketTask+0x258>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f04f 31ff 	mov.w	r1, #4294967295
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fb fbc2 	bl	8006460 <osMutexWait>
				if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 800acdc:	4b36      	ldr	r3, [pc, #216]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800acde:	881b      	ldrh	r3, [r3, #0]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3305      	adds	r3, #5
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	4619      	mov	r1, r3
 800acea:	4836      	ldr	r0, [pc, #216]	; (800adc4 <ThreadModbusPacketTask+0x250>)
 800acec:	f001 fbf6 	bl	800c4dc <AT_QISEND>
				{

				}
				osMutexRelease(UartMutexHandle);
 800acf0:	4b36      	ldr	r3, [pc, #216]	; (800adcc <ThreadModbusPacketTask+0x258>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fb fc01 	bl	80064fc <osMutexRelease>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 800acfa:	4b2e      	ldr	r3, [pc, #184]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad02:	f040 81bd 	bne.w	800b080 <ThreadModbusPacketTask+0x50c>
				{
					osTimerStart(Ring_Center_TimerHandle, 120000); // поправил время для таймера перезагрузки
 800ad06:	4b32      	ldr	r3, [pc, #200]	; (800add0 <ThreadModbusPacketTask+0x25c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4932      	ldr	r1, [pc, #200]	; (800add4 <ThreadModbusPacketTask+0x260>)
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7fb fb0f 	bl	8006330 <osTimerStart>
				}


			break;
 800ad12:	e1b5      	b.n	800b080 <ThreadModbusPacketTask+0x50c>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 800ad14:	4b25      	ldr	r3, [pc, #148]	; (800adac <ThreadModbusPacketTask+0x238>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	4a25      	ldr	r2, [pc, #148]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800ad1a:	021b      	lsls	r3, r3, #8
 800ad1c:	4413      	add	r3, r2
 800ad1e:	3302      	adds	r3, #2
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	021b      	lsls	r3, r3, #8
 800ad24:	b21a      	sxth	r2, r3
 800ad26:	4b21      	ldr	r3, [pc, #132]	; (800adac <ThreadModbusPacketTask+0x238>)
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	4921      	ldr	r1, [pc, #132]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800ad2c:	021b      	lsls	r3, r3, #8
 800ad2e:	440b      	add	r3, r1
 800ad30:	3303      	adds	r3, #3
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	b21b      	sxth	r3, r3
 800ad36:	4313      	orrs	r3, r2
 800ad38:	b21b      	sxth	r3, r3
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	4b1d      	ldr	r3, [pc, #116]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ad3e:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800ad40:	4b1a      	ldr	r3, [pc, #104]	; (800adac <ThreadModbusPacketTask+0x238>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4a1a      	ldr	r2, [pc, #104]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800ad46:	021b      	lsls	r3, r3, #8
 800ad48:	4413      	add	r3, r2
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	b21a      	sxth	r2, r3
 800ad52:	4b16      	ldr	r3, [pc, #88]	; (800adac <ThreadModbusPacketTask+0x238>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	4916      	ldr	r1, [pc, #88]	; (800adb0 <ThreadModbusPacketTask+0x23c>)
 800ad58:	021b      	lsls	r3, r3, #8
 800ad5a:	440b      	add	r3, r1
 800ad5c:	3305      	adds	r3, #5
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b21b      	sxth	r3, r3
 800ad62:	4313      	orrs	r3, r2
 800ad64:	b21b      	sxth	r3, r3
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	4b13      	ldr	r3, [pc, #76]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ad6a:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 800ad6c:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad74:	d306      	bcc.n	800ad84 <ThreadModbusPacketTask+0x210>
 800ad76:	4b0f      	ldr	r3, [pc, #60]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	f241 028f 	movw	r2, #4239	; 0x108f
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	f240 8177 	bls.w	800b072 <ThreadModbusPacketTask+0x4fe>
 800ad84:	4b0b      	ldr	r3, [pc, #44]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8c:	d209      	bcs.n	800ada2 <ThreadModbusPacketTask+0x22e>
 800ad8e:	4b09      	ldr	r3, [pc, #36]	; (800adb4 <ThreadModbusPacketTask+0x240>)
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	461a      	mov	r2, r3
 800ad94:	4b08      	ldr	r3, [pc, #32]	; (800adb8 <ThreadModbusPacketTask+0x244>)
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad9e:	f300 8168 	bgt.w	800b072 <ThreadModbusPacketTask+0x4fe>
				{

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800ada2:	2300      	movs	r3, #0
 800ada4:	73bb      	strb	r3, [r7, #14]
 800ada6:	e054      	b.n	800ae52 <ThreadModbusPacketTask+0x2de>
 800ada8:	20009554 	.word	0x20009554
 800adac:	20007f9d 	.word	0x20007f9d
 800adb0:	200080c0 	.word	0x200080c0
 800adb4:	20009d48 	.word	0x20009d48
 800adb8:	20009d4a 	.word	0x20009d4a
 800adbc:	2000957c 	.word	0x2000957c
 800adc0:	20009c48 	.word	0x20009c48
 800adc4:	20009b48 	.word	0x20009b48
 800adc8:	20009d58 	.word	0x20009d58
 800adcc:	200094d0 	.word	0x200094d0
 800add0:	200094d4 	.word	0x200094d4
 800add4:	0001d4c0 	.word	0x0001d4c0
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800add8:	4bac      	ldr	r3, [pc, #688]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f04f 31ff 	mov.w	r1, #4294967295
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fb fb3d 	bl	8006460 <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 800ade6:	4baa      	ldr	r3, [pc, #680]	; (800b090 <ThreadModbusPacketTask+0x51c>)
 800ade8:	881b      	ldrh	r3, [r3, #0]
 800adea:	461a      	mov	r2, r3
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	4413      	add	r3, r2
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	005b      	lsls	r3, r3, #1
 800adf4:	b298      	uxth	r0, r3
 800adf6:	4ba7      	ldr	r3, [pc, #668]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	3307      	adds	r3, #7
 800ae02:	0212      	lsls	r2, r2, #8
 800ae04:	4413      	add	r3, r2
 800ae06:	4aa4      	ldr	r2, [pc, #656]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800ae08:	4413      	add	r3, r2
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f000 fc57 	bl	800b6c0 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 800ae12:	4b9f      	ldr	r3, [pc, #636]	; (800b090 <ThreadModbusPacketTask+0x51c>)
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	461a      	mov	r2, r3
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	3301      	adds	r3, #1
 800ae24:	b298      	uxth	r0, r3
 800ae26:	4b9b      	ldr	r3, [pc, #620]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	005b      	lsls	r3, r3, #1
 800ae32:	0212      	lsls	r2, r2, #8
 800ae34:	4413      	add	r3, r2
 800ae36:	4a98      	ldr	r2, [pc, #608]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800ae38:	4413      	add	r3, r2
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f000 fc3f 	bl	800b6c0 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 800ae42:	4b92      	ldr	r3, [pc, #584]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fb fb58 	bl	80064fc <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	73bb      	strb	r3, [r7, #14]
 800ae52:	4b90      	ldr	r3, [pc, #576]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	4a90      	ldr	r2, [pc, #576]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	4413      	add	r3, r2
 800ae5c:	3306      	adds	r3, #6
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	085b      	lsrs	r3, r3, #1
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	7bba      	ldrb	r2, [r7, #14]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d3b6      	bcc.n	800add8 <ThreadModbusPacketTask+0x264>
					}

					buf_out1[0] = 0x01;
 800ae6a:	4b8c      	ldr	r3, [pc, #560]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 800ae70:	4b8a      	ldr	r3, [pc, #552]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800ae72:	2210      	movs	r2, #16
 800ae74:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 800ae76:	4b87      	ldr	r3, [pc, #540]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	4a87      	ldr	r2, [pc, #540]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800ae7c:	021b      	lsls	r3, r3, #8
 800ae7e:	4413      	add	r3, r2
 800ae80:	3302      	adds	r3, #2
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	4b85      	ldr	r3, [pc, #532]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800ae86:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 800ae88:	4b82      	ldr	r3, [pc, #520]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	4a82      	ldr	r2, [pc, #520]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	4413      	add	r3, r2
 800ae92:	3303      	adds	r3, #3
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	4b81      	ldr	r3, [pc, #516]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800ae98:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 800ae9a:	4b7e      	ldr	r3, [pc, #504]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	4a7e      	ldr	r2, [pc, #504]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	4413      	add	r3, r2
 800aea4:	3304      	adds	r3, #4
 800aea6:	781a      	ldrb	r2, [r3, #0]
 800aea8:	4b7c      	ldr	r3, [pc, #496]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800aeaa:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 800aeac:	4b79      	ldr	r3, [pc, #484]	; (800b094 <ThreadModbusPacketTask+0x520>)
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4a79      	ldr	r2, [pc, #484]	; (800b098 <ThreadModbusPacketTask+0x524>)
 800aeb2:	021b      	lsls	r3, r3, #8
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3305      	adds	r3, #5
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	4b78      	ldr	r3, [pc, #480]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800aebc:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 800aebe:	2106      	movs	r1, #6
 800aec0:	4876      	ldr	r0, [pc, #472]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800aec2:	f003 fd41 	bl	800e948 <CRC16>
 800aec6:	4603      	mov	r3, r0
 800aec8:	4a75      	ldr	r2, [pc, #468]	; (800b0a0 <ThreadModbusPacketTask+0x52c>)
 800aeca:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 800aecc:	4b74      	ldr	r3, [pc, #464]	; (800b0a0 <ThreadModbusPacketTask+0x52c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	4b72      	ldr	r3, [pc, #456]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800aed4:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 800aed6:	4b72      	ldr	r3, [pc, #456]	; (800b0a0 <ThreadModbusPacketTask+0x52c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	0a1b      	lsrs	r3, r3, #8
 800aedc:	b2da      	uxtb	r2, r3
 800aede:	4b6f      	ldr	r3, [pc, #444]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800aee0:	71da      	strb	r2, [r3, #7]


					osMutexWait(Fm25v02MutexHandle, osWaitForever); // читаем значения регистров
 800aee2:	4b6a      	ldr	r3, [pc, #424]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f04f 31ff 	mov.w	r1, #4294967295
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fb fab8 	bl	8006460 <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800aef0:	f107 030d 	add.w	r3, r7, #13
 800aef4:	4619      	mov	r1, r3
 800aef6:	f44f 7010 	mov.w	r0, #576	; 0x240
 800aefa:	f000 fb5b 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800aefe:	f107 030c 	add.w	r3, r7, #12
 800af02:	4619      	mov	r1, r3
 800af04:	f240 2041 	movw	r0, #577	; 0x241
 800af08:	f000 fb54 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800af0c:	7b7b      	ldrb	r3, [r7, #13]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	b21a      	sxth	r2, r3
 800af12:	7b3b      	ldrb	r3, [r7, #12]
 800af14:	b21b      	sxth	r3, r3
 800af16:	4313      	orrs	r3, r2
 800af18:	b21b      	sxth	r3, r3
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	4b61      	ldr	r3, [pc, #388]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800af1e:	861a      	strh	r2, [r3, #48]	; 0x30

					fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800af20:	f107 030d 	add.w	r3, r7, #13
 800af24:	4619      	mov	r1, r3
 800af26:	f240 2042 	movw	r0, #578	; 0x242
 800af2a:	f000 fb43 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800af2e:	f107 030c 	add.w	r3, r7, #12
 800af32:	4619      	mov	r1, r3
 800af34:	f240 2043 	movw	r0, #579	; 0x243
 800af38:	f000 fb3c 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800af3c:	7b7b      	ldrb	r3, [r7, #13]
 800af3e:	021b      	lsls	r3, r3, #8
 800af40:	b21a      	sxth	r2, r3
 800af42:	7b3b      	ldrb	r3, [r7, #12]
 800af44:	b21b      	sxth	r3, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	b21b      	sxth	r3, r3
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	4b55      	ldr	r3, [pc, #340]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800af4e:	865a      	strh	r2, [r3, #50]	; 0x32

					fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800af50:	f107 030d 	add.w	r3, r7, #13
 800af54:	4619      	mov	r1, r3
 800af56:	f44f 7011 	mov.w	r0, #580	; 0x244
 800af5a:	f000 fb2b 	bl	800b5b4 <fm25v02_read>
					fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800af5e:	f107 030c 	add.w	r3, r7, #12
 800af62:	4619      	mov	r1, r3
 800af64:	f240 2045 	movw	r0, #581	; 0x245
 800af68:	f000 fb24 	bl	800b5b4 <fm25v02_read>
					bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800af6c:	7b7b      	ldrb	r3, [r7, #13]
 800af6e:	021b      	lsls	r3, r3, #8
 800af70:	b21a      	sxth	r2, r3
 800af72:	7b3b      	ldrb	r3, [r7, #12]
 800af74:	b21b      	sxth	r3, r3
 800af76:	4313      	orrs	r3, r2
 800af78:	b21b      	sxth	r3, r3
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b49      	ldr	r3, [pc, #292]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800af7e:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800af80:	4b42      	ldr	r3, [pc, #264]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f7fb fab9 	bl	80064fc <osMutexRelease>

					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800af8a:	e056      	b.n	800b03a <ThreadModbusPacketTask+0x4c6>
					{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800af8c:	4b3f      	ldr	r3, [pc, #252]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f04f 31ff 	mov.w	r1, #4294967295
 800af94:	4618      	mov	r0, r3
 800af96:	f7fb fa63 	bl	8006460 <osMutexWait>

						fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800af9a:	f107 030d 	add.w	r3, r7, #13
 800af9e:	4619      	mov	r1, r3
 800afa0:	f44f 7010 	mov.w	r0, #576	; 0x240
 800afa4:	f000 fb06 	bl	800b5b4 <fm25v02_read>
						fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800afa8:	f107 030c 	add.w	r3, r7, #12
 800afac:	4619      	mov	r1, r3
 800afae:	f240 2041 	movw	r0, #577	; 0x241
 800afb2:	f000 faff 	bl	800b5b4 <fm25v02_read>
						bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800afb6:	7b7b      	ldrb	r3, [r7, #13]
 800afb8:	021b      	lsls	r3, r3, #8
 800afba:	b21a      	sxth	r2, r3
 800afbc:	7b3b      	ldrb	r3, [r7, #12]
 800afbe:	b21b      	sxth	r3, r3
 800afc0:	4313      	orrs	r3, r2
 800afc2:	b21b      	sxth	r3, r3
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	4b37      	ldr	r3, [pc, #220]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800afc8:	861a      	strh	r2, [r3, #48]	; 0x30

						fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800afca:	f107 030d 	add.w	r3, r7, #13
 800afce:	4619      	mov	r1, r3
 800afd0:	f240 2042 	movw	r0, #578	; 0x242
 800afd4:	f000 faee 	bl	800b5b4 <fm25v02_read>
						fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800afd8:	f107 030c 	add.w	r3, r7, #12
 800afdc:	4619      	mov	r1, r3
 800afde:	f240 2043 	movw	r0, #579	; 0x243
 800afe2:	f000 fae7 	bl	800b5b4 <fm25v02_read>
						bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800afe6:	7b7b      	ldrb	r3, [r7, #13]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	b21a      	sxth	r2, r3
 800afec:	7b3b      	ldrb	r3, [r7, #12]
 800afee:	b21b      	sxth	r3, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b21b      	sxth	r3, r3
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	4b2b      	ldr	r3, [pc, #172]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800aff8:	865a      	strh	r2, [r3, #50]	; 0x32

						fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800affa:	f107 030d 	add.w	r3, r7, #13
 800affe:	4619      	mov	r1, r3
 800b000:	f44f 7011 	mov.w	r0, #580	; 0x244
 800b004:	f000 fad6 	bl	800b5b4 <fm25v02_read>
						fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800b008:	f107 030c 	add.w	r3, r7, #12
 800b00c:	4619      	mov	r1, r3
 800b00e:	f240 2045 	movw	r0, #581	; 0x245
 800b012:	f000 facf 	bl	800b5b4 <fm25v02_read>
						bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800b016:	7b7b      	ldrb	r3, [r7, #13]
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	b21a      	sxth	r2, r3
 800b01c:	7b3b      	ldrb	r3, [r7, #12]
 800b01e:	b21b      	sxth	r3, r3
 800b020:	4313      	orrs	r3, r2
 800b022:	b21b      	sxth	r3, r3
 800b024:	b29a      	uxth	r2, r3
 800b026:	4b1f      	ldr	r3, [pc, #124]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800b028:	869a      	strh	r2, [r3, #52]	; 0x34

						osMutexRelease(Fm25v02MutexHandle);
 800b02a:	4b18      	ldr	r3, [pc, #96]	; (800b08c <ThreadModbusPacketTask+0x518>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fb fa64 	bl	80064fc <osMutexRelease>

						osDelay(1);
 800b034:	2001      	movs	r0, #1
 800b036:	f7fb f932 	bl	800629e <osDelay>
					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800b03a:	4b1a      	ldr	r3, [pc, #104]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800b03c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d0a4      	beq.n	800af8c <ThreadModbusPacketTask+0x418>
 800b042:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800b044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b046:	2b01      	cmp	r3, #1
 800b048:	d0a0      	beq.n	800af8c <ThreadModbusPacketTask+0x418>
 800b04a:	4b16      	ldr	r3, [pc, #88]	; (800b0a4 <ThreadModbusPacketTask+0x530>)
 800b04c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d09c      	beq.n	800af8c <ThreadModbusPacketTask+0x418>

					}


					osMutexWait(UartMutexHandle, osWaitForever);
 800b052:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <ThreadModbusPacketTask+0x534>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f04f 31ff 	mov.w	r1, #4294967295
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fb fa00 	bl	8006460 <osMutexWait>
					if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
 800b060:	2108      	movs	r1, #8
 800b062:	480e      	ldr	r0, [pc, #56]	; (800b09c <ThreadModbusPacketTask+0x528>)
 800b064:	f001 fa3a 	bl	800c4dc <AT_QISEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 800b068:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <ThreadModbusPacketTask+0x534>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7fb fa45 	bl	80064fc <osMutexRelease>

				}

				osTimerStart(Ring_Center_TimerHandle, 120000); // поправил время для таймера перезагрузки
 800b072:	4b0e      	ldr	r3, [pc, #56]	; (800b0ac <ThreadModbusPacketTask+0x538>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	490e      	ldr	r1, [pc, #56]	; (800b0b0 <ThreadModbusPacketTask+0x53c>)
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fb f959 	bl	8006330 <osTimerStart>


			break;
 800b07e:	e000      	b.n	800b082 <ThreadModbusPacketTask+0x50e>
			break;
 800b080:	bf00      	nop
		}


		osDelay(1);
 800b082:	2001      	movs	r0, #1
 800b084:	f7fb f90b 	bl	800629e <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800b088:	e57f      	b.n	800ab8a <ThreadModbusPacketTask+0x16>
 800b08a:	bf00      	nop
 800b08c:	2000957c 	.word	0x2000957c
 800b090:	20009d48 	.word	0x20009d48
 800b094:	20007f9d 	.word	0x20007f9d
 800b098:	200080c0 	.word	0x200080c0
 800b09c:	20009b48 	.word	0x20009b48
 800b0a0:	20009d58 	.word	0x20009d58
 800b0a4:	20009d5c 	.word	0x20009d5c
 800b0a8:	200094d0 	.word	0x200094d0
 800b0ac:	200094d4 	.word	0x200094d4
 800b0b0:	0001d4c0 	.word	0x0001d4c0

0800b0b4 <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 800b0b4:	b590      	push	{r4, r7, lr}
 800b0b6:	b089      	sub	sp, #36	; 0x24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b0c0:	4ba1      	ldr	r3, [pc, #644]	; (800b348 <ThreadModbusTask+0x294>)
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	4ca1      	ldr	r4, [pc, #644]	; (800b34c <ThreadModbusTask+0x298>)
 800b0c6:	463b      	mov	r3, r7
 800b0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7fb fb77 	bl	80067c0 <osMessageGet>
 800b0d2:	463b      	mov	r3, r7
 800b0d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 800b0dc:	4b9b      	ldr	r3, [pc, #620]	; (800b34c <ThreadModbusTask+0x298>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b10      	cmp	r3, #16
 800b0e2:	f040 8226 	bne.w	800b532 <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 800b0e6:	4b99      	ldr	r3, [pc, #612]	; (800b34c <ThreadModbusTask+0x298>)
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	2b0f      	cmp	r3, #15
 800b0ee:	f200 817f 	bhi.w	800b3f0 <ThreadModbusTask+0x33c>
 800b0f2:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <ThreadModbusTask+0x44>)
 800b0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f8:	0800b139 	.word	0x0800b139
 800b0fc:	0800b3f1 	.word	0x0800b3f1
 800b100:	0800b1e1 	.word	0x0800b1e1
 800b104:	0800b3f1 	.word	0x0800b3f1
 800b108:	0800b3f1 	.word	0x0800b3f1
 800b10c:	0800b28d 	.word	0x0800b28d
 800b110:	0800b3f1 	.word	0x0800b3f1
 800b114:	0800b3f1 	.word	0x0800b3f1
 800b118:	0800b3f1 	.word	0x0800b3f1
 800b11c:	0800b3f1 	.word	0x0800b3f1
 800b120:	0800b3f1 	.word	0x0800b3f1
 800b124:	0800b3f1 	.word	0x0800b3f1
 800b128:	0800b3f1 	.word	0x0800b3f1
 800b12c:	0800b3f1 	.word	0x0800b3f1
 800b130:	0800b3f1 	.word	0x0800b3f1
 800b134:	0800b337 	.word	0x0800b337
			{
				case(0x01):
					if(i==0)
 800b138:	8bfb      	ldrh	r3, [r7, #30]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d110      	bne.n	800b160 <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b13e:	4b83      	ldr	r3, [pc, #524]	; (800b34c <ThreadModbusTask+0x298>)
 800b140:	6859      	ldr	r1, [r3, #4]
 800b142:	4b83      	ldr	r3, [pc, #524]	; (800b350 <ThreadModbusTask+0x29c>)
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	8bfb      	ldrh	r3, [r7, #30]
 800b14a:	b2c8      	uxtb	r0, r1
 800b14c:	4981      	ldr	r1, [pc, #516]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b14e:	0212      	lsls	r2, r2, #8
 800b150:	440a      	add	r2, r1
 800b152:	4413      	add	r3, r2
 800b154:	4602      	mov	r2, r0
 800b156:	701a      	strb	r2, [r3, #0]
						i++;
 800b158:	8bfb      	ldrh	r3, [r7, #30]
 800b15a:	3301      	adds	r3, #1
 800b15c:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b15e:	e18e      	b.n	800b47e <ThreadModbusTask+0x3ca>
					else if(i==1)
 800b160:	8bfb      	ldrh	r3, [r7, #30]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d104      	bne.n	800b170 <ThreadModbusTask+0xbc>
						i = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	83bb      	strh	r3, [r7, #28]
				break;
 800b16e:	e186      	b.n	800b47e <ThreadModbusTask+0x3ca>
					else if(i>1)
 800b170:	8bfb      	ldrh	r3, [r7, #30]
 800b172:	2b01      	cmp	r3, #1
 800b174:	f240 8183 	bls.w	800b47e <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b178:	8bfb      	ldrh	r3, [r7, #30]
 800b17a:	2b06      	cmp	r3, #6
 800b17c:	d11f      	bne.n	800b1be <ThreadModbusTask+0x10a>
 800b17e:	4b74      	ldr	r3, [pc, #464]	; (800b350 <ThreadModbusTask+0x29c>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	4a74      	ldr	r2, [pc, #464]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b184:	021b      	lsls	r3, r3, #8
 800b186:	4413      	add	r3, r2
 800b188:	3301      	adds	r3, #1
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	2b10      	cmp	r3, #16
 800b18e:	d116      	bne.n	800b1be <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b190:	4b6e      	ldr	r3, [pc, #440]	; (800b34c <ThreadModbusTask+0x298>)
 800b192:	6859      	ldr	r1, [r3, #4]
 800b194:	4b6e      	ldr	r3, [pc, #440]	; (800b350 <ThreadModbusTask+0x29c>)
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	8bfb      	ldrh	r3, [r7, #30]
 800b19c:	b2c8      	uxtb	r0, r1
 800b19e:	496d      	ldr	r1, [pc, #436]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b1a0:	0212      	lsls	r2, r2, #8
 800b1a2:	440a      	add	r2, r1
 800b1a4:	4413      	add	r3, r2
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b1aa:	4b68      	ldr	r3, [pc, #416]	; (800b34c <ThreadModbusTask+0x298>)
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3309      	adds	r3, #9
 800b1b4:	83bb      	strh	r3, [r7, #28]
							i++;
 800b1b6:	8bfb      	ldrh	r3, [r7, #30]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	83fb      	strh	r3, [r7, #30]
				break;
 800b1bc:	e15f      	b.n	800b47e <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b1be:	4b63      	ldr	r3, [pc, #396]	; (800b34c <ThreadModbusTask+0x298>)
 800b1c0:	6859      	ldr	r1, [r3, #4]
 800b1c2:	4b63      	ldr	r3, [pc, #396]	; (800b350 <ThreadModbusTask+0x29c>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ca:	b2c8      	uxtb	r0, r1
 800b1cc:	4961      	ldr	r1, [pc, #388]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b1ce:	0212      	lsls	r2, r2, #8
 800b1d0:	440a      	add	r2, r1
 800b1d2:	4413      	add	r3, r2
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	701a      	strb	r2, [r3, #0]
							i++;
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	83fb      	strh	r3, [r7, #30]
				break;
 800b1de:	e14e      	b.n	800b47e <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 800b1e0:	8bfb      	ldrh	r3, [r7, #30]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d104      	bne.n	800b1f0 <ThreadModbusTask+0x13c>
					{
						i = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b1ee:	e148      	b.n	800b482 <ThreadModbusTask+0x3ce>
					else if(i==1)
 800b1f0:	8bfb      	ldrh	r3, [r7, #30]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d112      	bne.n	800b21c <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b1f6:	4b55      	ldr	r3, [pc, #340]	; (800b34c <ThreadModbusTask+0x298>)
 800b1f8:	6859      	ldr	r1, [r3, #4]
 800b1fa:	4b55      	ldr	r3, [pc, #340]	; (800b350 <ThreadModbusTask+0x29c>)
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	8bfb      	ldrh	r3, [r7, #30]
 800b202:	b2c8      	uxtb	r0, r1
 800b204:	4953      	ldr	r1, [pc, #332]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b206:	0212      	lsls	r2, r2, #8
 800b208:	440a      	add	r2, r1
 800b20a:	4413      	add	r3, r2
 800b20c:	4602      	mov	r2, r0
 800b20e:	701a      	strb	r2, [r3, #0]
						i++;
 800b210:	8bfb      	ldrh	r3, [r7, #30]
 800b212:	3301      	adds	r3, #1
 800b214:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b216:	2308      	movs	r3, #8
 800b218:	83bb      	strh	r3, [r7, #28]
				break;
 800b21a:	e132      	b.n	800b482 <ThreadModbusTask+0x3ce>
					else if(i>1)
 800b21c:	8bfb      	ldrh	r3, [r7, #30]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	f240 812f 	bls.w	800b482 <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b224:	8bfb      	ldrh	r3, [r7, #30]
 800b226:	2b06      	cmp	r3, #6
 800b228:	d11f      	bne.n	800b26a <ThreadModbusTask+0x1b6>
 800b22a:	4b49      	ldr	r3, [pc, #292]	; (800b350 <ThreadModbusTask+0x29c>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	4a49      	ldr	r2, [pc, #292]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b230:	021b      	lsls	r3, r3, #8
 800b232:	4413      	add	r3, r2
 800b234:	3301      	adds	r3, #1
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b10      	cmp	r3, #16
 800b23a:	d116      	bne.n	800b26a <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b23c:	4b43      	ldr	r3, [pc, #268]	; (800b34c <ThreadModbusTask+0x298>)
 800b23e:	6859      	ldr	r1, [r3, #4]
 800b240:	4b43      	ldr	r3, [pc, #268]	; (800b350 <ThreadModbusTask+0x29c>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	8bfb      	ldrh	r3, [r7, #30]
 800b248:	b2c8      	uxtb	r0, r1
 800b24a:	4942      	ldr	r1, [pc, #264]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b24c:	0212      	lsls	r2, r2, #8
 800b24e:	440a      	add	r2, r1
 800b250:	4413      	add	r3, r2
 800b252:	4602      	mov	r2, r0
 800b254:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b256:	4b3d      	ldr	r3, [pc, #244]	; (800b34c <ThreadModbusTask+0x298>)
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	3309      	adds	r3, #9
 800b260:	83bb      	strh	r3, [r7, #28]
							i++;
 800b262:	8bfb      	ldrh	r3, [r7, #30]
 800b264:	3301      	adds	r3, #1
 800b266:	83fb      	strh	r3, [r7, #30]
				break;
 800b268:	e10b      	b.n	800b482 <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b26a:	4b38      	ldr	r3, [pc, #224]	; (800b34c <ThreadModbusTask+0x298>)
 800b26c:	6859      	ldr	r1, [r3, #4]
 800b26e:	4b38      	ldr	r3, [pc, #224]	; (800b350 <ThreadModbusTask+0x29c>)
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	8bfb      	ldrh	r3, [r7, #30]
 800b276:	b2c8      	uxtb	r0, r1
 800b278:	4936      	ldr	r1, [pc, #216]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b27a:	0212      	lsls	r2, r2, #8
 800b27c:	440a      	add	r2, r1
 800b27e:	4413      	add	r3, r2
 800b280:	4602      	mov	r2, r0
 800b282:	701a      	strb	r2, [r3, #0]
							i++;
 800b284:	8bfb      	ldrh	r3, [r7, #30]
 800b286:	3301      	adds	r3, #1
 800b288:	83fb      	strh	r3, [r7, #30]
				break;
 800b28a:	e0fa      	b.n	800b482 <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 800b28c:	8bfb      	ldrh	r3, [r7, #30]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d104      	bne.n	800b29c <ThreadModbusTask+0x1e8>
					{
						i = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b296:	2300      	movs	r3, #0
 800b298:	83bb      	strh	r3, [r7, #28]
 800b29a:	e014      	b.n	800b2c6 <ThreadModbusTask+0x212>
					}
					else if(i==1)
 800b29c:	8bfb      	ldrh	r3, [r7, #30]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d111      	bne.n	800b2c6 <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b2a2:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <ThreadModbusTask+0x298>)
 800b2a4:	6859      	ldr	r1, [r3, #4]
 800b2a6:	4b2a      	ldr	r3, [pc, #168]	; (800b350 <ThreadModbusTask+0x29c>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	8bfb      	ldrh	r3, [r7, #30]
 800b2ae:	b2c8      	uxtb	r0, r1
 800b2b0:	4928      	ldr	r1, [pc, #160]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b2b2:	0212      	lsls	r2, r2, #8
 800b2b4:	440a      	add	r2, r1
 800b2b6:	4413      	add	r3, r2
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	701a      	strb	r2, [r3, #0]
						i++;
 800b2bc:	8bfb      	ldrh	r3, [r7, #30]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b2c2:	2308      	movs	r3, #8
 800b2c4:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 800b2c6:	8bfb      	ldrh	r3, [r7, #30]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	f240 80dc 	bls.w	800b486 <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b2ce:	8bfb      	ldrh	r3, [r7, #30]
 800b2d0:	2b06      	cmp	r3, #6
 800b2d2:	d11f      	bne.n	800b314 <ThreadModbusTask+0x260>
 800b2d4:	4b1e      	ldr	r3, [pc, #120]	; (800b350 <ThreadModbusTask+0x29c>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	4a1e      	ldr	r2, [pc, #120]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	4413      	add	r3, r2
 800b2de:	3301      	adds	r3, #1
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	2b10      	cmp	r3, #16
 800b2e4:	d116      	bne.n	800b314 <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b2e6:	4b19      	ldr	r3, [pc, #100]	; (800b34c <ThreadModbusTask+0x298>)
 800b2e8:	6859      	ldr	r1, [r3, #4]
 800b2ea:	4b19      	ldr	r3, [pc, #100]	; (800b350 <ThreadModbusTask+0x29c>)
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	8bfb      	ldrh	r3, [r7, #30]
 800b2f2:	b2c8      	uxtb	r0, r1
 800b2f4:	4917      	ldr	r1, [pc, #92]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b2f6:	0212      	lsls	r2, r2, #8
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4413      	add	r3, r2
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b300:	4b12      	ldr	r3, [pc, #72]	; (800b34c <ThreadModbusTask+0x298>)
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	b29b      	uxth	r3, r3
 800b308:	3309      	adds	r3, #9
 800b30a:	83bb      	strh	r3, [r7, #28]
							i++;
 800b30c:	8bfb      	ldrh	r3, [r7, #30]
 800b30e:	3301      	adds	r3, #1
 800b310:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b312:	e0b8      	b.n	800b486 <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <ThreadModbusTask+0x298>)
 800b316:	6859      	ldr	r1, [r3, #4]
 800b318:	4b0d      	ldr	r3, [pc, #52]	; (800b350 <ThreadModbusTask+0x29c>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	8bfb      	ldrh	r3, [r7, #30]
 800b320:	b2c8      	uxtb	r0, r1
 800b322:	490c      	ldr	r1, [pc, #48]	; (800b354 <ThreadModbusTask+0x2a0>)
 800b324:	0212      	lsls	r2, r2, #8
 800b326:	440a      	add	r2, r1
 800b328:	4413      	add	r3, r2
 800b32a:	4602      	mov	r2, r0
 800b32c:	701a      	strb	r2, [r3, #0]
							i++;
 800b32e:	8bfb      	ldrh	r3, [r7, #30]
 800b330:	3301      	adds	r3, #1
 800b332:	83fb      	strh	r3, [r7, #30]
				break;
 800b334:	e0a7      	b.n	800b486 <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 800b336:	8bfb      	ldrh	r3, [r7, #30]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10d      	bne.n	800b358 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b340:	2300      	movs	r3, #0
 800b342:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b344:	e0a1      	b.n	800b48a <ThreadModbusTask+0x3d6>
 800b346:	bf00      	nop
 800b348:	200080bc 	.word	0x200080bc
 800b34c:	20009d4c 	.word	0x20009d4c
 800b350:	20007f9c 	.word	0x20007f9c
 800b354:	200080c0 	.word	0x200080c0
					else if(i==1)
 800b358:	8bfb      	ldrh	r3, [r7, #30]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d110      	bne.n	800b380 <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b35e:	4b77      	ldr	r3, [pc, #476]	; (800b53c <ThreadModbusTask+0x488>)
 800b360:	6859      	ldr	r1, [r3, #4]
 800b362:	4b77      	ldr	r3, [pc, #476]	; (800b540 <ThreadModbusTask+0x48c>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	8bfb      	ldrh	r3, [r7, #30]
 800b36a:	b2c8      	uxtb	r0, r1
 800b36c:	4975      	ldr	r1, [pc, #468]	; (800b544 <ThreadModbusTask+0x490>)
 800b36e:	0212      	lsls	r2, r2, #8
 800b370:	440a      	add	r2, r1
 800b372:	4413      	add	r3, r2
 800b374:	4602      	mov	r2, r0
 800b376:	701a      	strb	r2, [r3, #0]
						i++;
 800b378:	8bfb      	ldrh	r3, [r7, #30]
 800b37a:	3301      	adds	r3, #1
 800b37c:	83fb      	strh	r3, [r7, #30]
				break;
 800b37e:	e084      	b.n	800b48a <ThreadModbusTask+0x3d6>
					else if(i>1)
 800b380:	8bfb      	ldrh	r3, [r7, #30]
 800b382:	2b01      	cmp	r3, #1
 800b384:	f240 8081 	bls.w	800b48a <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b388:	8bfb      	ldrh	r3, [r7, #30]
 800b38a:	2b06      	cmp	r3, #6
 800b38c:	d11f      	bne.n	800b3ce <ThreadModbusTask+0x31a>
 800b38e:	4b6c      	ldr	r3, [pc, #432]	; (800b540 <ThreadModbusTask+0x48c>)
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	4a6c      	ldr	r2, [pc, #432]	; (800b544 <ThreadModbusTask+0x490>)
 800b394:	021b      	lsls	r3, r3, #8
 800b396:	4413      	add	r3, r2
 800b398:	3301      	adds	r3, #1
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b10      	cmp	r3, #16
 800b39e:	d116      	bne.n	800b3ce <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b3a0:	4b66      	ldr	r3, [pc, #408]	; (800b53c <ThreadModbusTask+0x488>)
 800b3a2:	6859      	ldr	r1, [r3, #4]
 800b3a4:	4b66      	ldr	r3, [pc, #408]	; (800b540 <ThreadModbusTask+0x48c>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	8bfb      	ldrh	r3, [r7, #30]
 800b3ac:	b2c8      	uxtb	r0, r1
 800b3ae:	4965      	ldr	r1, [pc, #404]	; (800b544 <ThreadModbusTask+0x490>)
 800b3b0:	0212      	lsls	r2, r2, #8
 800b3b2:	440a      	add	r2, r1
 800b3b4:	4413      	add	r3, r2
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b3ba:	4b60      	ldr	r3, [pc, #384]	; (800b53c <ThreadModbusTask+0x488>)
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	3309      	adds	r3, #9
 800b3c4:	83bb      	strh	r3, [r7, #28]
								i++;
 800b3c6:	8bfb      	ldrh	r3, [r7, #30]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	83fb      	strh	r3, [r7, #30]
				break;
 800b3cc:	e05d      	b.n	800b48a <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b3ce:	4b5b      	ldr	r3, [pc, #364]	; (800b53c <ThreadModbusTask+0x488>)
 800b3d0:	6859      	ldr	r1, [r3, #4]
 800b3d2:	4b5b      	ldr	r3, [pc, #364]	; (800b540 <ThreadModbusTask+0x48c>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	8bfb      	ldrh	r3, [r7, #30]
 800b3da:	b2c8      	uxtb	r0, r1
 800b3dc:	4959      	ldr	r1, [pc, #356]	; (800b544 <ThreadModbusTask+0x490>)
 800b3de:	0212      	lsls	r2, r2, #8
 800b3e0:	440a      	add	r2, r1
 800b3e2:	4413      	add	r3, r2
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	701a      	strb	r2, [r3, #0]
							i++;
 800b3e8:	8bfb      	ldrh	r3, [r7, #30]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	83fb      	strh	r3, [r7, #30]
				break;
 800b3ee:	e04c      	b.n	800b48a <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 800b3f0:	8bfb      	ldrh	r3, [r7, #30]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d104      	bne.n	800b400 <ThreadModbusTask+0x34c>
					{
						i = 0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b3fe:	e046      	b.n	800b48e <ThreadModbusTask+0x3da>
					else if(i==1)
 800b400:	8bfb      	ldrh	r3, [r7, #30]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d104      	bne.n	800b410 <ThreadModbusTask+0x35c>
						i = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	83bb      	strh	r3, [r7, #28]
				break;
 800b40e:	e03e      	b.n	800b48e <ThreadModbusTask+0x3da>
					else if(i>1)
 800b410:	8bfb      	ldrh	r3, [r7, #30]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d93b      	bls.n	800b48e <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b416:	8bfb      	ldrh	r3, [r7, #30]
 800b418:	2b06      	cmp	r3, #6
 800b41a:	d11f      	bne.n	800b45c <ThreadModbusTask+0x3a8>
 800b41c:	4b48      	ldr	r3, [pc, #288]	; (800b540 <ThreadModbusTask+0x48c>)
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	4a48      	ldr	r2, [pc, #288]	; (800b544 <ThreadModbusTask+0x490>)
 800b422:	021b      	lsls	r3, r3, #8
 800b424:	4413      	add	r3, r2
 800b426:	3301      	adds	r3, #1
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b10      	cmp	r3, #16
 800b42c:	d116      	bne.n	800b45c <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b42e:	4b43      	ldr	r3, [pc, #268]	; (800b53c <ThreadModbusTask+0x488>)
 800b430:	6859      	ldr	r1, [r3, #4]
 800b432:	4b43      	ldr	r3, [pc, #268]	; (800b540 <ThreadModbusTask+0x48c>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	8bfb      	ldrh	r3, [r7, #30]
 800b43a:	b2c8      	uxtb	r0, r1
 800b43c:	4941      	ldr	r1, [pc, #260]	; (800b544 <ThreadModbusTask+0x490>)
 800b43e:	0212      	lsls	r2, r2, #8
 800b440:	440a      	add	r2, r1
 800b442:	4413      	add	r3, r2
 800b444:	4602      	mov	r2, r0
 800b446:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b448:	4b3c      	ldr	r3, [pc, #240]	; (800b53c <ThreadModbusTask+0x488>)
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	b29b      	uxth	r3, r3
 800b450:	3309      	adds	r3, #9
 800b452:	83bb      	strh	r3, [r7, #28]
							i++;
 800b454:	8bfb      	ldrh	r3, [r7, #30]
 800b456:	3301      	adds	r3, #1
 800b458:	83fb      	strh	r3, [r7, #30]
				break;
 800b45a:	e018      	b.n	800b48e <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b45c:	4b37      	ldr	r3, [pc, #220]	; (800b53c <ThreadModbusTask+0x488>)
 800b45e:	6859      	ldr	r1, [r3, #4]
 800b460:	4b37      	ldr	r3, [pc, #220]	; (800b540 <ThreadModbusTask+0x48c>)
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	461a      	mov	r2, r3
 800b466:	8bfb      	ldrh	r3, [r7, #30]
 800b468:	b2c8      	uxtb	r0, r1
 800b46a:	4936      	ldr	r1, [pc, #216]	; (800b544 <ThreadModbusTask+0x490>)
 800b46c:	0212      	lsls	r2, r2, #8
 800b46e:	440a      	add	r2, r1
 800b470:	4413      	add	r3, r2
 800b472:	4602      	mov	r2, r0
 800b474:	701a      	strb	r2, [r3, #0]
							i++;
 800b476:	8bfb      	ldrh	r3, [r7, #30]
 800b478:	3301      	adds	r3, #1
 800b47a:	83fb      	strh	r3, [r7, #30]
				break;
 800b47c:	e007      	b.n	800b48e <ThreadModbusTask+0x3da>
				break;
 800b47e:	bf00      	nop
 800b480:	e006      	b.n	800b490 <ThreadModbusTask+0x3dc>
				break;
 800b482:	bf00      	nop
 800b484:	e004      	b.n	800b490 <ThreadModbusTask+0x3dc>
				break;
 800b486:	bf00      	nop
 800b488:	e002      	b.n	800b490 <ThreadModbusTask+0x3dc>
				break;
 800b48a:	bf00      	nop
 800b48c:	e000      	b.n	800b490 <ThreadModbusTask+0x3dc>
				break;
 800b48e:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 800b490:	8bfa      	ldrh	r2, [r7, #30]
 800b492:	8bbb      	ldrh	r3, [r7, #28]
 800b494:	429a      	cmp	r2, r3
 800b496:	d34c      	bcc.n	800b532 <ThreadModbusTask+0x47e>
 800b498:	8bfb      	ldrh	r3, [r7, #30]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d049      	beq.n	800b532 <ThreadModbusTask+0x47e>
 800b49e:	8bbb      	ldrh	r3, [r7, #28]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d046      	beq.n	800b532 <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 800b4a4:	4b26      	ldr	r3, [pc, #152]	; (800b540 <ThreadModbusTask+0x48c>)
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	021b      	lsls	r3, r3, #8
 800b4aa:	4a26      	ldr	r2, [pc, #152]	; (800b544 <ThreadModbusTask+0x490>)
 800b4ac:	441a      	add	r2, r3
 800b4ae:	8bbb      	ldrh	r3, [r7, #28]
 800b4b0:	3b02      	subs	r3, #2
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	f003 fa47 	bl	800e948 <CRC16>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4a22      	ldr	r2, [pc, #136]	; (800b548 <ThreadModbusTask+0x494>)
 800b4be:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 800b4c0:	4b21      	ldr	r3, [pc, #132]	; (800b548 <ThreadModbusTask+0x494>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	0a1b      	lsrs	r3, r3, #8
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <ThreadModbusTask+0x48c>)
 800b4ca:	7812      	ldrb	r2, [r2, #0]
 800b4cc:	4611      	mov	r1, r2
 800b4ce:	8bba      	ldrh	r2, [r7, #28]
 800b4d0:	3a01      	subs	r2, #1
 800b4d2:	481c      	ldr	r0, [pc, #112]	; (800b544 <ThreadModbusTask+0x490>)
 800b4d4:	0209      	lsls	r1, r1, #8
 800b4d6:	4401      	add	r1, r0
 800b4d8:	440a      	add	r2, r1
 800b4da:	7812      	ldrb	r2, [r2, #0]
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d124      	bne.n	800b52a <ThreadModbusTask+0x476>
 800b4e0:	4b19      	ldr	r3, [pc, #100]	; (800b548 <ThreadModbusTask+0x494>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	4a16      	ldr	r2, [pc, #88]	; (800b540 <ThreadModbusTask+0x48c>)
 800b4e8:	7812      	ldrb	r2, [r2, #0]
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	8bba      	ldrh	r2, [r7, #28]
 800b4ee:	3a02      	subs	r2, #2
 800b4f0:	4814      	ldr	r0, [pc, #80]	; (800b544 <ThreadModbusTask+0x490>)
 800b4f2:	0209      	lsls	r1, r1, #8
 800b4f4:	4401      	add	r1, r0
 800b4f6:	440a      	add	r2, r1
 800b4f8:	7812      	ldrb	r2, [r2, #0]
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d115      	bne.n	800b52a <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 800b4fe:	4b10      	ldr	r3, [pc, #64]	; (800b540 <ThreadModbusTask+0x48c>)
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <ThreadModbusTask+0x498>)
 800b504:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 800b506:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <ThreadModbusTask+0x48c>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	b2da      	uxtb	r2, r3
 800b50e:	4b0c      	ldr	r3, [pc, #48]	; (800b540 <ThreadModbusTask+0x48c>)
 800b510:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 800b512:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <ThreadModbusTask+0x48c>)
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2b13      	cmp	r3, #19
 800b518:	d902      	bls.n	800b520 <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 800b51a:	4b09      	ldr	r3, [pc, #36]	; (800b540 <ThreadModbusTask+0x48c>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <ThreadModbusTask+0x49c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f7fb f8ad 	bl	8006684 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 800b52a:	2300      	movs	r3, #0
 800b52c:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 800b52e:	2300      	movs	r3, #0
 800b530:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 800b532:	2001      	movs	r0, #1
 800b534:	f7fa feb3 	bl	800629e <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b538:	e5c2      	b.n	800b0c0 <ThreadModbusTask+0xc>
 800b53a:	bf00      	nop
 800b53c:	20009d4c 	.word	0x20009d4c
 800b540:	20007f9c 	.word	0x20007f9c
 800b544:	200080c0 	.word	0x200080c0
 800b548:	20009d58 	.word	0x20009d58
 800b54c:	20007f9d 	.word	0x20007f9d
 800b550:	20009554 	.word	0x20009554

0800b554 <ThreadReadRegistersTask>:
extern osThreadId M95TaskHandle;
extern osThreadId MainTaskHandle;


void ThreadReadRegistersTask(void const * argument)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 800b55c:	f001 fb38 	bl	800cbd0 <read_status_registers>
	read_control_registers();
 800b560:	f001 fe8e 	bl	800d280 <read_control_registers>
	read_bootloader_registers();
 800b564:	f002 fa0e 	bl	800d984 <read_bootloader_registers>
	read_change_boot_registers();
 800b568:	f003 f8a4 	bl	800e6b4 <read_change_boot_registers>
	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 800b56c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b570:	f7fa fe95 	bl	800629e <osDelay>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 800b574:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <ThreadReadRegistersTask+0x58>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fb f9a1 	bl	80068c0 <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <ThreadReadRegistersTask+0x5c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4618      	mov	r0, r3
 800b584:	f7fb f99c 	bl	80068c0 <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 800b588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b58c:	f7fa fe87 	bl	800629e <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 800b590:	f001 fb1e 	bl	800cbd0 <read_status_registers>
		read_control_registers();
 800b594:	f001 fe74 	bl	800d280 <read_control_registers>
		read_bootloader_registers();
 800b598:	f002 f9f4 	bl	800d984 <read_bootloader_registers>
		read_change_boot_registers();
 800b59c:	f003 f88a 	bl	800e6b4 <read_change_boot_registers>

		osDelay(1000); // ждем 1 секунду
 800b5a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b5a4:	f7fa fe7b 	bl	800629e <osDelay>
		read_status_registers(); // вычитываем регистры
 800b5a8:	e7f2      	b.n	800b590 <ThreadReadRegistersTask+0x3c>
 800b5aa:	bf00      	nop
 800b5ac:	20009548 	.word	0x20009548
 800b5b0:	20009550 	.word	0x20009550

0800b5b4 <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	6039      	str	r1, [r7, #0]
 800b5be:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b5c4:	88fb      	ldrh	r3, [r7, #6]
 800b5c6:	0a1b      	lsrs	r3, r3, #8
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5da:	4811      	ldr	r0, [pc, #68]	; (800b620 <fm25v02_read+0x6c>)
 800b5dc:	f7f7 fc5c 	bl	8002e98 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 800b5e0:	bf00      	nop
 800b5e2:	f107 010c 	add.w	r1, r7, #12
 800b5e6:	230a      	movs	r3, #10
 800b5e8:	2203      	movs	r2, #3
 800b5ea:	480e      	ldr	r0, [pc, #56]	; (800b624 <fm25v02_read+0x70>)
 800b5ec:	f7f8 fcaf 	bl	8003f4e <HAL_SPI_Transmit>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1f5      	bne.n	800b5e2 <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 800b5f6:	bf00      	nop
 800b5f8:	230a      	movs	r3, #10
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	4809      	ldr	r0, [pc, #36]	; (800b624 <fm25v02_read+0x70>)
 800b600:	f7f8 fde1 	bl	80041c6 <HAL_SPI_Receive>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f6      	bne.n	800b5f8 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 800b60a:	2201      	movs	r2, #1
 800b60c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b610:	4803      	ldr	r0, [pc, #12]	; (800b620 <fm25v02_read+0x6c>)
 800b612:	f7f7 fc41 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	40021c00 	.word	0x40021c00
 800b624:	20007fac 	.word	0x20007fac

0800b628 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	460a      	mov	r2, r1
 800b632:	80fb      	strh	r3, [r7, #6]
 800b634:	4613      	mov	r3, r2
 800b636:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 800b638:	2306      	movs	r3, #6
 800b63a:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 800b63c:	2200      	movs	r2, #0
 800b63e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b642:	481d      	ldr	r0, [pc, #116]	; (800b6b8 <fm25v02_write+0x90>)
 800b644:	f7f7 fc28 	bl	8002e98 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 800b648:	bf00      	nop
 800b64a:	f107 010c 	add.w	r1, r7, #12
 800b64e:	230a      	movs	r3, #10
 800b650:	2201      	movs	r2, #1
 800b652:	481a      	ldr	r0, [pc, #104]	; (800b6bc <fm25v02_write+0x94>)
 800b654:	f7f8 fc7b 	bl	8003f4e <HAL_SPI_Transmit>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d1f5      	bne.n	800b64a <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 800b65e:	2201      	movs	r2, #1
 800b660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b664:	4814      	ldr	r0, [pc, #80]	; (800b6b8 <fm25v02_write+0x90>)
 800b666:	f7f7 fc17 	bl	8002e98 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 800b66a:	2302      	movs	r3, #2
 800b66c:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b66e:	88fb      	ldrh	r3, [r7, #6]
 800b670:	0a1b      	lsrs	r3, r3, #8
 800b672:	b29b      	uxth	r3, r3
 800b674:	b2db      	uxtb	r3, r3
 800b676:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 800b67e:	797b      	ldrb	r3, [r7, #5]
 800b680:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800b682:	2200      	movs	r2, #0
 800b684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b688:	480b      	ldr	r0, [pc, #44]	; (800b6b8 <fm25v02_write+0x90>)
 800b68a:	f7f7 fc05 	bl	8002e98 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800b68e:	bf00      	nop
 800b690:	f107 010c 	add.w	r1, r7, #12
 800b694:	230a      	movs	r3, #10
 800b696:	2204      	movs	r2, #4
 800b698:	4808      	ldr	r0, [pc, #32]	; (800b6bc <fm25v02_write+0x94>)
 800b69a:	f7f8 fc58 	bl	8003f4e <HAL_SPI_Transmit>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f5      	bne.n	800b690 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b6aa:	4803      	ldr	r0, [pc, #12]	; (800b6b8 <fm25v02_write+0x90>)
 800b6ac:	f7f7 fbf4 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b6b0:	bf00      	nop
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	40021c00 	.word	0x40021c00
 800b6bc:	20007fac 	.word	0x20007fac

0800b6c0 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	80fb      	strh	r3, [r7, #6]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73fb      	strb	r3, [r7, #15]
 800b6d4:	e00e      	b.n	800b6f4 <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	4413      	add	r3, r2
 800b6de:	b298      	uxth	r0, r3
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	f7ff ff9d 	bl	800b628 <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	88ba      	ldrh	r2, [r7, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d8eb      	bhi.n	800b6d6 <fm25v02_fast_write+0x16>
	}
	return 0;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	80fb      	strh	r3, [r7, #6]
 800b714:	4613      	mov	r3, r2
 800b716:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 800b718:	230b      	movs	r3, #11
 800b71a:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b71c:	88fb      	ldrh	r3, [r7, #6]
 800b71e:	0a1b      	lsrs	r3, r3, #8
 800b720:	b29b      	uxth	r3, r3
 800b722:	b2db      	uxtb	r3, r3
 800b724:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b726:	88fb      	ldrh	r3, [r7, #6]
 800b728:	b2db      	uxtb	r3, r3
 800b72a:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 800b72c:	23ff      	movs	r3, #255	; 0xff
 800b72e:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800b730:	2200      	movs	r2, #0
 800b732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b736:	4811      	ldr	r0, [pc, #68]	; (800b77c <fm25v02_fast_read+0x74>)
 800b738:	f7f7 fbae 	bl	8002e98 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800b73c:	bf00      	nop
 800b73e:	f107 010c 	add.w	r1, r7, #12
 800b742:	230a      	movs	r3, #10
 800b744:	2204      	movs	r2, #4
 800b746:	480e      	ldr	r0, [pc, #56]	; (800b780 <fm25v02_fast_read+0x78>)
 800b748:	f7f8 fc01 	bl	8003f4e <HAL_SPI_Transmit>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1f5      	bne.n	800b73e <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 800b752:	bf00      	nop
 800b754:	88ba      	ldrh	r2, [r7, #4]
 800b756:	230a      	movs	r3, #10
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	4809      	ldr	r0, [pc, #36]	; (800b780 <fm25v02_fast_read+0x78>)
 800b75c:	f7f8 fd33 	bl	80041c6 <HAL_SPI_Receive>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1f6      	bne.n	800b754 <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 800b766:	2201      	movs	r2, #1
 800b768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b76c:	4803      	ldr	r0, [pc, #12]	; (800b77c <fm25v02_fast_read+0x74>)
 800b76e:	f7f7 fb93 	bl	8002e98 <HAL_GPIO_WritePin>
	return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	40021c00 	.word	0x40021c00
 800b780:	20007fac 	.word	0x20007fac

0800b784 <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 800b788:	2201      	movs	r2, #1
 800b78a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b78e:	4802      	ldr	r0, [pc, #8]	; (800b798 <BUZ_ON+0x14>)
 800b790:	f7f7 fb82 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b794:	bf00      	nop
 800b796:	bd80      	pop	{r7, pc}
 800b798:	40020c00 	.word	0x40020c00

0800b79c <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b7a6:	4802      	ldr	r0, [pc, #8]	; (800b7b0 <BUZ_OFF+0x14>)
 800b7a8:	f7f7 fb76 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b7ac:	bf00      	nop
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40020c00 	.word	0x40020c00

0800b7b4 <LED_VD3_ON>:
{
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
}

void LED_VD3_ON(void) // включение светодиода VD3
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7be:	4802      	ldr	r0, [pc, #8]	; (800b7c8 <LED_VD3_ON+0x14>)
 800b7c0:	f7f7 fb6a 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b7c4:	bf00      	nop
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	40020800 	.word	0x40020800

0800b7cc <LED_VD3_TOGGLE>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED_VD3_TOGGLE(void) // переключение светодиода VD3
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800b7d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b7d4:	4802      	ldr	r0, [pc, #8]	; (800b7e0 <LED_VD3_TOGGLE+0x14>)
 800b7d6:	f7f7 fb78 	bl	8002eca <HAL_GPIO_TogglePin>
}
 800b7da:	bf00      	nop
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	40020800 	.word	0x40020800

0800b7e4 <LED1_OFF>:
{
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	2104      	movs	r1, #4
 800b7ec:	4802      	ldr	r0, [pc, #8]	; (800b7f8 <LED1_OFF+0x14>)
 800b7ee:	f7f7 fb53 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b7f2:	bf00      	nop
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	40021c00 	.word	0x40021c00

0800b7fc <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 800b800:	2200      	movs	r2, #0
 800b802:	2104      	movs	r1, #4
 800b804:	4802      	ldr	r0, [pc, #8]	; (800b810 <LED1_ON+0x14>)
 800b806:	f7f7 fb47 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b80a:	bf00      	nop
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	40021c00 	.word	0x40021c00

0800b814 <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 800b814:	b480      	push	{r7}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	607a      	str	r2, [r7, #4]
 800b81e:	461a      	mov	r2, r3
 800b820:	460b      	mov	r3, r1
 800b822:	817b      	strh	r3, [r7, #10]
 800b824:	4613      	mov	r3, r2
 800b826:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 800b828:	2300      	movs	r3, #0
 800b82a:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 800b82c:	2300      	movs	r3, #0
 800b82e:	75bb      	strb	r3, [r7, #22]
 800b830:	e018      	b.n	800b864 <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 800b832:	7dbb      	ldrb	r3, [r7, #22]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4413      	add	r3, r2
 800b838:	781a      	ldrb	r2, [r3, #0]
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	6879      	ldr	r1, [r7, #4]
 800b83e:	440b      	add	r3, r1
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d109      	bne.n	800b85a <find_str+0x46>
		{
			j++;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	3301      	adds	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	893a      	ldrh	r2, [r7, #8]
 800b852:	429a      	cmp	r2, r3
 800b854:	d803      	bhi.n	800b85e <find_str+0x4a>
			{
				return 1;
 800b856:	2301      	movs	r3, #1
 800b858:	e00a      	b.n	800b870 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 800b85e:	7dbb      	ldrb	r3, [r7, #22]
 800b860:	3301      	adds	r3, #1
 800b862:	75bb      	strb	r3, [r7, #22]
 800b864:	7dbb      	ldrb	r3, [r7, #22]
 800b866:	b29b      	uxth	r3, r3
 800b868:	897a      	ldrh	r2, [r7, #10]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d8e1      	bhi.n	800b832 <find_str+0x1e>
		}
	}

	return 0;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	371c      	adds	r7, #28
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800b880:	2200      	movs	r2, #0
 800b882:	2140      	movs	r1, #64	; 0x40
 800b884:	480a      	ldr	r0, [pc, #40]	; (800b8b0 <m95_power_on+0x34>)
 800b886:	f7f7 fb07 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b88a:	2064      	movs	r0, #100	; 0x64
 800b88c:	f7f5 fffc 	bl	8001888 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 800b890:	2201      	movs	r2, #1
 800b892:	2140      	movs	r1, #64	; 0x40
 800b894:	4806      	ldr	r0, [pc, #24]	; (800b8b0 <m95_power_on+0x34>)
 800b896:	f7f7 faff 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800b89a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b89e:	f7f5 fff3 	bl	8001888 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2140      	movs	r1, #64	; 0x40
 800b8a6:	4802      	ldr	r0, [pc, #8]	; (800b8b0 <m95_power_on+0x34>)
 800b8a8:	f7f7 faf6 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b8ac:	bf00      	nop
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	40021c00 	.word	0x40021c00

0800b8b4 <m95_power_off>:

void m95_power_off(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2140      	movs	r1, #64	; 0x40
 800b8bc:	480a      	ldr	r0, [pc, #40]	; (800b8e8 <m95_power_off+0x34>)
 800b8be:	f7f7 faeb 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b8c2:	2064      	movs	r0, #100	; 0x64
 800b8c4:	f7f5 ffe0 	bl	8001888 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	2140      	movs	r1, #64	; 0x40
 800b8cc:	4806      	ldr	r0, [pc, #24]	; (800b8e8 <m95_power_off+0x34>)
 800b8ce:	f7f7 fae3 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 800b8d2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800b8d6:	f7f5 ffd7 	bl	8001888 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2140      	movs	r1, #64	; 0x40
 800b8de:	4802      	ldr	r0, [pc, #8]	; (800b8e8 <m95_power_off+0x34>)
 800b8e0:	f7f7 fada 	bl	8002e98 <HAL_GPIO_WritePin>
}
 800b8e4:	bf00      	nop
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	40021c00 	.word	0x40021c00

0800b8ec <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	80fb      	strh	r3, [r7, #6]
 800b8f6:	e006      	b.n	800b906 <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	4a08      	ldr	r2, [pc, #32]	; (800b91c <modem_rx_buffer_clear+0x30>)
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 800b900:	88fb      	ldrh	r3, [r7, #6]
 800b902:	3301      	adds	r3, #1
 800b904:	80fb      	strh	r3, [r7, #6]
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	2bff      	cmp	r3, #255	; 0xff
 800b90a:	d9f5      	bls.n	800b8f8 <modem_rx_buffer_clear+0xc>
	}
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr
 800b91a:	bf00      	nop
 800b91c:	20009680 	.word	0x20009680

0800b920 <ATE0>:

uint8_t ATE0 (void)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
	char str_out[5];
	sprintf(str_out, "ATE0\n");
 800b926:	463b      	mov	r3, r7
 800b928:	491f      	ldr	r1, [pc, #124]	; (800b9a8 <ATE0+0x88>)
 800b92a:	4618      	mov	r0, r3
 800b92c:	f003 f954 	bl	800ebd8 <siprintf>

	read_rx_state = ACTIVE;
 800b930:	4b1e      	ldr	r3, [pc, #120]	; (800b9ac <ATE0+0x8c>)
 800b932:	2201      	movs	r2, #1
 800b934:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800b936:	4b1e      	ldr	r3, [pc, #120]	; (800b9b0 <ATE0+0x90>)
 800b938:	2200      	movs	r2, #0
 800b93a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800b93c:	f7ff ffd6 	bl	800b8ec <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800b940:	2201      	movs	r2, #1
 800b942:	491c      	ldr	r1, [pc, #112]	; (800b9b4 <ATE0+0x94>)
 800b944:	481c      	ldr	r0, [pc, #112]	; (800b9b8 <ATE0+0x98>)
 800b946:	f7f9 fbc9 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 5);
 800b94a:	463b      	mov	r3, r7
 800b94c:	2205      	movs	r2, #5
 800b94e:	4619      	mov	r1, r3
 800b950:	4819      	ldr	r0, [pc, #100]	; (800b9b8 <ATE0+0x98>)
 800b952:	f7f9 fb45 	bl	8004fe0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800b956:	4b19      	ldr	r3, [pc, #100]	; (800b9bc <ATE0+0x9c>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f04f 31ff 	mov.w	r1, #4294967295
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fa fe42 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800b964:	4b16      	ldr	r3, [pc, #88]	; (800b9c0 <ATE0+0xa0>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fa fcdf 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800b972:	e010      	b.n	800b996 <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800b974:	4913      	ldr	r1, [pc, #76]	; (800b9c4 <ATE0+0xa4>)
 800b976:	4814      	ldr	r0, [pc, #80]	; (800b9c8 <ATE0+0xa8>)
 800b978:	f003 f94e 	bl	800ec18 <strstr>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d009      	beq.n	800b996 <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800b982:	4b0f      	ldr	r3, [pc, #60]	; (800b9c0 <ATE0+0xa0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4618      	mov	r0, r3
 800b988:	f7fa fd16 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800b98c:	4b07      	ldr	r3, [pc, #28]	; (800b9ac <ATE0+0x8c>)
 800b98e:	2200      	movs	r2, #0
 800b990:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	e004      	b.n	800b9a0 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <ATE0+0x8c>)
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d0ea      	beq.n	800b974 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 800b99e:	2301      	movs	r3, #1
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0800f4c8 	.word	0x0800f4c8
 800b9ac:	20009558 	.word	0x20009558
 800b9b0:	2000080c 	.word	0x2000080c
 800b9b4:	20009580 	.word	0x20009580
 800b9b8:	20008068 	.word	0x20008068
 800b9bc:	2000978c 	.word	0x2000978c
 800b9c0:	200094c8 	.word	0x200094c8
 800b9c4:	0800f4d0 	.word	0x0800f4d0
 800b9c8:	20009680 	.word	0x20009680

0800b9cc <AT>:




uint8_t AT (void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
	char str_out[3];
	sprintf(str_out, "AT\n");
 800b9d2:	1d3b      	adds	r3, r7, #4
 800b9d4:	491f      	ldr	r1, [pc, #124]	; (800ba54 <AT+0x88>)
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f003 f8fe 	bl	800ebd8 <siprintf>

	read_rx_state = ACTIVE;
 800b9dc:	4b1e      	ldr	r3, [pc, #120]	; (800ba58 <AT+0x8c>)
 800b9de:	2201      	movs	r2, #1
 800b9e0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800b9e2:	4b1e      	ldr	r3, [pc, #120]	; (800ba5c <AT+0x90>)
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800b9e8:	f7ff ff80 	bl	800b8ec <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	491c      	ldr	r1, [pc, #112]	; (800ba60 <AT+0x94>)
 800b9f0:	481c      	ldr	r0, [pc, #112]	; (800ba64 <AT+0x98>)
 800b9f2:	f7f9 fb73 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 3);
 800b9f6:	1d3b      	adds	r3, r7, #4
 800b9f8:	2203      	movs	r2, #3
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4819      	ldr	r0, [pc, #100]	; (800ba64 <AT+0x98>)
 800b9fe:	f7f9 faef 	bl	8004fe0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800ba02:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <AT+0x9c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f04f 31ff 	mov.w	r1, #4294967295
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fa fdec 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800ba10:	4b16      	ldr	r3, [pc, #88]	; (800ba6c <AT+0xa0>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fa fc89 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800ba1e:	e010      	b.n	800ba42 <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800ba20:	4913      	ldr	r1, [pc, #76]	; (800ba70 <AT+0xa4>)
 800ba22:	4814      	ldr	r0, [pc, #80]	; (800ba74 <AT+0xa8>)
 800ba24:	f003 f8f8 	bl	800ec18 <strstr>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d009      	beq.n	800ba42 <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800ba2e:	4b0f      	ldr	r3, [pc, #60]	; (800ba6c <AT+0xa0>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fa fcc0 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ba38:	4b07      	ldr	r3, [pc, #28]	; (800ba58 <AT+0x8c>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e004      	b.n	800ba4c <AT+0x80>
	while(read_rx_state == ACTIVE)
 800ba42:	4b05      	ldr	r3, [pc, #20]	; (800ba58 <AT+0x8c>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d0ea      	beq.n	800ba20 <AT+0x54>
		}
	}
	return AT_ERROR;
 800ba4a:	2301      	movs	r3, #1
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	0800f4d8 	.word	0x0800f4d8
 800ba58:	20009558 	.word	0x20009558
 800ba5c:	2000080c 	.word	0x2000080c
 800ba60:	20009580 	.word	0x20009580
 800ba64:	20008068 	.word	0x20008068
 800ba68:	2000978c 	.word	0x2000978c
 800ba6c:	200094c8 	.word	0x200094c8
 800ba70:	0800f4d0 	.word	0x0800f4d0
 800ba74:	20009680 	.word	0x20009680

0800ba78 <AT_CSQ>:

uint8_t AT_CSQ (uint8_t* signal_level)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	char str_out[7];
	sprintf(str_out, "AT+CSQ\n");
 800ba80:	f107 0308 	add.w	r3, r7, #8
 800ba84:	4931      	ldr	r1, [pc, #196]	; (800bb4c <AT_CSQ+0xd4>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f003 f8a6 	bl	800ebd8 <siprintf>

	read_rx_state = ACTIVE;
 800ba8c:	4b30      	ldr	r3, [pc, #192]	; (800bb50 <AT_CSQ+0xd8>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800ba92:	4b30      	ldr	r3, [pc, #192]	; (800bb54 <AT_CSQ+0xdc>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800ba98:	f7ff ff28 	bl	800b8ec <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	492e      	ldr	r1, [pc, #184]	; (800bb58 <AT_CSQ+0xe0>)
 800baa0:	482e      	ldr	r0, [pc, #184]	; (800bb5c <AT_CSQ+0xe4>)
 800baa2:	f7f9 fb1b 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 7);
 800baa6:	f107 0308 	add.w	r3, r7, #8
 800baaa:	2207      	movs	r2, #7
 800baac:	4619      	mov	r1, r3
 800baae:	482b      	ldr	r0, [pc, #172]	; (800bb5c <AT_CSQ+0xe4>)
 800bab0:	f7f9 fa96 	bl	8004fe0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bab4:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <AT_CSQ+0xe8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f04f 31ff 	mov.w	r1, #4294967295
 800babc:	4618      	mov	r0, r3
 800babe:	f7fa fd93 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bac2:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <AT_CSQ+0xec>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fa fc30 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bad0:	e033      	b.n	800bb3a <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 800bad2:	4925      	ldr	r1, [pc, #148]	; (800bb68 <AT_CSQ+0xf0>)
 800bad4:	4825      	ldr	r0, [pc, #148]	; (800bb6c <AT_CSQ+0xf4>)
 800bad6:	f003 f89f 	bl	800ec18 <strstr>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d01b      	beq.n	800bb18 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 800bae0:	4b22      	ldr	r3, [pc, #136]	; (800bb6c <AT_CSQ+0xf4>)
 800bae2:	7a5b      	ldrb	r3, [r3, #9]
 800bae4:	2b2c      	cmp	r3, #44	; 0x2c
 800bae6:	d106      	bne.n	800baf6 <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 800bae8:	4b20      	ldr	r3, [pc, #128]	; (800bb6c <AT_CSQ+0xf4>)
 800baea:	7a1b      	ldrb	r3, [r3, #8]
 800baec:	3b30      	subs	r3, #48	; 0x30
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	e010      	b.n	800bb18 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 800baf6:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <AT_CSQ+0xf4>)
 800baf8:	7a1b      	ldrb	r3, [r3, #8]
 800bafa:	3b30      	subs	r3, #48	; 0x30
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	461a      	mov	r2, r3
 800bb00:	0092      	lsls	r2, r2, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	4b18      	ldr	r3, [pc, #96]	; (800bb6c <AT_CSQ+0xf4>)
 800bb0a:	7a5b      	ldrb	r3, [r3, #9]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	3b30      	subs	r3, #48	; 0x30
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	701a      	strb	r2, [r3, #0]
			{
				*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			}
			*/
		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 800bb18:	4915      	ldr	r1, [pc, #84]	; (800bb70 <AT_CSQ+0xf8>)
 800bb1a:	4814      	ldr	r0, [pc, #80]	; (800bb6c <AT_CSQ+0xf4>)
 800bb1c:	f003 f87c 	bl	800ec18 <strstr>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 800bb26:	4b0f      	ldr	r3, [pc, #60]	; (800bb64 <AT_CSQ+0xec>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fa fc44 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <AT_CSQ+0xd8>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e004      	b.n	800bb44 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 800bb3a:	4b05      	ldr	r3, [pc, #20]	; (800bb50 <AT_CSQ+0xd8>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d0c7      	beq.n	800bad2 <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 800bb42:	2301      	movs	r3, #1
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	0800f4dc 	.word	0x0800f4dc
 800bb50:	20009558 	.word	0x20009558
 800bb54:	2000080c 	.word	0x2000080c
 800bb58:	20009580 	.word	0x20009580
 800bb5c:	20008068 	.word	0x20008068
 800bb60:	2000978c 	.word	0x2000978c
 800bb64:	200094c8 	.word	0x200094c8
 800bb68:	0800f4e4 	.word	0x0800f4e4
 800bb6c:	20009680 	.word	0x20009680
 800bb70:	0800f4ec 	.word	0x0800f4ec

0800bb74 <AT_QCCID>:

uint8_t AT_QCCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 800bb74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb78:	b0ae      	sub	sp, #184	; 0xb8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800bb80:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+QCCID\n");
 800bb84:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800bb88:	491d      	ldr	r1, [pc, #116]	; (800bc00 <AT_QCCID+0x8c>)
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f003 f824 	bl	800ebd8 <siprintf>
	read_rx_state = ACTIVE;
 800bb90:	4a1c      	ldr	r2, [pc, #112]	; (800bc04 <AT_QCCID+0x90>)
 800bb92:	2301      	movs	r3, #1
 800bb94:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 800bb96:	4a1c      	ldr	r2, [pc, #112]	; (800bc08 <AT_QCCID+0x94>)
 800bb98:	2300      	movs	r3, #0
 800bb9a:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 800bb9c:	f7ff fea6 	bl	800b8ec <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bba0:	2201      	movs	r2, #1
 800bba2:	491a      	ldr	r1, [pc, #104]	; (800bc0c <AT_QCCID+0x98>)
 800bba4:	481a      	ldr	r0, [pc, #104]	; (800bc10 <AT_QCCID+0x9c>)
 800bba6:	f7f9 fa99 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800bbaa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800bbae:	2209      	movs	r2, #9
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4817      	ldr	r0, [pc, #92]	; (800bc10 <AT_QCCID+0x9c>)
 800bbb4:	f7f9 fa14 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bbb8:	4b16      	ldr	r3, [pc, #88]	; (800bc14 <AT_QCCID+0xa0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f04f 31ff 	mov.w	r1, #4294967295
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fa fd11 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <AT_QCCID+0xa4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fa fbae 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bbd4:	e34b      	b.n	800c26e <AT_QCCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800bbd6:	4911      	ldr	r1, [pc, #68]	; (800bc1c <AT_QCCID+0xa8>)
 800bbd8:	4811      	ldr	r0, [pc, #68]	; (800bc20 <AT_QCCID+0xac>)
 800bbda:	f003 f81d 	bl	800ec18 <strstr>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 8344 	beq.w	800c26e <AT_QCCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 800bbe6:	4b0c      	ldr	r3, [pc, #48]	; (800bc18 <AT_QCCID+0xa4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fa fbe4 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bbf0:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <AT_QCCID+0x90>)
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800bbfc:	e029      	b.n	800bc52 <AT_QCCID+0xde>
 800bbfe:	bf00      	nop
 800bc00:	0800f4f0 	.word	0x0800f4f0
 800bc04:	20009558 	.word	0x20009558
 800bc08:	2000080c 	.word	0x2000080c
 800bc0c:	20009580 	.word	0x20009580
 800bc10:	20008068 	.word	0x20008068
 800bc14:	2000978c 	.word	0x2000978c
 800bc18:	200094c8 	.word	0x200094c8
 800bc1c:	0800f4d0 	.word	0x0800f4d0
 800bc20:	20009680 	.word	0x20009680
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[2+i] - 48;
 800bc24:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800bc28:	1c9a      	adds	r2, r3, #2
 800bc2a:	4bde      	ldr	r3, [pc, #888]	; (800bfa4 <AT_QCCID+0x430>)
 800bc2c:	5c9b      	ldrb	r3, [r3, r2]
 800bc2e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800bc32:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800bc36:	00da      	lsls	r2, r3, #3
 800bc38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc3c:	1899      	adds	r1, r3, r2
 800bc3e:	4602      	mov	r2, r0
 800bc40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800bc44:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 800bc48:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800bc52:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800bc56:	2b12      	cmp	r3, #18
 800bc58:	d9e4      	bls.n	800bc24 <AT_QCCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 800bc5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	49d1      	ldr	r1, [pc, #836]	; (800bfa8 <AT_QCCID+0x434>)
 800bc64:	fb01 f003 	mul.w	r0, r1, r3
 800bc68:	49d0      	ldr	r1, [pc, #832]	; (800bfac <AT_QCCID+0x438>)
 800bc6a:	fb01 f102 	mul.w	r1, r1, r2
 800bc6e:	4408      	add	r0, r1
 800bc70:	49cd      	ldr	r1, [pc, #820]	; (800bfa8 <AT_QCCID+0x434>)
 800bc72:	fba2 4501 	umull	r4, r5, r2, r1
 800bc76:	1943      	adds	r3, r0, r5
 800bc78:	461d      	mov	r5, r3
 800bc7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc7e:	3308      	adds	r3, #8
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	49ca      	ldr	r1, [pc, #808]	; (800bfb0 <AT_QCCID+0x43c>)
 800bc86:	fb01 f003 	mul.w	r0, r1, r3
 800bc8a:	49ca      	ldr	r1, [pc, #808]	; (800bfb4 <AT_QCCID+0x440>)
 800bc8c:	fb01 f102 	mul.w	r1, r1, r2
 800bc90:	4408      	add	r0, r1
 800bc92:	49c7      	ldr	r1, [pc, #796]	; (800bfb0 <AT_QCCID+0x43c>)
 800bc94:	fba2 2301 	umull	r2, r3, r2, r1
 800bc98:	18c1      	adds	r1, r0, r3
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	eb14 0a02 	adds.w	sl, r4, r2
 800bca0:	eb45 0b03 	adc.w	fp, r5, r3
 800bca4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bca8:	3318      	adds	r3, #24
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	49c2      	ldr	r1, [pc, #776]	; (800bfb8 <AT_QCCID+0x444>)
 800bcb0:	fb01 f003 	mul.w	r0, r1, r3
 800bcb4:	49c1      	ldr	r1, [pc, #772]	; (800bfbc <AT_QCCID+0x448>)
 800bcb6:	fb01 f102 	mul.w	r1, r1, r2
 800bcba:	4408      	add	r0, r1
 800bcbc:	49be      	ldr	r1, [pc, #760]	; (800bfb8 <AT_QCCID+0x444>)
 800bcbe:	fba2 4501 	umull	r4, r5, r2, r1
 800bcc2:	1943      	adds	r3, r0, r5
 800bcc4:	461d      	mov	r5, r3
 800bcc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bcca:	3310      	adds	r3, #16
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	49bb      	ldr	r1, [pc, #748]	; (800bfc0 <AT_QCCID+0x44c>)
 800bcd2:	fb01 f003 	mul.w	r0, r1, r3
 800bcd6:	49bb      	ldr	r1, [pc, #748]	; (800bfc4 <AT_QCCID+0x450>)
 800bcd8:	fb01 f102 	mul.w	r1, r1, r2
 800bcdc:	4408      	add	r0, r1
 800bcde:	49b8      	ldr	r1, [pc, #736]	; (800bfc0 <AT_QCCID+0x44c>)
 800bce0:	fba2 2301 	umull	r2, r3, r2, r1
 800bce4:	18c1      	adds	r1, r0, r3
 800bce6:	460b      	mov	r3, r1
 800bce8:	eb14 0802 	adds.w	r8, r4, r2
 800bcec:	eb45 0903 	adc.w	r9, r5, r3
 800bcf0:	eb1a 0308 	adds.w	r3, sl, r8
 800bcf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bcf8:	eb4b 0309 	adc.w	r3, fp, r9
 800bcfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd04:	3328      	adds	r3, #40	; 0x28
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	49af      	ldr	r1, [pc, #700]	; (800bfc8 <AT_QCCID+0x454>)
 800bd0c:	fb01 f003 	mul.w	r0, r1, r3
 800bd10:	f640 1118 	movw	r1, #2328	; 0x918
 800bd14:	fb01 f102 	mul.w	r1, r1, r2
 800bd18:	4408      	add	r0, r1
 800bd1a:	49ab      	ldr	r1, [pc, #684]	; (800bfc8 <AT_QCCID+0x454>)
 800bd1c:	fba2 4501 	umull	r4, r5, r2, r1
 800bd20:	1943      	adds	r3, r0, r5
 800bd22:	461d      	mov	r5, r3
 800bd24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd28:	3320      	adds	r3, #32
 800bd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2e:	49a7      	ldr	r1, [pc, #668]	; (800bfcc <AT_QCCID+0x458>)
 800bd30:	fb01 f003 	mul.w	r0, r1, r3
 800bd34:	f645 21f3 	movw	r1, #23283	; 0x5af3
 800bd38:	fb01 f102 	mul.w	r1, r1, r2
 800bd3c:	4408      	add	r0, r1
 800bd3e:	49a3      	ldr	r1, [pc, #652]	; (800bfcc <AT_QCCID+0x458>)
 800bd40:	fba2 2301 	umull	r2, r3, r2, r1
 800bd44:	18c1      	adds	r1, r0, r3
 800bd46:	460b      	mov	r3, r1
 800bd48:	18a1      	adds	r1, r4, r2
 800bd4a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800bd4e:	eb45 0303 	adc.w	r3, r5, r3
 800bd52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd56:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800bd5a:	4623      	mov	r3, r4
 800bd5c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bd60:	4602      	mov	r2, r0
 800bd62:	189b      	adds	r3, r3, r2
 800bd64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd68:	460b      	mov	r3, r1
 800bd6a:	462a      	mov	r2, r5
 800bd6c:	eb42 0303 	adc.w	r3, r2, r3
 800bd70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd78:	3338      	adds	r3, #56	; 0x38
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	4994      	ldr	r1, [pc, #592]	; (800bfd0 <AT_QCCID+0x45c>)
 800bd80:	fb01 f003 	mul.w	r0, r1, r3
 800bd84:	2117      	movs	r1, #23
 800bd86:	fb01 f102 	mul.w	r1, r1, r2
 800bd8a:	4408      	add	r0, r1
 800bd8c:	4990      	ldr	r1, [pc, #576]	; (800bfd0 <AT_QCCID+0x45c>)
 800bd8e:	fba2 4501 	umull	r4, r5, r2, r1
 800bd92:	1943      	adds	r3, r0, r5
 800bd94:	461d      	mov	r5, r3
 800bd96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd9a:	3330      	adds	r3, #48	; 0x30
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	498c      	ldr	r1, [pc, #560]	; (800bfd4 <AT_QCCID+0x460>)
 800bda2:	fb01 f003 	mul.w	r0, r1, r3
 800bda6:	21e8      	movs	r1, #232	; 0xe8
 800bda8:	fb01 f102 	mul.w	r1, r1, r2
 800bdac:	4408      	add	r0, r1
 800bdae:	4989      	ldr	r1, [pc, #548]	; (800bfd4 <AT_QCCID+0x460>)
 800bdb0:	fba2 2301 	umull	r2, r3, r2, r1
 800bdb4:	18c1      	adds	r1, r0, r3
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	18a1      	adds	r1, r4, r2
 800bdba:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800bdbe:	eb45 0303 	adc.w	r3, r5, r3
 800bdc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bdc6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800bdca:	4623      	mov	r3, r4
 800bdcc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	189b      	adds	r3, r3, r2
 800bdd4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	462a      	mov	r2, r5
 800bdda:	eb42 0303 	adc.w	r3, r2, r3
 800bdde:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bde0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bde4:	3348      	adds	r3, #72	; 0x48
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	497b      	ldr	r1, [pc, #492]	; (800bfd8 <AT_QCCID+0x464>)
 800bdec:	fb01 f003 	mul.w	r0, r1, r3
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	fb01 f102 	mul.w	r1, r1, r2
 800bdf6:	4408      	add	r0, r1
 800bdf8:	4977      	ldr	r1, [pc, #476]	; (800bfd8 <AT_QCCID+0x464>)
 800bdfa:	fba2 4501 	umull	r4, r5, r2, r1
 800bdfe:	1943      	adds	r3, r0, r5
 800be00:	461d      	mov	r5, r3
 800be02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be06:	3340      	adds	r3, #64	; 0x40
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	4973      	ldr	r1, [pc, #460]	; (800bfdc <AT_QCCID+0x468>)
 800be0e:	fb01 f003 	mul.w	r0, r1, r3
 800be12:	2102      	movs	r1, #2
 800be14:	fb01 f102 	mul.w	r1, r1, r2
 800be18:	4408      	add	r0, r1
 800be1a:	4970      	ldr	r1, [pc, #448]	; (800bfdc <AT_QCCID+0x468>)
 800be1c:	fba2 2301 	umull	r2, r3, r2, r1
 800be20:	18c1      	adds	r1, r0, r3
 800be22:	460b      	mov	r3, r1
 800be24:	18a1      	adds	r1, r4, r2
 800be26:	6739      	str	r1, [r7, #112]	; 0x70
 800be28:	eb45 0303 	adc.w	r3, r5, r3
 800be2c:	677b      	str	r3, [r7, #116]	; 0x74
 800be2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800be32:	4623      	mov	r3, r4
 800be34:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800be38:	4602      	mov	r2, r0
 800be3a:	189b      	adds	r3, r3, r2
 800be3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800be3e:	460b      	mov	r3, r1
 800be40:	462a      	mov	r2, r5
 800be42:	eb42 0303 	adc.w	r3, r2, r3
 800be46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be4c:	3358      	adds	r3, #88	; 0x58
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4963      	ldr	r1, [pc, #396]	; (800bfe0 <AT_QCCID+0x46c>)
 800be54:	fb01 f003 	mul.w	r0, r1, r3
 800be58:	2100      	movs	r1, #0
 800be5a:	fb01 f102 	mul.w	r1, r1, r2
 800be5e:	4408      	add	r0, r1
 800be60:	495f      	ldr	r1, [pc, #380]	; (800bfe0 <AT_QCCID+0x46c>)
 800be62:	fba2 4501 	umull	r4, r5, r2, r1
 800be66:	1943      	adds	r3, r0, r5
 800be68:	461d      	mov	r5, r3
 800be6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be6e:	3350      	adds	r3, #80	; 0x50
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	495b      	ldr	r1, [pc, #364]	; (800bfe4 <AT_QCCID+0x470>)
 800be76:	fb01 f003 	mul.w	r0, r1, r3
 800be7a:	2100      	movs	r1, #0
 800be7c:	fb01 f102 	mul.w	r1, r1, r2
 800be80:	4408      	add	r0, r1
 800be82:	4958      	ldr	r1, [pc, #352]	; (800bfe4 <AT_QCCID+0x470>)
 800be84:	fba2 2301 	umull	r2, r3, r2, r1
 800be88:	18c1      	adds	r1, r0, r3
 800be8a:	460b      	mov	r3, r1
 800be8c:	18a1      	adds	r1, r4, r2
 800be8e:	6639      	str	r1, [r7, #96]	; 0x60
 800be90:	eb45 0303 	adc.w	r3, r5, r3
 800be94:	667b      	str	r3, [r7, #100]	; 0x64
 800be96:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800be9a:	4623      	mov	r3, r4
 800be9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800bea0:	4602      	mov	r2, r0
 800bea2:	189b      	adds	r3, r3, r2
 800bea4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bea6:	460b      	mov	r3, r1
 800bea8:	462a      	mov	r2, r5
 800beaa:	eb42 0303 	adc.w	r3, r2, r3
 800beae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800beb4:	3368      	adds	r3, #104	; 0x68
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	494b      	ldr	r1, [pc, #300]	; (800bfe8 <AT_QCCID+0x474>)
 800bebc:	fb01 f003 	mul.w	r0, r1, r3
 800bec0:	2100      	movs	r1, #0
 800bec2:	fb01 f102 	mul.w	r1, r1, r2
 800bec6:	4408      	add	r0, r1
 800bec8:	4947      	ldr	r1, [pc, #284]	; (800bfe8 <AT_QCCID+0x474>)
 800beca:	fba2 8901 	umull	r8, r9, r2, r1
 800bece:	eb00 0309 	add.w	r3, r0, r9
 800bed2:	4699      	mov	r9, r3
 800bed4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bed8:	3360      	adds	r3, #96	; 0x60
 800beda:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	f04f 0000 	mov.w	r0, #0
 800bee6:	f04f 0100 	mov.w	r1, #0
 800beea:	0159      	lsls	r1, r3, #5
 800beec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bef0:	0150      	lsls	r0, r2, #5
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	1b12      	subs	r2, r2, r4
 800bef8:	eb63 0305 	sbc.w	r3, r3, r5
 800befc:	f04f 0000 	mov.w	r0, #0
 800bf00:	f04f 0100 	mov.w	r1, #0
 800bf04:	0259      	lsls	r1, r3, #9
 800bf06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800bf0a:	0250      	lsls	r0, r2, #9
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	1912      	adds	r2, r2, r4
 800bf12:	eb45 0303 	adc.w	r3, r5, r3
 800bf16:	f04f 0000 	mov.w	r0, #0
 800bf1a:	f04f 0100 	mov.w	r1, #0
 800bf1e:	0199      	lsls	r1, r3, #6
 800bf20:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800bf24:	0190      	lsls	r0, r2, #6
 800bf26:	1a80      	subs	r0, r0, r2
 800bf28:	eb61 0103 	sbc.w	r1, r1, r3
 800bf2c:	1903      	adds	r3, r0, r4
 800bf2e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf30:	eb41 0305 	adc.w	r3, r1, r5
 800bf34:	657b      	str	r3, [r7, #84]	; 0x54
 800bf36:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	eb18 0303 	adds.w	r3, r8, r3
 800bf40:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf42:	4613      	mov	r3, r2
 800bf44:	eb49 0303 	adc.w	r3, r9, r3
 800bf48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf4a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800bf4e:	4623      	mov	r3, r4
 800bf50:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bf54:	4602      	mov	r2, r0
 800bf56:	189b      	adds	r3, r3, r2
 800bf58:	643b      	str	r3, [r7, #64]	; 0x40
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	462a      	mov	r2, r5
 800bf5e:	eb42 0303 	adc.w	r3, r2, r3
 800bf62:	647b      	str	r3, [r7, #68]	; 0x44
 800bf64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf68:	3378      	adds	r3, #120	; 0x78
 800bf6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bf6e:	4622      	mov	r2, r4
 800bf70:	462b      	mov	r3, r5
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f04f 0100 	mov.w	r1, #0
 800bf7a:	0159      	lsls	r1, r3, #5
 800bf7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf80:	0150      	lsls	r0, r2, #5
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	1b12      	subs	r2, r2, r4
 800bf88:	eb63 0305 	sbc.w	r3, r3, r5
 800bf8c:	f04f 0000 	mov.w	r0, #0
 800bf90:	f04f 0100 	mov.w	r1, #0
 800bf94:	0099      	lsls	r1, r3, #2
 800bf96:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800bf9a:	0090      	lsls	r0, r2, #2
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	1912      	adds	r2, r2, r4
 800bfa2:	e023      	b.n	800bfec <AT_QCCID+0x478>
 800bfa4:	20009680 	.word	0x20009680
 800bfa8:	a7640000 	.word	0xa7640000
 800bfac:	0de0b6b3 	.word	0x0de0b6b3
 800bfb0:	5d8a0000 	.word	0x5d8a0000
 800bfb4:	01634578 	.word	0x01634578
 800bfb8:	a4c68000 	.word	0xa4c68000
 800bfbc:	00038d7e 	.word	0x00038d7e
 800bfc0:	6fc10000 	.word	0x6fc10000
 800bfc4:	002386f2 	.word	0x002386f2
 800bfc8:	4e72a000 	.word	0x4e72a000
 800bfcc:	107a4000 	.word	0x107a4000
 800bfd0:	4876e800 	.word	0x4876e800
 800bfd4:	d4a51000 	.word	0xd4a51000
 800bfd8:	3b9aca00 	.word	0x3b9aca00
 800bfdc:	540be400 	.word	0x540be400
 800bfe0:	00989680 	.word	0x00989680
 800bfe4:	05f5e100 	.word	0x05f5e100
 800bfe8:	000186a0 	.word	0x000186a0
 800bfec:	eb45 0303 	adc.w	r3, r5, r3
 800bff0:	f04f 0000 	mov.w	r0, #0
 800bff4:	f04f 0100 	mov.w	r1, #0
 800bff8:	00d9      	lsls	r1, r3, #3
 800bffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bffe:	00d0      	lsls	r0, r2, #3
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4690      	mov	r8, r2
 800c006:	4699      	mov	r9, r3
 800c008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c00c:	3370      	adds	r3, #112	; 0x70
 800c00e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c012:	4622      	mov	r2, r4
 800c014:	462b      	mov	r3, r5
 800c016:	f04f 0000 	mov.w	r0, #0
 800c01a:	f04f 0100 	mov.w	r1, #0
 800c01e:	0099      	lsls	r1, r3, #2
 800c020:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c024:	0090      	lsls	r0, r2, #2
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	1912      	adds	r2, r2, r4
 800c02c:	eb45 0303 	adc.w	r3, r5, r3
 800c030:	f04f 0000 	mov.w	r0, #0
 800c034:	f04f 0100 	mov.w	r1, #0
 800c038:	00d9      	lsls	r1, r3, #3
 800c03a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c03e:	00d0      	lsls	r0, r2, #3
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	1b12      	subs	r2, r2, r4
 800c046:	eb63 0305 	sbc.w	r3, r3, r5
 800c04a:	f04f 0000 	mov.w	r0, #0
 800c04e:	f04f 0100 	mov.w	r1, #0
 800c052:	0119      	lsls	r1, r3, #4
 800c054:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c058:	0110      	lsls	r0, r2, #4
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	1912      	adds	r2, r2, r4
 800c060:	eb45 0303 	adc.w	r3, r5, r3
 800c064:	f04f 0000 	mov.w	r0, #0
 800c068:	f04f 0100 	mov.w	r1, #0
 800c06c:	0119      	lsls	r1, r3, #4
 800c06e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c072:	0110      	lsls	r0, r2, #4
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	eb18 0102 	adds.w	r1, r8, r2
 800c07c:	63b9      	str	r1, [r7, #56]	; 0x38
 800c07e:	eb49 0303 	adc.w	r3, r9, r3
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c084:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c088:	4623      	mov	r3, r4
 800c08a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c08e:	4602      	mov	r2, r0
 800c090:	189b      	adds	r3, r3, r2
 800c092:	633b      	str	r3, [r7, #48]	; 0x30
 800c094:	460b      	mov	r3, r1
 800c096:	462a      	mov	r2, r5
 800c098:	eb42 0303 	adc.w	r3, r2, r3
 800c09c:	637b      	str	r3, [r7, #52]	; 0x34
 800c09e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0a2:	3388      	adds	r3, #136	; 0x88
 800c0a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	f04f 0000 	mov.w	r0, #0
 800c0b0:	f04f 0100 	mov.w	r1, #0
 800c0b4:	0099      	lsls	r1, r3, #2
 800c0b6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c0ba:	0090      	lsls	r0, r2, #2
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	1912      	adds	r2, r2, r4
 800c0c2:	eb45 0303 	adc.w	r3, r5, r3
 800c0c6:	1891      	adds	r1, r2, r2
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	415b      	adcs	r3, r3
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0d2:	4690      	mov	r8, r2
 800c0d4:	4699      	mov	r9, r3
 800c0d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0da:	3380      	adds	r3, #128	; 0x80
 800c0dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	1891      	adds	r1, r2, r2
 800c0e6:	6039      	str	r1, [r7, #0]
 800c0e8:	415b      	adcs	r3, r3
 800c0ea:	607b      	str	r3, [r7, #4]
 800c0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0f0:	1912      	adds	r2, r2, r4
 800c0f2:	eb45 0303 	adc.w	r3, r5, r3
 800c0f6:	f04f 0000 	mov.w	r0, #0
 800c0fa:	f04f 0100 	mov.w	r1, #0
 800c0fe:	0159      	lsls	r1, r3, #5
 800c100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c104:	0150      	lsls	r0, r2, #5
 800c106:	1812      	adds	r2, r2, r0
 800c108:	eb41 0303 	adc.w	r3, r1, r3
 800c10c:	1911      	adds	r1, r2, r4
 800c10e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c110:	416b      	adcs	r3, r5
 800c112:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c114:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c118:	460b      	mov	r3, r1
 800c11a:	eb18 0303 	adds.w	r3, r8, r3
 800c11e:	623b      	str	r3, [r7, #32]
 800c120:	4613      	mov	r3, r2
 800c122:	eb49 0303 	adc.w	r3, r9, r3
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
 800c128:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c12c:	4623      	mov	r3, r4
 800c12e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c132:	4602      	mov	r2, r0
 800c134:	189b      	adds	r3, r3, r2
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	460b      	mov	r3, r1
 800c13a:	462a      	mov	r2, r5
 800c13c:	eb42 0303 	adc.w	r3, r2, r3
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c146:	3390      	adds	r3, #144	; 0x90
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800c150:	3198      	adds	r1, #152	; 0x98
 800c152:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800c156:	4620      	mov	r0, r4
 800c158:	1880      	adds	r0, r0, r2
 800c15a:	6138      	str	r0, [r7, #16]
 800c15c:	4628      	mov	r0, r5
 800c15e:	eb43 0000 	adc.w	r0, r3, r0
 800c162:	6178      	str	r0, [r7, #20]
 800c164:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c168:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 800c16c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c170:	3398      	adds	r3, #152	; 0x98
 800c172:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c176:	f04f 0200 	mov.w	r2, #0
 800c17a:	f04f 0300 	mov.w	r3, #0
 800c17e:	0e0a      	lsrs	r2, r1, #24
 800c180:	2300      	movs	r3, #0
 800c182:	b2d2      	uxtb	r2, r2
 800c184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c188:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 800c18a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c18e:	3398      	adds	r3, #152	; 0x98
 800c190:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c194:	f04f 0200 	mov.w	r2, #0
 800c198:	f04f 0300 	mov.w	r3, #0
 800c19c:	0c0a      	lsrs	r2, r1, #16
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1a4:	3101      	adds	r1, #1
 800c1a6:	b2d3      	uxtb	r3, r2
 800c1a8:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 800c1aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ae:	3398      	adds	r3, #152	; 0x98
 800c1b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1b4:	f04f 0200 	mov.w	r2, #0
 800c1b8:	f04f 0300 	mov.w	r3, #0
 800c1bc:	0a0a      	lsrs	r2, r1, #8
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1c4:	3102      	adds	r1, #2
 800c1c6:	b2d3      	uxtb	r3, r2
 800c1c8:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 800c1ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ce:	3398      	adds	r3, #152	; 0x98
 800c1d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1d4:	f04f 0200 	mov.w	r2, #0
 800c1d8:	f04f 0300 	mov.w	r3, #0
 800c1dc:	000a      	movs	r2, r1
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1e4:	3103      	adds	r1, #3
 800c1e6:	b2d3      	uxtb	r3, r2
 800c1e8:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 800c1ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1ee:	3398      	adds	r3, #152	; 0x98
 800c1f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1f4:	f04f 0200 	mov.w	r2, #0
 800c1f8:	f04f 0300 	mov.w	r3, #0
 800c1fc:	0e02      	lsrs	r2, r0, #24
 800c1fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c202:	0e0b      	lsrs	r3, r1, #24
 800c204:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c208:	3104      	adds	r1, #4
 800c20a:	b2d3      	uxtb	r3, r2
 800c20c:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 800c20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c212:	3398      	adds	r3, #152	; 0x98
 800c214:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c218:	f04f 0200 	mov.w	r2, #0
 800c21c:	f04f 0300 	mov.w	r3, #0
 800c220:	0c02      	lsrs	r2, r0, #16
 800c222:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c226:	0c0b      	lsrs	r3, r1, #16
 800c228:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c22c:	3105      	adds	r1, #5
 800c22e:	b2d3      	uxtb	r3, r2
 800c230:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 800c232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c236:	3398      	adds	r3, #152	; 0x98
 800c238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c23c:	f04f 0200 	mov.w	r2, #0
 800c240:	f04f 0300 	mov.w	r3, #0
 800c244:	0a02      	lsrs	r2, r0, #8
 800c246:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c24a:	0a0b      	lsrs	r3, r1, #8
 800c24c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c250:	3106      	adds	r1, #6
 800c252:	b2d3      	uxtb	r3, r2
 800c254:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 800c256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c25a:	3398      	adds	r3, #152	; 0x98
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c264:	3107      	adds	r1, #7
 800c266:	b2d3      	uxtb	r3, r2
 800c268:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e005      	b.n	800c27a <AT_QCCID+0x706>
	while(read_rx_state == ACTIVE)
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <AT_QCCID+0x710>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	2b01      	cmp	r3, #1
 800c274:	f43f acaf 	beq.w	800bbd6 <AT_QCCID+0x62>
		}

	}
	return AT_ERROR;
 800c278:	2301      	movs	r3, #1
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	37b8      	adds	r7, #184	; 0xb8
 800c27e:	46bd      	mov	sp, r7
 800c280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c284:	20009558 	.word	0x20009558

0800c288 <AT_COPS>:

uint8_t AT_COPS (void)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
	char str_out[9];
	sprintf(str_out, "AT+COPS?\n");
 800c28e:	1d3b      	adds	r3, r7, #4
 800c290:	4921      	ldr	r1, [pc, #132]	; (800c318 <AT_COPS+0x90>)
 800c292:	4618      	mov	r0, r3
 800c294:	f002 fca0 	bl	800ebd8 <siprintf>

	read_rx_state = ACTIVE;
 800c298:	4b20      	ldr	r3, [pc, #128]	; (800c31c <AT_COPS+0x94>)
 800c29a:	2201      	movs	r2, #1
 800c29c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c29e:	4b20      	ldr	r3, [pc, #128]	; (800c320 <AT_COPS+0x98>)
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c2a4:	f7ff fb22 	bl	800b8ec <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	491e      	ldr	r1, [pc, #120]	; (800c324 <AT_COPS+0x9c>)
 800c2ac:	481e      	ldr	r0, [pc, #120]	; (800c328 <AT_COPS+0xa0>)
 800c2ae:	f7f8 ff15 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800c2b2:	1d3b      	adds	r3, r7, #4
 800c2b4:	2209      	movs	r2, #9
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	481b      	ldr	r0, [pc, #108]	; (800c328 <AT_COPS+0xa0>)
 800c2ba:	f7f8 fe91 	bl	8004fe0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_cops, 9);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c2be:	4b1b      	ldr	r3, [pc, #108]	; (800c32c <AT_COPS+0xa4>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f04f 31ff 	mov.w	r1, #4294967295
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fa f98e 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800c2cc:	4b18      	ldr	r3, [pc, #96]	; (800c330 <AT_COPS+0xa8>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f241 3188 	movw	r1, #5000	; 0x1388
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7fa f82b 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c2da:	e014      	b.n	800c306 <AT_COPS+0x7e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "MTS") != NULL )
 800c2dc:	4915      	ldr	r1, [pc, #84]	; (800c334 <AT_COPS+0xac>)
 800c2de:	4816      	ldr	r0, [pc, #88]	; (800c338 <AT_COPS+0xb0>)
 800c2e0:	f002 fc9a 	bl	800ec18 <strstr>
		{
			// Здесь должно быть то, что необходимо сделать, если пришло значение "МТС"
		}

		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c2e4:	4915      	ldr	r1, [pc, #84]	; (800c33c <AT_COPS+0xb4>)
 800c2e6:	4814      	ldr	r0, [pc, #80]	; (800c338 <AT_COPS+0xb0>)
 800c2e8:	f002 fc96 	bl	800ec18 <strstr>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d009      	beq.n	800c306 <AT_COPS+0x7e>
		{
			osTimerStop(AT_TimerHandle);
 800c2f2:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <AT_COPS+0xa8>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fa f85e 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c2fc:	4b07      	ldr	r3, [pc, #28]	; (800c31c <AT_COPS+0x94>)
 800c2fe:	2200      	movs	r2, #0
 800c300:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	e004      	b.n	800c310 <AT_COPS+0x88>
	while(read_rx_state == ACTIVE)
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <AT_COPS+0x94>)
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d0e6      	beq.n	800c2dc <AT_COPS+0x54>
		}


	}
	return AT_ERROR;
 800c30e:	2301      	movs	r3, #1
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	0800f4fc 	.word	0x0800f4fc
 800c31c:	20009558 	.word	0x20009558
 800c320:	2000080c 	.word	0x2000080c
 800c324:	20009580 	.word	0x20009580
 800c328:	20008068 	.word	0x20008068
 800c32c:	2000978c 	.word	0x2000978c
 800c330:	200094c8 	.word	0x200094c8
 800c334:	0800f508 	.word	0x0800f508
 800c338:	20009680 	.word	0x20009680
 800c33c:	0800f4d0 	.word	0x0800f4d0

0800c340 <AT_QIOPEN>:

uint8_t AT_QIOPEN (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b098      	sub	sp, #96	; 0x60
 800c344:	af04      	add	r7, sp, #16
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	4608      	mov	r0, r1
 800c34a:	4611      	mov	r1, r2
 800c34c:	461a      	mov	r2, r3
 800c34e:	4603      	mov	r3, r0
 800c350:	70fb      	strb	r3, [r7, #3]
 800c352:	460b      	mov	r3, r1
 800c354:	70bb      	strb	r3, [r7, #2]
 800c356:	4613      	mov	r3, r2
 800c358:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[40];
	uint8_t n;

	sprintf(str1, "%s", type);
 800c35a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4951      	ldr	r1, [pc, #324]	; (800c4a8 <AT_QIOPEN+0x168>)
 800c362:	4618      	mov	r0, r3
 800c364:	f002 fc38 	bl	800ebd8 <siprintf>
	sprintf(str2, "%u", ip1);
 800c368:	78fa      	ldrb	r2, [r7, #3]
 800c36a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c36e:	494f      	ldr	r1, [pc, #316]	; (800c4ac <AT_QIOPEN+0x16c>)
 800c370:	4618      	mov	r0, r3
 800c372:	f002 fc31 	bl	800ebd8 <siprintf>
	sprintf(str3, "%u", ip2);
 800c376:	78ba      	ldrb	r2, [r7, #2]
 800c378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c37c:	494b      	ldr	r1, [pc, #300]	; (800c4ac <AT_QIOPEN+0x16c>)
 800c37e:	4618      	mov	r0, r3
 800c380:	f002 fc2a 	bl	800ebd8 <siprintf>
	sprintf(str4, "%u", ip3);
 800c384:	787a      	ldrb	r2, [r7, #1]
 800c386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c38a:	4948      	ldr	r1, [pc, #288]	; (800c4ac <AT_QIOPEN+0x16c>)
 800c38c:	4618      	mov	r0, r3
 800c38e:	f002 fc23 	bl	800ebd8 <siprintf>
	sprintf(str5, "%u", ip4);
 800c392:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800c396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c39a:	4944      	ldr	r1, [pc, #272]	; (800c4ac <AT_QIOPEN+0x16c>)
 800c39c:	4618      	mov	r0, r3
 800c39e:	f002 fc1b 	bl	800ebd8 <siprintf>
	sprintf(str6, "%u", port);
 800c3a2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800c3a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c3aa:	4940      	ldr	r1, [pc, #256]	; (800c4ac <AT_QIOPEN+0x16c>)
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f002 fc13 	bl	800ebd8 <siprintf>

	n = sprintf(str7, "AT+QIOPEN=\"%s\",\"%s.%s.%s.%s\",%s\n", str1, str2, str3, str4, str5, str6);
 800c3b2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c3b6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800c3ba:	f107 000c 	add.w	r0, r7, #12
 800c3be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4935      	ldr	r1, [pc, #212]	; (800c4b0 <AT_QIOPEN+0x170>)
 800c3da:	f002 fbfd 	bl	800ebd8 <siprintf>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 800c3e4:	4b33      	ldr	r3, [pc, #204]	; (800c4b4 <AT_QIOPEN+0x174>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c3ea:	4b33      	ldr	r3, [pc, #204]	; (800c4b8 <AT_QIOPEN+0x178>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c3f0:	f7ff fa7c 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	4931      	ldr	r1, [pc, #196]	; (800c4bc <AT_QIOPEN+0x17c>)
 800c3f8:	4831      	ldr	r0, [pc, #196]	; (800c4c0 <AT_QIOPEN+0x180>)
 800c3fa:	f7f8 fe6f 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 800c3fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c402:	b29a      	uxth	r2, r3
 800c404:	f107 030c 	add.w	r3, r7, #12
 800c408:	4619      	mov	r1, r3
 800c40a:	482d      	ldr	r0, [pc, #180]	; (800c4c0 <AT_QIOPEN+0x180>)
 800c40c:	f7f8 fde8 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c410:	4b2c      	ldr	r3, [pc, #176]	; (800c4c4 <AT_QIOPEN+0x184>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f04f 31ff 	mov.w	r1, #4294967295
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fa f8e5 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 800c41e:	4b2a      	ldr	r3, [pc, #168]	; (800c4c8 <AT_QIOPEN+0x188>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c426:	4618      	mov	r0, r3
 800c428:	f7f9 ff82 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c42c:	e032      	b.n	800c494 <AT_QIOPEN+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 800c42e:	4927      	ldr	r1, [pc, #156]	; (800c4cc <AT_QIOPEN+0x18c>)
 800c430:	4827      	ldr	r0, [pc, #156]	; (800c4d0 <AT_QIOPEN+0x190>)
 800c432:	f002 fbf1 	bl	800ec18 <strstr>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d009      	beq.n	800c450 <AT_QIOPEN+0x110>
		{
			osTimerStop(AT_TimerHandle);
 800c43c:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <AT_QIOPEN+0x188>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4618      	mov	r0, r3
 800c442:	f7f9 ffb9 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c446:	4b1b      	ldr	r3, [pc, #108]	; (800c4b4 <AT_QIOPEN+0x174>)
 800c448:	2200      	movs	r2, #0
 800c44a:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	e026      	b.n	800c49e <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 800c450:	4920      	ldr	r1, [pc, #128]	; (800c4d4 <AT_QIOPEN+0x194>)
 800c452:	481f      	ldr	r0, [pc, #124]	; (800c4d0 <AT_QIOPEN+0x190>)
 800c454:	f002 fbe0 	bl	800ec18 <strstr>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d009      	beq.n	800c472 <AT_QIOPEN+0x132>
		{
			osTimerStop(AT_TimerHandle);
 800c45e:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <AT_QIOPEN+0x188>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4618      	mov	r0, r3
 800c464:	f7f9 ffa8 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c468:	4b12      	ldr	r3, [pc, #72]	; (800c4b4 <AT_QIOPEN+0x174>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	e015      	b.n	800c49e <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 800c472:	4919      	ldr	r1, [pc, #100]	; (800c4d8 <AT_QIOPEN+0x198>)
 800c474:	4816      	ldr	r0, [pc, #88]	; (800c4d0 <AT_QIOPEN+0x190>)
 800c476:	f002 fbcf 	bl	800ec18 <strstr>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d009      	beq.n	800c494 <AT_QIOPEN+0x154>
		{
			osTimerStop(AT_TimerHandle);
 800c480:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <AT_QIOPEN+0x188>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f7f9 ff97 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c48a:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <AT_QIOPEN+0x174>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e004      	b.n	800c49e <AT_QIOPEN+0x15e>
	while(read_rx_state == ACTIVE)
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <AT_QIOPEN+0x174>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d0c8      	beq.n	800c42e <AT_QIOPEN+0xee>
		}

	}
	return AT_ERROR;
 800c49c:	2301      	movs	r3, #1

}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3750      	adds	r7, #80	; 0x50
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	0800f50c 	.word	0x0800f50c
 800c4ac:	0800f510 	.word	0x0800f510
 800c4b0:	0800f514 	.word	0x0800f514
 800c4b4:	20009558 	.word	0x20009558
 800c4b8:	2000080c 	.word	0x2000080c
 800c4bc:	20009580 	.word	0x20009580
 800c4c0:	20008068 	.word	0x20008068
 800c4c4:	2000978c 	.word	0x2000978c
 800c4c8:	200094c8 	.word	0x200094c8
 800c4cc:	0800f538 	.word	0x0800f538
 800c4d0:	20009680 	.word	0x20009680
 800c4d4:	0800f548 	.word	0x0800f548
 800c4d8:	0800f55c 	.word	0x0800f55c

0800c4dc <AT_QISEND>:
	}
	return AT_ERROR;
}

uint8_t AT_QISEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[15];

	n1 = sprintf(str_out, "AT+QISEND=%u\n", length);
 800c4e8:	887a      	ldrh	r2, [r7, #2]
 800c4ea:	f107 0308 	add.w	r3, r7, #8
 800c4ee:	493b      	ldr	r1, [pc, #236]	; (800c5dc <AT_QISEND+0x100>)
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f002 fb71 	bl	800ebd8 <siprintf>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]

 	read_rx_state = ACTIVE;
 800c4fa:	4b39      	ldr	r3, [pc, #228]	; (800c5e0 <AT_QISEND+0x104>)
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c500:	4b38      	ldr	r3, [pc, #224]	; (800c5e4 <AT_QISEND+0x108>)
 800c502:	2200      	movs	r2, #0
 800c504:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c506:	f7ff f9f1 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c50a:	2201      	movs	r2, #1
 800c50c:	4936      	ldr	r1, [pc, #216]	; (800c5e8 <AT_QISEND+0x10c>)
 800c50e:	4837      	ldr	r0, [pc, #220]	; (800c5ec <AT_QISEND+0x110>)
 800c510:	f7f8 fde4 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	b29a      	uxth	r2, r3
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	4619      	mov	r1, r3
 800c51e:	4833      	ldr	r0, [pc, #204]	; (800c5ec <AT_QISEND+0x110>)
 800c520:	f7f8 fd5e 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c524:	4b32      	ldr	r3, [pc, #200]	; (800c5f0 <AT_QISEND+0x114>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f04f 31ff 	mov.w	r1, #4294967295
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fa f85b 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c532:	4b30      	ldr	r3, [pc, #192]	; (800c5f4 <AT_QISEND+0x118>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7f9 fef8 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c540:	e043      	b.n	800c5ca <AT_QISEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 800c542:	492d      	ldr	r1, [pc, #180]	; (800c5f8 <AT_QISEND+0x11c>)
 800c544:	482d      	ldr	r0, [pc, #180]	; (800c5fc <AT_QISEND+0x120>)
 800c546:	f002 fb67 	bl	800ec18 <strstr>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d03c      	beq.n	800c5ca <AT_QISEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 800c550:	4b28      	ldr	r3, [pc, #160]	; (800c5f4 <AT_QISEND+0x118>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f7f9 ff2f 	bl	80063b8 <osTimerStop>
			modem_rx_number = 0;
 800c55a:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <AT_QISEND+0x108>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 800c560:	f7ff f9c4 	bl	800b8ec <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c564:	2201      	movs	r2, #1
 800c566:	4920      	ldr	r1, [pc, #128]	; (800c5e8 <AT_QISEND+0x10c>)
 800c568:	4820      	ldr	r0, [pc, #128]	; (800c5ec <AT_QISEND+0x110>)
 800c56a:	f7f8 fdb7 	bl	80050dc <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 800c56e:	887b      	ldrh	r3, [r7, #2]
 800c570:	461a      	mov	r2, r3
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	481d      	ldr	r0, [pc, #116]	; (800c5ec <AT_QISEND+0x110>)
 800c576:	f7f8 fd33 	bl	8004fe0 <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c57a:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <AT_QISEND+0x114>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f04f 31ff 	mov.w	r1, #4294967295
 800c582:	4618      	mov	r0, r3
 800c584:	f7fa f830 	bl	80065e8 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 800c588:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <AT_QISEND+0x118>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c590:	4618      	mov	r0, r3
 800c592:	f7f9 fecd 	bl	8006330 <osTimerStart>
			while(read_rx_state == ACTIVE)
 800c596:	e012      	b.n	800c5be <AT_QISEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 800c598:	2307      	movs	r3, #7
 800c59a:	4a19      	ldr	r2, [pc, #100]	; (800c600 <AT_QISEND+0x124>)
 800c59c:	21ff      	movs	r1, #255	; 0xff
 800c59e:	4817      	ldr	r0, [pc, #92]	; (800c5fc <AT_QISEND+0x120>)
 800c5a0:	f7ff f938 	bl	800b814 <find_str>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d109      	bne.n	800c5be <AT_QISEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 800c5aa:	4b12      	ldr	r3, [pc, #72]	; (800c5f4 <AT_QISEND+0x118>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f9 ff02 	bl	80063b8 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <AT_QISEND+0x104>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e00a      	b.n	800c5d4 <AT_QISEND+0xf8>
			while(read_rx_state == ACTIVE)
 800c5be:	4b08      	ldr	r3, [pc, #32]	; (800c5e0 <AT_QISEND+0x104>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d0e8      	beq.n	800c598 <AT_QISEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e004      	b.n	800c5d4 <AT_QISEND+0xf8>
	while(read_rx_state == ACTIVE)
 800c5ca:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <AT_QISEND+0x104>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d0b7      	beq.n	800c542 <AT_QISEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 800c5d2:	2301      	movs	r3, #1

}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	0800f584 	.word	0x0800f584
 800c5e0:	20009558 	.word	0x20009558
 800c5e4:	2000080c 	.word	0x2000080c
 800c5e8:	20009580 	.word	0x20009580
 800c5ec:	20008068 	.word	0x20008068
 800c5f0:	2000978c 	.word	0x2000978c
 800c5f4:	200094c8 	.word	0x200094c8
 800c5f8:	0800f594 	.word	0x0800f594
 800c5fc:	20009680 	.word	0x20009680
 800c600:	20000018 	.word	0x20000018

0800c604 <AT_QIMUX>:
	}
	return AT_ERROR;
}

uint8_t AT_QIMUX (uint8_t mode) // Команда для включения или отключения возможности нескольких сессий TCP/IP, 1 - включено, 0 - выключено
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
	char str_out[11];
	sprintf(str_out, "AT+QIMUX=%u\n", mode);
 800c60e:	79fa      	ldrb	r2, [r7, #7]
 800c610:	f107 030c 	add.w	r3, r7, #12
 800c614:	4928      	ldr	r1, [pc, #160]	; (800c6b8 <AT_QIMUX+0xb4>)
 800c616:	4618      	mov	r0, r3
 800c618:	f002 fade 	bl	800ebd8 <siprintf>
	read_rx_state = ACTIVE;
 800c61c:	4b27      	ldr	r3, [pc, #156]	; (800c6bc <AT_QIMUX+0xb8>)
 800c61e:	2201      	movs	r2, #1
 800c620:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c622:	4b27      	ldr	r3, [pc, #156]	; (800c6c0 <AT_QIMUX+0xbc>)
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c628:	f7ff f960 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c62c:	2201      	movs	r2, #1
 800c62e:	4925      	ldr	r1, [pc, #148]	; (800c6c4 <AT_QIMUX+0xc0>)
 800c630:	4825      	ldr	r0, [pc, #148]	; (800c6c8 <AT_QIMUX+0xc4>)
 800c632:	f7f8 fd53 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	220b      	movs	r2, #11
 800c63c:	4619      	mov	r1, r3
 800c63e:	4822      	ldr	r0, [pc, #136]	; (800c6c8 <AT_QIMUX+0xc4>)
 800c640:	f7f8 fcce 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c644:	4b21      	ldr	r3, [pc, #132]	; (800c6cc <AT_QIMUX+0xc8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f04f 31ff 	mov.w	r1, #4294967295
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f9 ffcb 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c652:	4b1f      	ldr	r3, [pc, #124]	; (800c6d0 <AT_QIMUX+0xcc>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7f9 fe68 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c660:	e021      	b.n	800c6a6 <AT_QIMUX+0xa2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c662:	491c      	ldr	r1, [pc, #112]	; (800c6d4 <AT_QIMUX+0xd0>)
 800c664:	481c      	ldr	r0, [pc, #112]	; (800c6d8 <AT_QIMUX+0xd4>)
 800c666:	f002 fad7 	bl	800ec18 <strstr>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d009      	beq.n	800c684 <AT_QIMUX+0x80>
		{
			osTimerStop(AT_TimerHandle);
 800c670:	4b17      	ldr	r3, [pc, #92]	; (800c6d0 <AT_QIMUX+0xcc>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4618      	mov	r0, r3
 800c676:	f7f9 fe9f 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c67a:	4b10      	ldr	r3, [pc, #64]	; (800c6bc <AT_QIMUX+0xb8>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	e015      	b.n	800c6b0 <AT_QIMUX+0xac>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c684:	4915      	ldr	r1, [pc, #84]	; (800c6dc <AT_QIMUX+0xd8>)
 800c686:	4814      	ldr	r0, [pc, #80]	; (800c6d8 <AT_QIMUX+0xd4>)
 800c688:	f002 fac6 	bl	800ec18 <strstr>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d009      	beq.n	800c6a6 <AT_QIMUX+0xa2>
		{
			osTimerStop(AT_TimerHandle);
 800c692:	4b0f      	ldr	r3, [pc, #60]	; (800c6d0 <AT_QIMUX+0xcc>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4618      	mov	r0, r3
 800c698:	f7f9 fe8e 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c69c:	4b07      	ldr	r3, [pc, #28]	; (800c6bc <AT_QIMUX+0xb8>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e004      	b.n	800c6b0 <AT_QIMUX+0xac>
	while(read_rx_state == ACTIVE)
 800c6a6:	4b05      	ldr	r3, [pc, #20]	; (800c6bc <AT_QIMUX+0xb8>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d0d9      	beq.n	800c662 <AT_QIMUX+0x5e>
		}

	}
	return AT_ERROR;
 800c6ae:	2301      	movs	r3, #1
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	0800f5b0 	.word	0x0800f5b0
 800c6bc:	20009558 	.word	0x20009558
 800c6c0:	2000080c 	.word	0x2000080c
 800c6c4:	20009580 	.word	0x20009580
 800c6c8:	20008068 	.word	0x20008068
 800c6cc:	2000978c 	.word	0x2000978c
 800c6d0:	200094c8 	.word	0x200094c8
 800c6d4:	0800f4d0 	.word	0x0800f4d0
 800c6d8:	20009680 	.word	0x20009680
 800c6dc:	0800f5a8 	.word	0x0800f5a8

0800c6e0 <AT_QIREGAPP>:
	}
	return AT_ERROR;
}

uint8_t AT_QIREGAPP  (char* apn, char* user, char* password)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b0a0      	sub	sp, #128	; 0x80
 800c6e4:	af02      	add	r7, sp, #8
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[100];
	sprintf(str_out, "AT+QIREGAPP=\"%s\",\"%s\",\"%s\"\n", apn, user, password);
 800c6ec:	f107 0010 	add.w	r0, r7, #16
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	492d      	ldr	r1, [pc, #180]	; (800c7b0 <AT_QIREGAPP+0xd0>)
 800c6fa:	f002 fa6d 	bl	800ebd8 <siprintf>
	n = strlen(str_out);
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	4618      	mov	r0, r3
 800c704:	f7f3 fd64 	bl	80001d0 <strlen>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 800c70e:	4b29      	ldr	r3, [pc, #164]	; (800c7b4 <AT_QIREGAPP+0xd4>)
 800c710:	2201      	movs	r2, #1
 800c712:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c714:	4b28      	ldr	r3, [pc, #160]	; (800c7b8 <AT_QIREGAPP+0xd8>)
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c71a:	f7ff f8e7 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c71e:	2201      	movs	r2, #1
 800c720:	4926      	ldr	r1, [pc, #152]	; (800c7bc <AT_QIREGAPP+0xdc>)
 800c722:	4827      	ldr	r0, [pc, #156]	; (800c7c0 <AT_QIREGAPP+0xe0>)
 800c724:	f7f8 fcda 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 800c728:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800c72c:	b29a      	uxth	r2, r3
 800c72e:	f107 0310 	add.w	r3, r7, #16
 800c732:	4619      	mov	r1, r3
 800c734:	4822      	ldr	r0, [pc, #136]	; (800c7c0 <AT_QIREGAPP+0xe0>)
 800c736:	f7f8 fc53 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c73a:	4b22      	ldr	r3, [pc, #136]	; (800c7c4 <AT_QIREGAPP+0xe4>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f04f 31ff 	mov.w	r1, #4294967295
 800c742:	4618      	mov	r0, r3
 800c744:	f7f9 ff50 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c748:	4b1f      	ldr	r3, [pc, #124]	; (800c7c8 <AT_QIREGAPP+0xe8>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c750:	4618      	mov	r0, r3
 800c752:	f7f9 fded 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c756:	e021      	b.n	800c79c <AT_QIREGAPP+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c758:	491c      	ldr	r1, [pc, #112]	; (800c7cc <AT_QIREGAPP+0xec>)
 800c75a:	481d      	ldr	r0, [pc, #116]	; (800c7d0 <AT_QIREGAPP+0xf0>)
 800c75c:	f002 fa5c 	bl	800ec18 <strstr>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d009      	beq.n	800c77a <AT_QIREGAPP+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 800c766:	4b18      	ldr	r3, [pc, #96]	; (800c7c8 <AT_QIREGAPP+0xe8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7f9 fe24 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c770:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <AT_QIREGAPP+0xd4>)
 800c772:	2200      	movs	r2, #0
 800c774:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c776:	2300      	movs	r3, #0
 800c778:	e015      	b.n	800c7a6 <AT_QIREGAPP+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c77a:	4916      	ldr	r1, [pc, #88]	; (800c7d4 <AT_QIREGAPP+0xf4>)
 800c77c:	4814      	ldr	r0, [pc, #80]	; (800c7d0 <AT_QIREGAPP+0xf0>)
 800c77e:	f002 fa4b 	bl	800ec18 <strstr>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d009      	beq.n	800c79c <AT_QIREGAPP+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 800c788:	4b0f      	ldr	r3, [pc, #60]	; (800c7c8 <AT_QIREGAPP+0xe8>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7f9 fe13 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c792:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <AT_QIREGAPP+0xd4>)
 800c794:	2200      	movs	r2, #0
 800c796:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	e004      	b.n	800c7a6 <AT_QIREGAPP+0xc6>
	while(read_rx_state == ACTIVE)
 800c79c:	4b05      	ldr	r3, [pc, #20]	; (800c7b4 <AT_QIREGAPP+0xd4>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d0d9      	beq.n	800c758 <AT_QIREGAPP+0x78>
		}

	}
	return AT_ERROR;
 800c7a4:	2301      	movs	r3, #1

}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3778      	adds	r7, #120	; 0x78
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	0800f5d0 	.word	0x0800f5d0
 800c7b4:	20009558 	.word	0x20009558
 800c7b8:	2000080c 	.word	0x2000080c
 800c7bc:	20009580 	.word	0x20009580
 800c7c0:	20008068 	.word	0x20008068
 800c7c4:	2000978c 	.word	0x2000978c
 800c7c8:	200094c8 	.word	0x200094c8
 800c7cc:	0800f4d0 	.word	0x0800f4d0
 800c7d0:	20009680 	.word	0x20009680
 800c7d4:	0800f5a8 	.word	0x0800f5a8

0800c7d8 <AT_QIACT>:

uint8_t AT_QIACT (void)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
	uint8_t str_out[9];
	sprintf(str_out, "AT+QIACT\n");
 800c7de:	1d3b      	adds	r3, r7, #4
 800c7e0:	4927      	ldr	r1, [pc, #156]	; (800c880 <AT_QIACT+0xa8>)
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f002 f9f8 	bl	800ebd8 <siprintf>
	read_rx_state = ACTIVE;
 800c7e8:	4b26      	ldr	r3, [pc, #152]	; (800c884 <AT_QIACT+0xac>)
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c7ee:	4b26      	ldr	r3, [pc, #152]	; (800c888 <AT_QIACT+0xb0>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c7f4:	f7ff f87a 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	4924      	ldr	r1, [pc, #144]	; (800c88c <AT_QIACT+0xb4>)
 800c7fc:	4824      	ldr	r0, [pc, #144]	; (800c890 <AT_QIACT+0xb8>)
 800c7fe:	f7f8 fc6d 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800c802:	1d3b      	adds	r3, r7, #4
 800c804:	2209      	movs	r2, #9
 800c806:	4619      	mov	r1, r3
 800c808:	4821      	ldr	r0, [pc, #132]	; (800c890 <AT_QIACT+0xb8>)
 800c80a:	f7f8 fbe9 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c80e:	4b21      	ldr	r3, [pc, #132]	; (800c894 <AT_QIACT+0xbc>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f04f 31ff 	mov.w	r1, #4294967295
 800c816:	4618      	mov	r0, r3
 800c818:	f7f9 fee6 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 150000);
 800c81c:	4b1e      	ldr	r3, [pc, #120]	; (800c898 <AT_QIACT+0xc0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	491e      	ldr	r1, [pc, #120]	; (800c89c <AT_QIACT+0xc4>)
 800c822:	4618      	mov	r0, r3
 800c824:	f7f9 fd84 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c828:	e021      	b.n	800c86e <AT_QIACT+0x96>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c82a:	491d      	ldr	r1, [pc, #116]	; (800c8a0 <AT_QIACT+0xc8>)
 800c82c:	481d      	ldr	r0, [pc, #116]	; (800c8a4 <AT_QIACT+0xcc>)
 800c82e:	f002 f9f3 	bl	800ec18 <strstr>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d009      	beq.n	800c84c <AT_QIACT+0x74>
		{
			osTimerStop(AT_TimerHandle);
 800c838:	4b17      	ldr	r3, [pc, #92]	; (800c898 <AT_QIACT+0xc0>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7f9 fdbb 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c842:	4b10      	ldr	r3, [pc, #64]	; (800c884 <AT_QIACT+0xac>)
 800c844:	2200      	movs	r2, #0
 800c846:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	e015      	b.n	800c878 <AT_QIACT+0xa0>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c84c:	4916      	ldr	r1, [pc, #88]	; (800c8a8 <AT_QIACT+0xd0>)
 800c84e:	4815      	ldr	r0, [pc, #84]	; (800c8a4 <AT_QIACT+0xcc>)
 800c850:	f002 f9e2 	bl	800ec18 <strstr>
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d009      	beq.n	800c86e <AT_QIACT+0x96>
		{
			osTimerStop(AT_TimerHandle);
 800c85a:	4b0f      	ldr	r3, [pc, #60]	; (800c898 <AT_QIACT+0xc0>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f9 fdaa 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c864:	4b07      	ldr	r3, [pc, #28]	; (800c884 <AT_QIACT+0xac>)
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e004      	b.n	800c878 <AT_QIACT+0xa0>
	while(read_rx_state == ACTIVE)
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <AT_QIACT+0xac>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2b01      	cmp	r3, #1
 800c874:	d0d9      	beq.n	800c82a <AT_QIACT+0x52>
		}

	}
	return AT_ERROR;
 800c876:	2301      	movs	r3, #1
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	0800f5ec 	.word	0x0800f5ec
 800c884:	20009558 	.word	0x20009558
 800c888:	2000080c 	.word	0x2000080c
 800c88c:	20009580 	.word	0x20009580
 800c890:	20008068 	.word	0x20008068
 800c894:	2000978c 	.word	0x2000978c
 800c898:	200094c8 	.word	0x200094c8
 800c89c:	000249f0 	.word	0x000249f0
 800c8a0:	0800f4d0 	.word	0x0800f4d0
 800c8a4:	20009680 	.word	0x20009680
 800c8a8:	0800f5a8 	.word	0x0800f5a8

0800c8ac <AT_QIDEACT>:

uint8_t AT_QIDEACT (void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QIDEACT\n");
 800c8b2:	1d3b      	adds	r3, r7, #4
 800c8b4:	4928      	ldr	r1, [pc, #160]	; (800c958 <AT_QIDEACT+0xac>)
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f002 f98e 	bl	800ebd8 <siprintf>
	read_rx_state = ACTIVE;
 800c8bc:	4b27      	ldr	r3, [pc, #156]	; (800c95c <AT_QIDEACT+0xb0>)
 800c8be:	2201      	movs	r2, #1
 800c8c0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c8c2:	4b27      	ldr	r3, [pc, #156]	; (800c960 <AT_QIDEACT+0xb4>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c8c8:	f7ff f810 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	4925      	ldr	r1, [pc, #148]	; (800c964 <AT_QIDEACT+0xb8>)
 800c8d0:	4825      	ldr	r0, [pc, #148]	; (800c968 <AT_QIDEACT+0xbc>)
 800c8d2:	f7f8 fc03 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 800c8d6:	1d3b      	adds	r3, r7, #4
 800c8d8:	220b      	movs	r2, #11
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4822      	ldr	r0, [pc, #136]	; (800c968 <AT_QIDEACT+0xbc>)
 800c8de:	f7f8 fb7f 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c8e2:	4b22      	ldr	r3, [pc, #136]	; (800c96c <AT_QIDEACT+0xc0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7f9 fe7c 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 40000);
 800c8f0:	4b1f      	ldr	r3, [pc, #124]	; (800c970 <AT_QIDEACT+0xc4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f649 4140 	movw	r1, #40000	; 0x9c40
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7f9 fd19 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c8fe:	e021      	b.n	800c944 <AT_QIDEACT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c900:	491c      	ldr	r1, [pc, #112]	; (800c974 <AT_QIDEACT+0xc8>)
 800c902:	481d      	ldr	r0, [pc, #116]	; (800c978 <AT_QIDEACT+0xcc>)
 800c904:	f002 f988 	bl	800ec18 <strstr>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d009      	beq.n	800c922 <AT_QIDEACT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c90e:	4b18      	ldr	r3, [pc, #96]	; (800c970 <AT_QIDEACT+0xc4>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4618      	mov	r0, r3
 800c914:	f7f9 fd50 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c918:	4b10      	ldr	r3, [pc, #64]	; (800c95c <AT_QIDEACT+0xb0>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e015      	b.n	800c94e <AT_QIDEACT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c922:	4916      	ldr	r1, [pc, #88]	; (800c97c <AT_QIDEACT+0xd0>)
 800c924:	4814      	ldr	r0, [pc, #80]	; (800c978 <AT_QIDEACT+0xcc>)
 800c926:	f002 f977 	bl	800ec18 <strstr>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d009      	beq.n	800c944 <AT_QIDEACT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <AT_QIDEACT+0xc4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4618      	mov	r0, r3
 800c936:	f7f9 fd3f 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c93a:	4b08      	ldr	r3, [pc, #32]	; (800c95c <AT_QIDEACT+0xb0>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	e004      	b.n	800c94e <AT_QIDEACT+0xa2>
	while(read_rx_state == ACTIVE)
 800c944:	4b05      	ldr	r3, [pc, #20]	; (800c95c <AT_QIDEACT+0xb0>)
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d0d9      	beq.n	800c900 <AT_QIDEACT+0x54>
		}

	}
	return AT_ERROR;
 800c94c:	2301      	movs	r3, #1
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	0800f5f8 	.word	0x0800f5f8
 800c95c:	20009558 	.word	0x20009558
 800c960:	2000080c 	.word	0x2000080c
 800c964:	20009580 	.word	0x20009580
 800c968:	20008068 	.word	0x20008068
 800c96c:	2000978c 	.word	0x2000978c
 800c970:	200094c8 	.word	0x200094c8
 800c974:	0800f4d0 	.word	0x0800f4d0
 800c978:	20009680 	.word	0x20009680
 800c97c:	0800f5a8 	.word	0x0800f5a8

0800c980 <AT_QISTATE>:

uint8_t AT_QISTATE (void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QISTATE\n");
 800c986:	1d3b      	adds	r3, r7, #4
 800c988:	497d      	ldr	r1, [pc, #500]	; (800cb80 <AT_QISTATE+0x200>)
 800c98a:	4618      	mov	r0, r3
 800c98c:	f002 f924 	bl	800ebd8 <siprintf>
	read_rx_state = ACTIVE;
 800c990:	4b7c      	ldr	r3, [pc, #496]	; (800cb84 <AT_QISTATE+0x204>)
 800c992:	2201      	movs	r2, #1
 800c994:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c996:	4b7c      	ldr	r3, [pc, #496]	; (800cb88 <AT_QISTATE+0x208>)
 800c998:	2200      	movs	r2, #0
 800c99a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c99c:	f7fe ffa6 	bl	800b8ec <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	497a      	ldr	r1, [pc, #488]	; (800cb8c <AT_QISTATE+0x20c>)
 800c9a4:	487a      	ldr	r0, [pc, #488]	; (800cb90 <AT_QISTATE+0x210>)
 800c9a6:	f7f8 fb99 	bl	80050dc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 800c9aa:	1d3b      	adds	r3, r7, #4
 800c9ac:	220b      	movs	r2, #11
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4877      	ldr	r0, [pc, #476]	; (800cb90 <AT_QISTATE+0x210>)
 800c9b2:	f7f8 fb15 	bl	8004fe0 <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c9b6:	4b77      	ldr	r3, [pc, #476]	; (800cb94 <AT_QISTATE+0x214>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f04f 31ff 	mov.w	r1, #4294967295
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7f9 fe12 	bl	80065e8 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 800c9c4:	4b74      	ldr	r3, [pc, #464]	; (800cb98 <AT_QISTATE+0x218>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f242 7110 	movw	r1, #10000	; 0x2710
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7f9 fcaf 	bl	8006330 <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c9d2:	e0cb      	b.n	800cb6c <AT_QISTATE+0x1ec>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 800c9d4:	4971      	ldr	r1, [pc, #452]	; (800cb9c <AT_QISTATE+0x21c>)
 800c9d6:	4872      	ldr	r0, [pc, #456]	; (800cba0 <AT_QISTATE+0x220>)
 800c9d8:	f002 f91e 	bl	800ec18 <strstr>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d009      	beq.n	800c9f6 <AT_QISTATE+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c9e2:	4b6d      	ldr	r3, [pc, #436]	; (800cb98 <AT_QISTATE+0x218>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7f9 fce6 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c9ec:	4b65      	ldr	r3, [pc, #404]	; (800cb84 <AT_QISTATE+0x204>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	e0c0      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 800c9f6:	496b      	ldr	r1, [pc, #428]	; (800cba4 <AT_QISTATE+0x224>)
 800c9f8:	4869      	ldr	r0, [pc, #420]	; (800cba0 <AT_QISTATE+0x220>)
 800c9fa:	f002 f90d 	bl	800ec18 <strstr>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d009      	beq.n	800ca18 <AT_QISTATE+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800ca04:	4b64      	ldr	r3, [pc, #400]	; (800cb98 <AT_QISTATE+0x218>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7f9 fcd5 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ca0e:	4b5d      	ldr	r3, [pc, #372]	; (800cb84 <AT_QISTATE+0x204>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
			return IP_START;
 800ca14:	2303      	movs	r3, #3
 800ca16:	e0af      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 800ca18:	4963      	ldr	r1, [pc, #396]	; (800cba8 <AT_QISTATE+0x228>)
 800ca1a:	4861      	ldr	r0, [pc, #388]	; (800cba0 <AT_QISTATE+0x220>)
 800ca1c:	f002 f8fc 	bl	800ec18 <strstr>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d009      	beq.n	800ca3a <AT_QISTATE+0xba>
		{
			osTimerStop(AT_TimerHandle);
 800ca26:	4b5c      	ldr	r3, [pc, #368]	; (800cb98 <AT_QISTATE+0x218>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f9 fcc4 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ca30:	4b54      	ldr	r3, [pc, #336]	; (800cb84 <AT_QISTATE+0x204>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 800ca36:	2304      	movs	r3, #4
 800ca38:	e09e      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 800ca3a:	495c      	ldr	r1, [pc, #368]	; (800cbac <AT_QISTATE+0x22c>)
 800ca3c:	4858      	ldr	r0, [pc, #352]	; (800cba0 <AT_QISTATE+0x220>)
 800ca3e:	f002 f8eb 	bl	800ec18 <strstr>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d009      	beq.n	800ca5c <AT_QISTATE+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 800ca48:	4b53      	ldr	r3, [pc, #332]	; (800cb98 <AT_QISTATE+0x218>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7f9 fcb3 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ca52:	4b4c      	ldr	r3, [pc, #304]	; (800cb84 <AT_QISTATE+0x204>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 800ca58:	2305      	movs	r3, #5
 800ca5a:	e08d      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 800ca5c:	4954      	ldr	r1, [pc, #336]	; (800cbb0 <AT_QISTATE+0x230>)
 800ca5e:	4850      	ldr	r0, [pc, #320]	; (800cba0 <AT_QISTATE+0x220>)
 800ca60:	f002 f8da 	bl	800ec18 <strstr>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d009      	beq.n	800ca7e <AT_QISTATE+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 800ca6a:	4b4b      	ldr	r3, [pc, #300]	; (800cb98 <AT_QISTATE+0x218>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7f9 fca2 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ca74:	4b43      	ldr	r3, [pc, #268]	; (800cb84 <AT_QISTATE+0x204>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 800ca7a:	2306      	movs	r3, #6
 800ca7c:	e07c      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 800ca7e:	494d      	ldr	r1, [pc, #308]	; (800cbb4 <AT_QISTATE+0x234>)
 800ca80:	4847      	ldr	r0, [pc, #284]	; (800cba0 <AT_QISTATE+0x220>)
 800ca82:	f002 f8c9 	bl	800ec18 <strstr>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d009      	beq.n	800caa0 <AT_QISTATE+0x120>
		{
			osTimerStop(AT_TimerHandle);
 800ca8c:	4b42      	ldr	r3, [pc, #264]	; (800cb98 <AT_QISTATE+0x218>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7f9 fc91 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800ca96:	4b3b      	ldr	r3, [pc, #236]	; (800cb84 <AT_QISTATE+0x204>)
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 800ca9c:	2307      	movs	r3, #7
 800ca9e:	e06b      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 800caa0:	4945      	ldr	r1, [pc, #276]	; (800cbb8 <AT_QISTATE+0x238>)
 800caa2:	483f      	ldr	r0, [pc, #252]	; (800cba0 <AT_QISTATE+0x220>)
 800caa4:	f002 f8b8 	bl	800ec18 <strstr>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d009      	beq.n	800cac2 <AT_QISTATE+0x142>
		{
			osTimerStop(AT_TimerHandle);
 800caae:	4b3a      	ldr	r3, [pc, #232]	; (800cb98 <AT_QISTATE+0x218>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f9 fc80 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cab8:	4b32      	ldr	r3, [pc, #200]	; (800cb84 <AT_QISTATE+0x204>)
 800caba:	2200      	movs	r2, #0
 800cabc:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 800cabe:	2308      	movs	r3, #8
 800cac0:	e05a      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 800cac2:	493e      	ldr	r1, [pc, #248]	; (800cbbc <AT_QISTATE+0x23c>)
 800cac4:	4836      	ldr	r0, [pc, #216]	; (800cba0 <AT_QISTATE+0x220>)
 800cac6:	f002 f8a7 	bl	800ec18 <strstr>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d009      	beq.n	800cae4 <AT_QISTATE+0x164>
		{
			osTimerStop(AT_TimerHandle);
 800cad0:	4b31      	ldr	r3, [pc, #196]	; (800cb98 <AT_QISTATE+0x218>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f9 fc6f 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cada:	4b2a      	ldr	r3, [pc, #168]	; (800cb84 <AT_QISTATE+0x204>)
 800cadc:	2200      	movs	r2, #0
 800cade:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 800cae0:	2309      	movs	r3, #9
 800cae2:	e049      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 800cae4:	4936      	ldr	r1, [pc, #216]	; (800cbc0 <AT_QISTATE+0x240>)
 800cae6:	482e      	ldr	r0, [pc, #184]	; (800cba0 <AT_QISTATE+0x220>)
 800cae8:	f002 f896 	bl	800ec18 <strstr>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d009      	beq.n	800cb06 <AT_QISTATE+0x186>
		{
			osTimerStop(AT_TimerHandle);
 800caf2:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <AT_QISTATE+0x218>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f9 fc5e 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cafc:	4b21      	ldr	r3, [pc, #132]	; (800cb84 <AT_QISTATE+0x204>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 800cb02:	230a      	movs	r3, #10
 800cb04:	e038      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 800cb06:	492f      	ldr	r1, [pc, #188]	; (800cbc4 <AT_QISTATE+0x244>)
 800cb08:	4825      	ldr	r0, [pc, #148]	; (800cba0 <AT_QISTATE+0x220>)
 800cb0a:	f002 f885 	bl	800ec18 <strstr>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d009      	beq.n	800cb28 <AT_QISTATE+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 800cb14:	4b20      	ldr	r3, [pc, #128]	; (800cb98 <AT_QISTATE+0x218>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f9 fc4d 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cb1e:	4b19      	ldr	r3, [pc, #100]	; (800cb84 <AT_QISTATE+0x204>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 800cb24:	230b      	movs	r3, #11
 800cb26:	e027      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 800cb28:	4927      	ldr	r1, [pc, #156]	; (800cbc8 <AT_QISTATE+0x248>)
 800cb2a:	481d      	ldr	r0, [pc, #116]	; (800cba0 <AT_QISTATE+0x220>)
 800cb2c:	f002 f874 	bl	800ec18 <strstr>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d009      	beq.n	800cb4a <AT_QISTATE+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 800cb36:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <AT_QISTATE+0x218>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f9 fc3c 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cb40:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <AT_QISTATE+0x204>)
 800cb42:	2200      	movs	r2, #0
 800cb44:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 800cb46:	230c      	movs	r3, #12
 800cb48:	e016      	b.n	800cb78 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800cb4a:	4920      	ldr	r1, [pc, #128]	; (800cbcc <AT_QISTATE+0x24c>)
 800cb4c:	4814      	ldr	r0, [pc, #80]	; (800cba0 <AT_QISTATE+0x220>)
 800cb4e:	f002 f863 	bl	800ec18 <strstr>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <AT_QISTATE+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 800cb58:	4b0f      	ldr	r3, [pc, #60]	; (800cb98 <AT_QISTATE+0x218>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7f9 fc2b 	bl	80063b8 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800cb62:	4b08      	ldr	r3, [pc, #32]	; (800cb84 <AT_QISTATE+0x204>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e005      	b.n	800cb78 <AT_QISTATE+0x1f8>
	while(read_rx_state == ACTIVE)
 800cb6c:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <AT_QISTATE+0x204>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	f43f af2f 	beq.w	800c9d4 <AT_QISTATE+0x54>
		}

	}
	return AT_ERROR;
 800cb76:	2301      	movs	r3, #1
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	0800f604 	.word	0x0800f604
 800cb84:	20009558 	.word	0x20009558
 800cb88:	2000080c 	.word	0x2000080c
 800cb8c:	20009580 	.word	0x20009580
 800cb90:	20008068 	.word	0x20008068
 800cb94:	2000978c 	.word	0x2000978c
 800cb98:	200094c8 	.word	0x200094c8
 800cb9c:	0800f610 	.word	0x0800f610
 800cba0:	20009680 	.word	0x20009680
 800cba4:	0800f620 	.word	0x0800f620
 800cba8:	0800f62c 	.word	0x0800f62c
 800cbac:	0800f638 	.word	0x0800f638
 800cbb0:	0800f644 	.word	0x0800f644
 800cbb4:	0800f654 	.word	0x0800f654
 800cbb8:	0800f660 	.word	0x0800f660
 800cbbc:	0800f674 	.word	0x0800f674
 800cbc0:	0800f688 	.word	0x0800f688
 800cbc4:	0800f538 	.word	0x0800f538
 800cbc8:	0800f694 	.word	0x0800f694
 800cbcc:	0800f5a8 	.word	0x0800f5a8

0800cbd0 <read_status_registers>:
bootloader_register_struct bootloader_registers;
change_boot_register_struct change_boot_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cbd6:	4bbc      	ldr	r3, [pc, #752]	; (800cec8 <read_status_registers+0x2f8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f04f 31ff 	mov.w	r1, #4294967295
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f9 fc3e 	bl	8006460 <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 800cbe4:	1dfb      	adds	r3, r7, #7
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cbec:	f7fe fce2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 800cbf0:	1dbb      	adds	r3, r7, #6
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f242 0001 	movw	r0, #8193	; 0x2001
 800cbf8:	f7fe fcdc 	bl	800b5b4 <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cbfc:	79fb      	ldrb	r3, [r7, #7]
 800cbfe:	021b      	lsls	r3, r3, #8
 800cc00:	b21a      	sxth	r2, r3
 800cc02:	79bb      	ldrb	r3, [r7, #6]
 800cc04:	b21b      	sxth	r3, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	b21b      	sxth	r3, r3
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	4baf      	ldr	r3, [pc, #700]	; (800cecc <read_status_registers+0x2fc>)
 800cc0e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 800cc10:	1dfb      	adds	r3, r7, #7
 800cc12:	4619      	mov	r1, r3
 800cc14:	f242 0002 	movw	r0, #8194	; 0x2002
 800cc18:	f7fe fccc 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 800cc1c:	1dbb      	adds	r3, r7, #6
 800cc1e:	4619      	mov	r1, r3
 800cc20:	f242 0003 	movw	r0, #8195	; 0x2003
 800cc24:	f7fe fcc6 	bl	800b5b4 <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	021b      	lsls	r3, r3, #8
 800cc2c:	b21a      	sxth	r2, r3
 800cc2e:	79bb      	ldrb	r3, [r7, #6]
 800cc30:	b21b      	sxth	r3, r3
 800cc32:	4313      	orrs	r3, r2
 800cc34:	b21b      	sxth	r3, r3
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	4ba4      	ldr	r3, [pc, #656]	; (800cecc <read_status_registers+0x2fc>)
 800cc3a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 800cc3c:	1dfb      	adds	r3, r7, #7
 800cc3e:	4619      	mov	r1, r3
 800cc40:	f242 0004 	movw	r0, #8196	; 0x2004
 800cc44:	f7fe fcb6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 800cc48:	1dbb      	adds	r3, r7, #6
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	f242 0005 	movw	r0, #8197	; 0x2005
 800cc50:	f7fe fcb0 	bl	800b5b4 <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	021b      	lsls	r3, r3, #8
 800cc58:	b21a      	sxth	r2, r3
 800cc5a:	79bb      	ldrb	r3, [r7, #6]
 800cc5c:	b21b      	sxth	r3, r3
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	b21b      	sxth	r3, r3
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	4b99      	ldr	r3, [pc, #612]	; (800cecc <read_status_registers+0x2fc>)
 800cc66:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 800cc68:	1dfb      	adds	r3, r7, #7
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	f242 0006 	movw	r0, #8198	; 0x2006
 800cc70:	f7fe fca0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 800cc74:	1dbb      	adds	r3, r7, #6
 800cc76:	4619      	mov	r1, r3
 800cc78:	f242 0007 	movw	r0, #8199	; 0x2007
 800cc7c:	f7fe fc9a 	bl	800b5b4 <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	b21a      	sxth	r2, r3
 800cc86:	79bb      	ldrb	r3, [r7, #6]
 800cc88:	b21b      	sxth	r3, r3
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	b21b      	sxth	r3, r3
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	4b8e      	ldr	r3, [pc, #568]	; (800cecc <read_status_registers+0x2fc>)
 800cc92:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 800cc94:	1dfb      	adds	r3, r7, #7
 800cc96:	4619      	mov	r1, r3
 800cc98:	f242 0008 	movw	r0, #8200	; 0x2008
 800cc9c:	f7fe fc8a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 800cca0:	1dbb      	adds	r3, r7, #6
 800cca2:	4619      	mov	r1, r3
 800cca4:	f242 0009 	movw	r0, #8201	; 0x2009
 800cca8:	f7fe fc84 	bl	800b5b4 <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	021b      	lsls	r3, r3, #8
 800ccb0:	b21a      	sxth	r2, r3
 800ccb2:	79bb      	ldrb	r3, [r7, #6]
 800ccb4:	b21b      	sxth	r3, r3
 800ccb6:	4313      	orrs	r3, r2
 800ccb8:	b21b      	sxth	r3, r3
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	4b83      	ldr	r3, [pc, #524]	; (800cecc <read_status_registers+0x2fc>)
 800ccbe:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 800ccc0:	1dfb      	adds	r3, r7, #7
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	f242 000a 	movw	r0, #8202	; 0x200a
 800ccc8:	f7fe fc74 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 800cccc:	1dbb      	adds	r3, r7, #6
 800ccce:	4619      	mov	r1, r3
 800ccd0:	f242 000b 	movw	r0, #8203	; 0x200b
 800ccd4:	f7fe fc6e 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	021b      	lsls	r3, r3, #8
 800ccdc:	b21a      	sxth	r2, r3
 800ccde:	79bb      	ldrb	r3, [r7, #6]
 800cce0:	b21b      	sxth	r3, r3
 800cce2:	4313      	orrs	r3, r2
 800cce4:	b21b      	sxth	r3, r3
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	4b78      	ldr	r3, [pc, #480]	; (800cecc <read_status_registers+0x2fc>)
 800ccea:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 800ccec:	1dfb      	adds	r3, r7, #7
 800ccee:	4619      	mov	r1, r3
 800ccf0:	f242 000c 	movw	r0, #8204	; 0x200c
 800ccf4:	f7fe fc5e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 800ccf8:	1dbb      	adds	r3, r7, #6
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f242 000d 	movw	r0, #8205	; 0x200d
 800cd00:	f7fe fc58 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	021b      	lsls	r3, r3, #8
 800cd08:	b21a      	sxth	r2, r3
 800cd0a:	79bb      	ldrb	r3, [r7, #6]
 800cd0c:	b21b      	sxth	r3, r3
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	b21b      	sxth	r3, r3
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	4b6d      	ldr	r3, [pc, #436]	; (800cecc <read_status_registers+0x2fc>)
 800cd16:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 800cd18:	1dfb      	adds	r3, r7, #7
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	f242 000e 	movw	r0, #8206	; 0x200e
 800cd20:	f7fe fc48 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 800cd24:	1dbb      	adds	r3, r7, #6
 800cd26:	4619      	mov	r1, r3
 800cd28:	f242 000f 	movw	r0, #8207	; 0x200f
 800cd2c:	f7fe fc42 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd30:	79fb      	ldrb	r3, [r7, #7]
 800cd32:	021b      	lsls	r3, r3, #8
 800cd34:	b21a      	sxth	r2, r3
 800cd36:	79bb      	ldrb	r3, [r7, #6]
 800cd38:	b21b      	sxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b21b      	sxth	r3, r3
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	4b62      	ldr	r3, [pc, #392]	; (800cecc <read_status_registers+0x2fc>)
 800cd42:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 800cd44:	1dfb      	adds	r3, r7, #7
 800cd46:	4619      	mov	r1, r3
 800cd48:	f242 0010 	movw	r0, #8208	; 0x2010
 800cd4c:	f7fe fc32 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 800cd50:	1dbb      	adds	r3, r7, #6
 800cd52:	4619      	mov	r1, r3
 800cd54:	f242 0011 	movw	r0, #8209	; 0x2011
 800cd58:	f7fe fc2c 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	021b      	lsls	r3, r3, #8
 800cd60:	b21a      	sxth	r2, r3
 800cd62:	79bb      	ldrb	r3, [r7, #6]
 800cd64:	b21b      	sxth	r3, r3
 800cd66:	4313      	orrs	r3, r2
 800cd68:	b21b      	sxth	r3, r3
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	4b57      	ldr	r3, [pc, #348]	; (800cecc <read_status_registers+0x2fc>)
 800cd6e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 800cd70:	1dfb      	adds	r3, r7, #7
 800cd72:	4619      	mov	r1, r3
 800cd74:	f242 0012 	movw	r0, #8210	; 0x2012
 800cd78:	f7fe fc1c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 800cd7c:	1dbb      	adds	r3, r7, #6
 800cd7e:	4619      	mov	r1, r3
 800cd80:	f242 0013 	movw	r0, #8211	; 0x2013
 800cd84:	f7fe fc16 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd88:	79fb      	ldrb	r3, [r7, #7]
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	b21a      	sxth	r2, r3
 800cd8e:	79bb      	ldrb	r3, [r7, #6]
 800cd90:	b21b      	sxth	r3, r3
 800cd92:	4313      	orrs	r3, r2
 800cd94:	b21b      	sxth	r3, r3
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	4b4c      	ldr	r3, [pc, #304]	; (800cecc <read_status_registers+0x2fc>)
 800cd9a:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 800cd9c:	1dfb      	adds	r3, r7, #7
 800cd9e:	4619      	mov	r1, r3
 800cda0:	f242 0014 	movw	r0, #8212	; 0x2014
 800cda4:	f7fe fc06 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 800cda8:	1dbb      	adds	r3, r7, #6
 800cdaa:	4619      	mov	r1, r3
 800cdac:	f242 0015 	movw	r0, #8213	; 0x2015
 800cdb0:	f7fe fc00 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cdb4:	79fb      	ldrb	r3, [r7, #7]
 800cdb6:	021b      	lsls	r3, r3, #8
 800cdb8:	b21a      	sxth	r2, r3
 800cdba:	79bb      	ldrb	r3, [r7, #6]
 800cdbc:	b21b      	sxth	r3, r3
 800cdbe:	4313      	orrs	r3, r2
 800cdc0:	b21b      	sxth	r3, r3
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	4b41      	ldr	r3, [pc, #260]	; (800cecc <read_status_registers+0x2fc>)
 800cdc6:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 800cdc8:	1dfb      	adds	r3, r7, #7
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f242 0016 	movw	r0, #8214	; 0x2016
 800cdd0:	f7fe fbf0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 800cdd4:	1dbb      	adds	r3, r7, #6
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	f242 0017 	movw	r0, #8215	; 0x2017
 800cddc:	f7fe fbea 	bl	800b5b4 <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	b21a      	sxth	r2, r3
 800cde6:	79bb      	ldrb	r3, [r7, #6]
 800cde8:	b21b      	sxth	r3, r3
 800cdea:	4313      	orrs	r3, r2
 800cdec:	b21b      	sxth	r3, r3
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	4b36      	ldr	r3, [pc, #216]	; (800cecc <read_status_registers+0x2fc>)
 800cdf2:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 800cdf4:	1dfb      	adds	r3, r7, #7
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	f242 0018 	movw	r0, #8216	; 0x2018
 800cdfc:	f7fe fbda 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 800ce00:	1dbb      	adds	r3, r7, #6
 800ce02:	4619      	mov	r1, r3
 800ce04:	f242 0019 	movw	r0, #8217	; 0x2019
 800ce08:	f7fe fbd4 	bl	800b5b4 <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	b21a      	sxth	r2, r3
 800ce12:	79bb      	ldrb	r3, [r7, #6]
 800ce14:	b21b      	sxth	r3, r3
 800ce16:	4313      	orrs	r3, r2
 800ce18:	b21b      	sxth	r3, r3
 800ce1a:	b29a      	uxth	r2, r3
 800ce1c:	4b2b      	ldr	r3, [pc, #172]	; (800cecc <read_status_registers+0x2fc>)
 800ce1e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 800ce20:	1dfb      	adds	r3, r7, #7
 800ce22:	4619      	mov	r1, r3
 800ce24:	f242 001a 	movw	r0, #8218	; 0x201a
 800ce28:	f7fe fbc4 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 800ce2c:	1dbb      	adds	r3, r7, #6
 800ce2e:	4619      	mov	r1, r3
 800ce30:	f242 001b 	movw	r0, #8219	; 0x201b
 800ce34:	f7fe fbbe 	bl	800b5b4 <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce38:	79fb      	ldrb	r3, [r7, #7]
 800ce3a:	021b      	lsls	r3, r3, #8
 800ce3c:	b21a      	sxth	r2, r3
 800ce3e:	79bb      	ldrb	r3, [r7, #6]
 800ce40:	b21b      	sxth	r3, r3
 800ce42:	4313      	orrs	r3, r2
 800ce44:	b21b      	sxth	r3, r3
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	4b20      	ldr	r3, [pc, #128]	; (800cecc <read_status_registers+0x2fc>)
 800ce4a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 800ce4c:	1dfb      	adds	r3, r7, #7
 800ce4e:	4619      	mov	r1, r3
 800ce50:	f242 001c 	movw	r0, #8220	; 0x201c
 800ce54:	f7fe fbae 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 800ce58:	1dbb      	adds	r3, r7, #6
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f242 001d 	movw	r0, #8221	; 0x201d
 800ce60:	f7fe fba8 	bl	800b5b4 <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce64:	79fb      	ldrb	r3, [r7, #7]
 800ce66:	021b      	lsls	r3, r3, #8
 800ce68:	b21a      	sxth	r2, r3
 800ce6a:	79bb      	ldrb	r3, [r7, #6]
 800ce6c:	b21b      	sxth	r3, r3
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	b21b      	sxth	r3, r3
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	4b15      	ldr	r3, [pc, #84]	; (800cecc <read_status_registers+0x2fc>)
 800ce76:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 800ce78:	1dfb      	adds	r3, r7, #7
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	f242 001e 	movw	r0, #8222	; 0x201e
 800ce80:	f7fe fb98 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 800ce84:	1dbb      	adds	r3, r7, #6
 800ce86:	4619      	mov	r1, r3
 800ce88:	f242 001f 	movw	r0, #8223	; 0x201f
 800ce8c:	f7fe fb92 	bl	800b5b4 <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	021b      	lsls	r3, r3, #8
 800ce94:	b21a      	sxth	r2, r3
 800ce96:	79bb      	ldrb	r3, [r7, #6]
 800ce98:	b21b      	sxth	r3, r3
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	b21b      	sxth	r3, r3
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <read_status_registers+0x2fc>)
 800cea2:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 800cea4:	1dfb      	adds	r3, r7, #7
 800cea6:	4619      	mov	r1, r3
 800cea8:	f242 0020 	movw	r0, #8224	; 0x2020
 800ceac:	f7fe fb82 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 800ceb0:	1dbb      	adds	r3, r7, #6
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	f242 0021 	movw	r0, #8225	; 0x2021
 800ceb8:	f7fe fb7c 	bl	800b5b4 <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cebc:	79fb      	ldrb	r3, [r7, #7]
 800cebe:	021b      	lsls	r3, r3, #8
 800cec0:	b21a      	sxth	r2, r3
 800cec2:	79bb      	ldrb	r3, [r7, #6]
 800cec4:	e004      	b.n	800ced0 <read_status_registers+0x300>
 800cec6:	bf00      	nop
 800cec8:	2000957c 	.word	0x2000957c
 800cecc:	20009dc8 	.word	0x20009dc8
 800ced0:	b21b      	sxth	r3, r3
 800ced2:	4313      	orrs	r3, r2
 800ced4:	b21b      	sxth	r3, r3
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	4bbd      	ldr	r3, [pc, #756]	; (800d1d0 <read_status_registers+0x600>)
 800ceda:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 800cedc:	1dfb      	adds	r3, r7, #7
 800cede:	4619      	mov	r1, r3
 800cee0:	f242 0022 	movw	r0, #8226	; 0x2022
 800cee4:	f7fe fb66 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 800cee8:	1dbb      	adds	r3, r7, #6
 800ceea:	4619      	mov	r1, r3
 800ceec:	f242 0023 	movw	r0, #8227	; 0x2023
 800cef0:	f7fe fb60 	bl	800b5b4 <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cef4:	79fb      	ldrb	r3, [r7, #7]
 800cef6:	021b      	lsls	r3, r3, #8
 800cef8:	b21a      	sxth	r2, r3
 800cefa:	79bb      	ldrb	r3, [r7, #6]
 800cefc:	b21b      	sxth	r3, r3
 800cefe:	4313      	orrs	r3, r2
 800cf00:	b21b      	sxth	r3, r3
 800cf02:	b29a      	uxth	r2, r3
 800cf04:	4bb2      	ldr	r3, [pc, #712]	; (800d1d0 <read_status_registers+0x600>)
 800cf06:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 800cf08:	1dfb      	adds	r3, r7, #7
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	f242 0024 	movw	r0, #8228	; 0x2024
 800cf10:	f7fe fb50 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 800cf14:	1dbb      	adds	r3, r7, #6
 800cf16:	4619      	mov	r1, r3
 800cf18:	f242 0025 	movw	r0, #8229	; 0x2025
 800cf1c:	f7fe fb4a 	bl	800b5b4 <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf20:	79fb      	ldrb	r3, [r7, #7]
 800cf22:	021b      	lsls	r3, r3, #8
 800cf24:	b21a      	sxth	r2, r3
 800cf26:	79bb      	ldrb	r3, [r7, #6]
 800cf28:	b21b      	sxth	r3, r3
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	b21b      	sxth	r3, r3
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	4ba7      	ldr	r3, [pc, #668]	; (800d1d0 <read_status_registers+0x600>)
 800cf32:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 800cf34:	1dfb      	adds	r3, r7, #7
 800cf36:	4619      	mov	r1, r3
 800cf38:	f242 0026 	movw	r0, #8230	; 0x2026
 800cf3c:	f7fe fb3a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 800cf40:	1dbb      	adds	r3, r7, #6
 800cf42:	4619      	mov	r1, r3
 800cf44:	f242 0027 	movw	r0, #8231	; 0x2027
 800cf48:	f7fe fb34 	bl	800b5b4 <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf4c:	79fb      	ldrb	r3, [r7, #7]
 800cf4e:	021b      	lsls	r3, r3, #8
 800cf50:	b21a      	sxth	r2, r3
 800cf52:	79bb      	ldrb	r3, [r7, #6]
 800cf54:	b21b      	sxth	r3, r3
 800cf56:	4313      	orrs	r3, r2
 800cf58:	b21b      	sxth	r3, r3
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	4b9c      	ldr	r3, [pc, #624]	; (800d1d0 <read_status_registers+0x600>)
 800cf5e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 800cf60:	1dfb      	adds	r3, r7, #7
 800cf62:	4619      	mov	r1, r3
 800cf64:	f242 002a 	movw	r0, #8234	; 0x202a
 800cf68:	f7fe fb24 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 800cf6c:	1dbb      	adds	r3, r7, #6
 800cf6e:	4619      	mov	r1, r3
 800cf70:	f242 002b 	movw	r0, #8235	; 0x202b
 800cf74:	f7fe fb1e 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	021b      	lsls	r3, r3, #8
 800cf7c:	b21a      	sxth	r2, r3
 800cf7e:	79bb      	ldrb	r3, [r7, #6]
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	4313      	orrs	r3, r2
 800cf84:	b21b      	sxth	r3, r3
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	4b91      	ldr	r3, [pc, #580]	; (800d1d0 <read_status_registers+0x600>)
 800cf8a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 800cf8c:	1dfb      	adds	r3, r7, #7
 800cf8e:	4619      	mov	r1, r3
 800cf90:	f242 002c 	movw	r0, #8236	; 0x202c
 800cf94:	f7fe fb0e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 800cf98:	1dbb      	adds	r3, r7, #6
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f242 002d 	movw	r0, #8237	; 0x202d
 800cfa0:	f7fe fb08 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cfa4:	79fb      	ldrb	r3, [r7, #7]
 800cfa6:	021b      	lsls	r3, r3, #8
 800cfa8:	b21a      	sxth	r2, r3
 800cfaa:	79bb      	ldrb	r3, [r7, #6]
 800cfac:	b21b      	sxth	r3, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	b21b      	sxth	r3, r3
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	4b86      	ldr	r3, [pc, #536]	; (800d1d0 <read_status_registers+0x600>)
 800cfb6:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 800cfb8:	1dfb      	adds	r3, r7, #7
 800cfba:	4619      	mov	r1, r3
 800cfbc:	f242 002e 	movw	r0, #8238	; 0x202e
 800cfc0:	f7fe faf8 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 800cfc4:	1dbb      	adds	r3, r7, #6
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f242 002f 	movw	r0, #8239	; 0x202f
 800cfcc:	f7fe faf2 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cfd0:	79fb      	ldrb	r3, [r7, #7]
 800cfd2:	021b      	lsls	r3, r3, #8
 800cfd4:	b21a      	sxth	r2, r3
 800cfd6:	79bb      	ldrb	r3, [r7, #6]
 800cfd8:	b21b      	sxth	r3, r3
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	b21b      	sxth	r3, r3
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	4b7b      	ldr	r3, [pc, #492]	; (800d1d0 <read_status_registers+0x600>)
 800cfe2:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 800cfe4:	1dfb      	adds	r3, r7, #7
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f242 0030 	movw	r0, #8240	; 0x2030
 800cfec:	f7fe fae2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 800cff0:	1dbb      	adds	r3, r7, #6
 800cff2:	4619      	mov	r1, r3
 800cff4:	f242 0031 	movw	r0, #8241	; 0x2031
 800cff8:	f7fe fadc 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	021b      	lsls	r3, r3, #8
 800d000:	b21a      	sxth	r2, r3
 800d002:	79bb      	ldrb	r3, [r7, #6]
 800d004:	b21b      	sxth	r3, r3
 800d006:	4313      	orrs	r3, r2
 800d008:	b21b      	sxth	r3, r3
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	4b70      	ldr	r3, [pc, #448]	; (800d1d0 <read_status_registers+0x600>)
 800d00e:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 800d010:	1dfb      	adds	r3, r7, #7
 800d012:	4619      	mov	r1, r3
 800d014:	f242 0032 	movw	r0, #8242	; 0x2032
 800d018:	f7fe facc 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 800d01c:	1dbb      	adds	r3, r7, #6
 800d01e:	4619      	mov	r1, r3
 800d020:	f242 0033 	movw	r0, #8243	; 0x2033
 800d024:	f7fe fac6 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d028:	79fb      	ldrb	r3, [r7, #7]
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	b21a      	sxth	r2, r3
 800d02e:	79bb      	ldrb	r3, [r7, #6]
 800d030:	b21b      	sxth	r3, r3
 800d032:	4313      	orrs	r3, r2
 800d034:	b21b      	sxth	r3, r3
 800d036:	b29a      	uxth	r2, r3
 800d038:	4b65      	ldr	r3, [pc, #404]	; (800d1d0 <read_status_registers+0x600>)
 800d03a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 800d03c:	1dfb      	adds	r3, r7, #7
 800d03e:	4619      	mov	r1, r3
 800d040:	f242 0034 	movw	r0, #8244	; 0x2034
 800d044:	f7fe fab6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 800d048:	1dbb      	adds	r3, r7, #6
 800d04a:	4619      	mov	r1, r3
 800d04c:	f242 0035 	movw	r0, #8245	; 0x2035
 800d050:	f7fe fab0 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	021b      	lsls	r3, r3, #8
 800d058:	b21a      	sxth	r2, r3
 800d05a:	79bb      	ldrb	r3, [r7, #6]
 800d05c:	b21b      	sxth	r3, r3
 800d05e:	4313      	orrs	r3, r2
 800d060:	b21b      	sxth	r3, r3
 800d062:	b29a      	uxth	r2, r3
 800d064:	4b5a      	ldr	r3, [pc, #360]	; (800d1d0 <read_status_registers+0x600>)
 800d066:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 800d068:	1dfb      	adds	r3, r7, #7
 800d06a:	4619      	mov	r1, r3
 800d06c:	f242 0036 	movw	r0, #8246	; 0x2036
 800d070:	f7fe faa0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 800d074:	1dbb      	adds	r3, r7, #6
 800d076:	4619      	mov	r1, r3
 800d078:	f242 0037 	movw	r0, #8247	; 0x2037
 800d07c:	f7fe fa9a 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	b21a      	sxth	r2, r3
 800d086:	79bb      	ldrb	r3, [r7, #6]
 800d088:	b21b      	sxth	r3, r3
 800d08a:	4313      	orrs	r3, r2
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	b29a      	uxth	r2, r3
 800d090:	4b4f      	ldr	r3, [pc, #316]	; (800d1d0 <read_status_registers+0x600>)
 800d092:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 800d094:	1dfb      	adds	r3, r7, #7
 800d096:	4619      	mov	r1, r3
 800d098:	f242 0038 	movw	r0, #8248	; 0x2038
 800d09c:	f7fe fa8a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 800d0a0:	1dbb      	adds	r3, r7, #6
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	f242 0039 	movw	r0, #8249	; 0x2039
 800d0a8:	f7fe fa84 	bl	800b5b4 <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	021b      	lsls	r3, r3, #8
 800d0b0:	b21a      	sxth	r2, r3
 800d0b2:	79bb      	ldrb	r3, [r7, #6]
 800d0b4:	b21b      	sxth	r3, r3
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	b21b      	sxth	r3, r3
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	4b44      	ldr	r3, [pc, #272]	; (800d1d0 <read_status_registers+0x600>)
 800d0be:	871a      	strh	r2, [r3, #56]	; 0x38

	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
	//status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 800d0c0:	1dfb      	adds	r3, r7, #7
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800d0c8:	f7fe fa74 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 800d0cc:	1dbb      	adds	r3, r7, #6
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800d0d4:	f7fe fa6e 	bl	800b5b4 <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	021b      	lsls	r3, r3, #8
 800d0dc:	b21a      	sxth	r2, r3
 800d0de:	79bb      	ldrb	r3, [r7, #6]
 800d0e0:	b21b      	sxth	r3, r3
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	b21b      	sxth	r3, r3
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	4b39      	ldr	r3, [pc, #228]	; (800d1d0 <read_status_registers+0x600>)
 800d0ea:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
	//fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
	//status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 800d0ee:	1dfb      	adds	r3, r7, #7
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800d0f6:	f7fe fa5d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 800d0fa:	1dbb      	adds	r3, r7, #6
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800d102:	f7fe fa57 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	021b      	lsls	r3, r3, #8
 800d10a:	b21a      	sxth	r2, r3
 800d10c:	79bb      	ldrb	r3, [r7, #6]
 800d10e:	b21b      	sxth	r3, r3
 800d110:	4313      	orrs	r3, r2
 800d112:	b21b      	sxth	r3, r3
 800d114:	b29a      	uxth	r2, r3
 800d116:	4b2e      	ldr	r3, [pc, #184]	; (800d1d0 <read_status_registers+0x600>)
 800d118:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 800d11c:	1dfb      	adds	r3, r7, #7
 800d11e:	4619      	mov	r1, r3
 800d120:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800d124:	f7fe fa46 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 800d128:	1dbb      	adds	r3, r7, #6
 800d12a:	4619      	mov	r1, r3
 800d12c:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800d130:	f7fe fa40 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	b21a      	sxth	r2, r3
 800d13a:	79bb      	ldrb	r3, [r7, #6]
 800d13c:	b21b      	sxth	r3, r3
 800d13e:	4313      	orrs	r3, r2
 800d140:	b21b      	sxth	r3, r3
 800d142:	b29a      	uxth	r2, r3
 800d144:	4b22      	ldr	r3, [pc, #136]	; (800d1d0 <read_status_registers+0x600>)
 800d146:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 800d14a:	1dfb      	adds	r3, r7, #7
 800d14c:	4619      	mov	r1, r3
 800d14e:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800d152:	f7fe fa2f 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 800d156:	1dbb      	adds	r3, r7, #6
 800d158:	4619      	mov	r1, r3
 800d15a:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800d15e:	f7fe fa29 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	b21a      	sxth	r2, r3
 800d168:	79bb      	ldrb	r3, [r7, #6]
 800d16a:	b21b      	sxth	r3, r3
 800d16c:	4313      	orrs	r3, r2
 800d16e:	b21b      	sxth	r3, r3
 800d170:	b29a      	uxth	r2, r3
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <read_status_registers+0x600>)
 800d174:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 800d178:	1dfb      	adds	r3, r7, #7
 800d17a:	4619      	mov	r1, r3
 800d17c:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800d180:	f7fe fa18 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 800d184:	1dbb      	adds	r3, r7, #6
 800d186:	4619      	mov	r1, r3
 800d188:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800d18c:	f7fe fa12 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d190:	79fb      	ldrb	r3, [r7, #7]
 800d192:	021b      	lsls	r3, r3, #8
 800d194:	b21a      	sxth	r2, r3
 800d196:	79bb      	ldrb	r3, [r7, #6]
 800d198:	b21b      	sxth	r3, r3
 800d19a:	4313      	orrs	r3, r2
 800d19c:	b21b      	sxth	r3, r3
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	4b0b      	ldr	r3, [pc, #44]	; (800d1d0 <read_status_registers+0x600>)
 800d1a2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 800d1a6:	1dfb      	adds	r3, r7, #7
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800d1ae:	f7fe fa01 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 800d1b2:	1dbb      	adds	r3, r7, #6
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800d1ba:	f7fe f9fb 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	021b      	lsls	r3, r3, #8
 800d1c2:	b21a      	sxth	r2, r3
 800d1c4:	79bb      	ldrb	r3, [r7, #6]
 800d1c6:	b21b      	sxth	r3, r3
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	b21b      	sxth	r3, r3
 800d1cc:	e002      	b.n	800d1d4 <read_status_registers+0x604>
 800d1ce:	bf00      	nop
 800d1d0:	20009dc8 	.word	0x20009dc8
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	4b28      	ldr	r3, [pc, #160]	; (800d278 <read_status_registers+0x6a8>)
 800d1d8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 800d1dc:	1dfb      	adds	r3, r7, #7
 800d1de:	4619      	mov	r1, r3
 800d1e0:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800d1e4:	f7fe f9e6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 800d1e8:	1dbb      	adds	r3, r7, #6
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800d1f0:	f7fe f9e0 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	021b      	lsls	r3, r3, #8
 800d1f8:	b21a      	sxth	r2, r3
 800d1fa:	79bb      	ldrb	r3, [r7, #6]
 800d1fc:	b21b      	sxth	r3, r3
 800d1fe:	4313      	orrs	r3, r2
 800d200:	b21b      	sxth	r3, r3
 800d202:	b29a      	uxth	r2, r3
 800d204:	4b1c      	ldr	r3, [pc, #112]	; (800d278 <read_status_registers+0x6a8>)
 800d206:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 800d20a:	1dfb      	adds	r3, r7, #7
 800d20c:	4619      	mov	r1, r3
 800d20e:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800d212:	f7fe f9cf 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 800d216:	1dbb      	adds	r3, r7, #6
 800d218:	4619      	mov	r1, r3
 800d21a:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800d21e:	f7fe f9c9 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	021b      	lsls	r3, r3, #8
 800d226:	b21a      	sxth	r2, r3
 800d228:	79bb      	ldrb	r3, [r7, #6]
 800d22a:	b21b      	sxth	r3, r3
 800d22c:	4313      	orrs	r3, r2
 800d22e:	b21b      	sxth	r3, r3
 800d230:	b29a      	uxth	r2, r3
 800d232:	4b11      	ldr	r3, [pc, #68]	; (800d278 <read_status_registers+0x6a8>)
 800d234:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 800d238:	1dfb      	adds	r3, r7, #7
 800d23a:	4619      	mov	r1, r3
 800d23c:	f242 00be 	movw	r0, #8382	; 0x20be
 800d240:	f7fe f9b8 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 800d244:	1dbb      	adds	r3, r7, #6
 800d246:	4619      	mov	r1, r3
 800d248:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800d24c:	f7fe f9b2 	bl	800b5b4 <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	021b      	lsls	r3, r3, #8
 800d254:	b21a      	sxth	r2, r3
 800d256:	79bb      	ldrb	r3, [r7, #6]
 800d258:	b21b      	sxth	r3, r3
 800d25a:	4313      	orrs	r3, r2
 800d25c:	b21b      	sxth	r3, r3
 800d25e:	b29a      	uxth	r2, r3
 800d260:	4b05      	ldr	r3, [pc, #20]	; (800d278 <read_status_registers+0x6a8>)
 800d262:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 800d266:	4b05      	ldr	r3, [pc, #20]	; (800d27c <read_status_registers+0x6ac>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7f9 f946 	bl	80064fc <osMutexRelease>
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	20009dc8 	.word	0x20009dc8
 800d27c:	2000957c 	.word	0x2000957c

0800d280 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d286:	4bbc      	ldr	r3, [pc, #752]	; (800d578 <read_control_registers+0x2f8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f04f 31ff 	mov.w	r1, #4294967295
 800d28e:	4618      	mov	r0, r3
 800d290:	f7f9 f8e6 	bl	8006460 <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 800d294:	1dfb      	adds	r3, r7, #7
 800d296:	4619      	mov	r1, r3
 800d298:	f242 1020 	movw	r0, #8480	; 0x2120
 800d29c:	f7fe f98a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 800d2a0:	1dbb      	adds	r3, r7, #6
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f242 1021 	movw	r0, #8481	; 0x2121
 800d2a8:	f7fe f984 	bl	800b5b4 <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	b21a      	sxth	r2, r3
 800d2b2:	79bb      	ldrb	r3, [r7, #6]
 800d2b4:	b21b      	sxth	r3, r3
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	b21b      	sxth	r3, r3
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	4baf      	ldr	r3, [pc, #700]	; (800d57c <read_control_registers+0x2fc>)
 800d2be:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 800d2c0:	1dfb      	adds	r3, r7, #7
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	f242 1022 	movw	r0, #8482	; 0x2122
 800d2c8:	f7fe f974 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 800d2cc:	1dbb      	adds	r3, r7, #6
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	f242 1023 	movw	r0, #8483	; 0x2123
 800d2d4:	f7fe f96e 	bl	800b5b4 <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	021b      	lsls	r3, r3, #8
 800d2dc:	b21a      	sxth	r2, r3
 800d2de:	79bb      	ldrb	r3, [r7, #6]
 800d2e0:	b21b      	sxth	r3, r3
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	b21b      	sxth	r3, r3
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	4ba4      	ldr	r3, [pc, #656]	; (800d57c <read_control_registers+0x2fc>)
 800d2ea:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 800d2ec:	1dfb      	adds	r3, r7, #7
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f242 1024 	movw	r0, #8484	; 0x2124
 800d2f4:	f7fe f95e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 800d2f8:	1dbb      	adds	r3, r7, #6
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	f242 1025 	movw	r0, #8485	; 0x2125
 800d300:	f7fe f958 	bl	800b5b4 <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	b21a      	sxth	r2, r3
 800d30a:	79bb      	ldrb	r3, [r7, #6]
 800d30c:	b21b      	sxth	r3, r3
 800d30e:	4313      	orrs	r3, r2
 800d310:	b21b      	sxth	r3, r3
 800d312:	b29a      	uxth	r2, r3
 800d314:	4b99      	ldr	r3, [pc, #612]	; (800d57c <read_control_registers+0x2fc>)
 800d316:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 800d318:	1dfb      	adds	r3, r7, #7
 800d31a:	4619      	mov	r1, r3
 800d31c:	f242 1026 	movw	r0, #8486	; 0x2126
 800d320:	f7fe f948 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d324:	1dbb      	adds	r3, r7, #6
 800d326:	4619      	mov	r1, r3
 800d328:	f242 1027 	movw	r0, #8487	; 0x2127
 800d32c:	f7fe f942 	bl	800b5b4 <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	021b      	lsls	r3, r3, #8
 800d334:	b21a      	sxth	r2, r3
 800d336:	79bb      	ldrb	r3, [r7, #6]
 800d338:	b21b      	sxth	r3, r3
 800d33a:	4313      	orrs	r3, r2
 800d33c:	b21b      	sxth	r3, r3
 800d33e:	b29a      	uxth	r2, r3
 800d340:	4b8e      	ldr	r3, [pc, #568]	; (800d57c <read_control_registers+0x2fc>)
 800d342:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 800d344:	1dfb      	adds	r3, r7, #7
 800d346:	4619      	mov	r1, r3
 800d348:	f242 1028 	movw	r0, #8488	; 0x2128
 800d34c:	f7fe f932 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d350:	1dbb      	adds	r3, r7, #6
 800d352:	4619      	mov	r1, r3
 800d354:	f242 1029 	movw	r0, #8489	; 0x2129
 800d358:	f7fe f92c 	bl	800b5b4 <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	021b      	lsls	r3, r3, #8
 800d360:	b21a      	sxth	r2, r3
 800d362:	79bb      	ldrb	r3, [r7, #6]
 800d364:	b21b      	sxth	r3, r3
 800d366:	4313      	orrs	r3, r2
 800d368:	b21b      	sxth	r3, r3
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	4b83      	ldr	r3, [pc, #524]	; (800d57c <read_control_registers+0x2fc>)
 800d36e:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d370:	1dfb      	adds	r3, r7, #7
 800d372:	4619      	mov	r1, r3
 800d374:	f242 102a 	movw	r0, #8490	; 0x212a
 800d378:	f7fe f91c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d37c:	1dbb      	adds	r3, r7, #6
 800d37e:	4619      	mov	r1, r3
 800d380:	f242 102b 	movw	r0, #8491	; 0x212b
 800d384:	f7fe f916 	bl	800b5b4 <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d388:	79fb      	ldrb	r3, [r7, #7]
 800d38a:	021b      	lsls	r3, r3, #8
 800d38c:	b21a      	sxth	r2, r3
 800d38e:	79bb      	ldrb	r3, [r7, #6]
 800d390:	b21b      	sxth	r3, r3
 800d392:	4313      	orrs	r3, r2
 800d394:	b21b      	sxth	r3, r3
 800d396:	b29a      	uxth	r2, r3
 800d398:	4b78      	ldr	r3, [pc, #480]	; (800d57c <read_control_registers+0x2fc>)
 800d39a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d39c:	1dfb      	adds	r3, r7, #7
 800d39e:	4619      	mov	r1, r3
 800d3a0:	f242 102c 	movw	r0, #8492	; 0x212c
 800d3a4:	f7fe f906 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d3a8:	1dbb      	adds	r3, r7, #6
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f242 102d 	movw	r0, #8493	; 0x212d
 800d3b0:	f7fe f900 	bl	800b5b4 <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	b21a      	sxth	r2, r3
 800d3ba:	79bb      	ldrb	r3, [r7, #6]
 800d3bc:	b21b      	sxth	r3, r3
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	b21b      	sxth	r3, r3
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	4b6d      	ldr	r3, [pc, #436]	; (800d57c <read_control_registers+0x2fc>)
 800d3c6:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 800d3c8:	1dfb      	adds	r3, r7, #7
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	f242 102e 	movw	r0, #8494	; 0x212e
 800d3d0:	f7fe f8f0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 800d3d4:	1dbb      	adds	r3, r7, #6
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	f242 102f 	movw	r0, #8495	; 0x212f
 800d3dc:	f7fe f8ea 	bl	800b5b4 <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	b21a      	sxth	r2, r3
 800d3e6:	79bb      	ldrb	r3, [r7, #6]
 800d3e8:	b21b      	sxth	r3, r3
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	b21b      	sxth	r3, r3
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	4b62      	ldr	r3, [pc, #392]	; (800d57c <read_control_registers+0x2fc>)
 800d3f2:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 800d3f4:	1dfb      	adds	r3, r7, #7
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f242 1030 	movw	r0, #8496	; 0x2130
 800d3fc:	f7fe f8da 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 800d400:	1dbb      	adds	r3, r7, #6
 800d402:	4619      	mov	r1, r3
 800d404:	f242 1031 	movw	r0, #8497	; 0x2131
 800d408:	f7fe f8d4 	bl	800b5b4 <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	021b      	lsls	r3, r3, #8
 800d410:	b21a      	sxth	r2, r3
 800d412:	79bb      	ldrb	r3, [r7, #6]
 800d414:	b21b      	sxth	r3, r3
 800d416:	4313      	orrs	r3, r2
 800d418:	b21b      	sxth	r3, r3
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	4b57      	ldr	r3, [pc, #348]	; (800d57c <read_control_registers+0x2fc>)
 800d41e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 800d420:	1dfb      	adds	r3, r7, #7
 800d422:	4619      	mov	r1, r3
 800d424:	f242 1032 	movw	r0, #8498	; 0x2132
 800d428:	f7fe f8c4 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 800d42c:	1dbb      	adds	r3, r7, #6
 800d42e:	4619      	mov	r1, r3
 800d430:	f242 1033 	movw	r0, #8499	; 0x2133
 800d434:	f7fe f8be 	bl	800b5b4 <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	021b      	lsls	r3, r3, #8
 800d43c:	b21a      	sxth	r2, r3
 800d43e:	79bb      	ldrb	r3, [r7, #6]
 800d440:	b21b      	sxth	r3, r3
 800d442:	4313      	orrs	r3, r2
 800d444:	b21b      	sxth	r3, r3
 800d446:	b29a      	uxth	r2, r3
 800d448:	4b4c      	ldr	r3, [pc, #304]	; (800d57c <read_control_registers+0x2fc>)
 800d44a:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 800d44c:	1dfb      	adds	r3, r7, #7
 800d44e:	4619      	mov	r1, r3
 800d450:	f242 1034 	movw	r0, #8500	; 0x2134
 800d454:	f7fe f8ae 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 800d458:	1dbb      	adds	r3, r7, #6
 800d45a:	4619      	mov	r1, r3
 800d45c:	f242 1035 	movw	r0, #8501	; 0x2135
 800d460:	f7fe f8a8 	bl	800b5b4 <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	021b      	lsls	r3, r3, #8
 800d468:	b21a      	sxth	r2, r3
 800d46a:	79bb      	ldrb	r3, [r7, #6]
 800d46c:	b21b      	sxth	r3, r3
 800d46e:	4313      	orrs	r3, r2
 800d470:	b21b      	sxth	r3, r3
 800d472:	b29a      	uxth	r2, r3
 800d474:	4b41      	ldr	r3, [pc, #260]	; (800d57c <read_control_registers+0x2fc>)
 800d476:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 800d478:	1dfb      	adds	r3, r7, #7
 800d47a:	4619      	mov	r1, r3
 800d47c:	f242 1036 	movw	r0, #8502	; 0x2136
 800d480:	f7fe f898 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 800d484:	1dbb      	adds	r3, r7, #6
 800d486:	4619      	mov	r1, r3
 800d488:	f242 1037 	movw	r0, #8503	; 0x2137
 800d48c:	f7fe f892 	bl	800b5b4 <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	b21a      	sxth	r2, r3
 800d496:	79bb      	ldrb	r3, [r7, #6]
 800d498:	b21b      	sxth	r3, r3
 800d49a:	4313      	orrs	r3, r2
 800d49c:	b21b      	sxth	r3, r3
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	4b36      	ldr	r3, [pc, #216]	; (800d57c <read_control_registers+0x2fc>)
 800d4a2:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	f242 1038 	movw	r0, #8504	; 0x2138
 800d4ac:	f7fe f882 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 800d4b0:	1dbb      	adds	r3, r7, #6
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	f242 1039 	movw	r0, #8505	; 0x2139
 800d4b8:	f7fe f87c 	bl	800b5b4 <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4bc:	79fb      	ldrb	r3, [r7, #7]
 800d4be:	021b      	lsls	r3, r3, #8
 800d4c0:	b21a      	sxth	r2, r3
 800d4c2:	79bb      	ldrb	r3, [r7, #6]
 800d4c4:	b21b      	sxth	r3, r3
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	b21b      	sxth	r3, r3
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	4b2b      	ldr	r3, [pc, #172]	; (800d57c <read_control_registers+0x2fc>)
 800d4ce:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 800d4d0:	1dfb      	adds	r3, r7, #7
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f242 103a 	movw	r0, #8506	; 0x213a
 800d4d8:	f7fe f86c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 800d4dc:	1dbb      	adds	r3, r7, #6
 800d4de:	4619      	mov	r1, r3
 800d4e0:	f242 103b 	movw	r0, #8507	; 0x213b
 800d4e4:	f7fe f866 	bl	800b5b4 <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	021b      	lsls	r3, r3, #8
 800d4ec:	b21a      	sxth	r2, r3
 800d4ee:	79bb      	ldrb	r3, [r7, #6]
 800d4f0:	b21b      	sxth	r3, r3
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	b21b      	sxth	r3, r3
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	4b20      	ldr	r3, [pc, #128]	; (800d57c <read_control_registers+0x2fc>)
 800d4fa:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 800d4fc:	1dfb      	adds	r3, r7, #7
 800d4fe:	4619      	mov	r1, r3
 800d500:	f242 103c 	movw	r0, #8508	; 0x213c
 800d504:	f7fe f856 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 800d508:	1dbb      	adds	r3, r7, #6
 800d50a:	4619      	mov	r1, r3
 800d50c:	f242 103d 	movw	r0, #8509	; 0x213d
 800d510:	f7fe f850 	bl	800b5b4 <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	b21a      	sxth	r2, r3
 800d51a:	79bb      	ldrb	r3, [r7, #6]
 800d51c:	b21b      	sxth	r3, r3
 800d51e:	4313      	orrs	r3, r2
 800d520:	b21b      	sxth	r3, r3
 800d522:	b29a      	uxth	r2, r3
 800d524:	4b15      	ldr	r3, [pc, #84]	; (800d57c <read_control_registers+0x2fc>)
 800d526:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 800d528:	1dfb      	adds	r3, r7, #7
 800d52a:	4619      	mov	r1, r3
 800d52c:	f242 103e 	movw	r0, #8510	; 0x213e
 800d530:	f7fe f840 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 800d534:	1dbb      	adds	r3, r7, #6
 800d536:	4619      	mov	r1, r3
 800d538:	f242 103f 	movw	r0, #8511	; 0x213f
 800d53c:	f7fe f83a 	bl	800b5b4 <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	b21a      	sxth	r2, r3
 800d546:	79bb      	ldrb	r3, [r7, #6]
 800d548:	b21b      	sxth	r3, r3
 800d54a:	4313      	orrs	r3, r2
 800d54c:	b21b      	sxth	r3, r3
 800d54e:	b29a      	uxth	r2, r3
 800d550:	4b0a      	ldr	r3, [pc, #40]	; (800d57c <read_control_registers+0x2fc>)
 800d552:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 800d554:	1dfb      	adds	r3, r7, #7
 800d556:	4619      	mov	r1, r3
 800d558:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 800d55c:	f7fe f82a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 800d560:	1dbb      	adds	r3, r7, #6
 800d562:	4619      	mov	r1, r3
 800d564:	f242 1041 	movw	r0, #8513	; 0x2141
 800d568:	f7fe f824 	bl	800b5b4 <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d56c:	79fb      	ldrb	r3, [r7, #7]
 800d56e:	021b      	lsls	r3, r3, #8
 800d570:	b21a      	sxth	r2, r3
 800d572:	79bb      	ldrb	r3, [r7, #6]
 800d574:	e004      	b.n	800d580 <read_control_registers+0x300>
 800d576:	bf00      	nop
 800d578:	2000957c 	.word	0x2000957c
 800d57c:	20009e88 	.word	0x20009e88
 800d580:	b21b      	sxth	r3, r3
 800d582:	4313      	orrs	r3, r2
 800d584:	b21b      	sxth	r3, r3
 800d586:	b29a      	uxth	r2, r3
 800d588:	4bbb      	ldr	r3, [pc, #748]	; (800d878 <read_control_registers+0x5f8>)
 800d58a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 800d58c:	1dfb      	adds	r3, r7, #7
 800d58e:	4619      	mov	r1, r3
 800d590:	f242 1042 	movw	r0, #8514	; 0x2142
 800d594:	f7fe f80e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 800d598:	1dbb      	adds	r3, r7, #6
 800d59a:	4619      	mov	r1, r3
 800d59c:	f242 1043 	movw	r0, #8515	; 0x2143
 800d5a0:	f7fe f808 	bl	800b5b4 <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	021b      	lsls	r3, r3, #8
 800d5a8:	b21a      	sxth	r2, r3
 800d5aa:	79bb      	ldrb	r3, [r7, #6]
 800d5ac:	b21b      	sxth	r3, r3
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	b21b      	sxth	r3, r3
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	4bb0      	ldr	r3, [pc, #704]	; (800d878 <read_control_registers+0x5f8>)
 800d5b6:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 800d5b8:	1dfb      	adds	r3, r7, #7
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	f242 1044 	movw	r0, #8516	; 0x2144
 800d5c0:	f7fd fff8 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 800d5c4:	1dbb      	adds	r3, r7, #6
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	f242 1045 	movw	r0, #8517	; 0x2145
 800d5cc:	f7fd fff2 	bl	800b5b4 <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5d0:	79fb      	ldrb	r3, [r7, #7]
 800d5d2:	021b      	lsls	r3, r3, #8
 800d5d4:	b21a      	sxth	r2, r3
 800d5d6:	79bb      	ldrb	r3, [r7, #6]
 800d5d8:	b21b      	sxth	r3, r3
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	b21b      	sxth	r3, r3
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	4ba5      	ldr	r3, [pc, #660]	; (800d878 <read_control_registers+0x5f8>)
 800d5e2:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 800d5e4:	1dfb      	adds	r3, r7, #7
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	f242 1046 	movw	r0, #8518	; 0x2146
 800d5ec:	f7fd ffe2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 800d5f0:	1dbb      	adds	r3, r7, #6
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f242 1047 	movw	r0, #8519	; 0x2147
 800d5f8:	f7fd ffdc 	bl	800b5b4 <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	b21a      	sxth	r2, r3
 800d602:	79bb      	ldrb	r3, [r7, #6]
 800d604:	b21b      	sxth	r3, r3
 800d606:	4313      	orrs	r3, r2
 800d608:	b21b      	sxth	r3, r3
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	4b9a      	ldr	r3, [pc, #616]	; (800d878 <read_control_registers+0x5f8>)
 800d60e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 800d610:	1dfb      	adds	r3, r7, #7
 800d612:	4619      	mov	r1, r3
 800d614:	f242 1048 	movw	r0, #8520	; 0x2148
 800d618:	f7fd ffcc 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 800d61c:	1dbb      	adds	r3, r7, #6
 800d61e:	4619      	mov	r1, r3
 800d620:	f242 1049 	movw	r0, #8521	; 0x2149
 800d624:	f7fd ffc6 	bl	800b5b4 <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d628:	79fb      	ldrb	r3, [r7, #7]
 800d62a:	021b      	lsls	r3, r3, #8
 800d62c:	b21a      	sxth	r2, r3
 800d62e:	79bb      	ldrb	r3, [r7, #6]
 800d630:	b21b      	sxth	r3, r3
 800d632:	4313      	orrs	r3, r2
 800d634:	b21b      	sxth	r3, r3
 800d636:	b29a      	uxth	r2, r3
 800d638:	4b8f      	ldr	r3, [pc, #572]	; (800d878 <read_control_registers+0x5f8>)
 800d63a:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 800d63c:	1dfb      	adds	r3, r7, #7
 800d63e:	4619      	mov	r1, r3
 800d640:	f242 104a 	movw	r0, #8522	; 0x214a
 800d644:	f7fd ffb6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 800d648:	1dbb      	adds	r3, r7, #6
 800d64a:	4619      	mov	r1, r3
 800d64c:	f242 104b 	movw	r0, #8523	; 0x214b
 800d650:	f7fd ffb0 	bl	800b5b4 <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	021b      	lsls	r3, r3, #8
 800d658:	b21a      	sxth	r2, r3
 800d65a:	79bb      	ldrb	r3, [r7, #6]
 800d65c:	b21b      	sxth	r3, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	b21b      	sxth	r3, r3
 800d662:	b29a      	uxth	r2, r3
 800d664:	4b84      	ldr	r3, [pc, #528]	; (800d878 <read_control_registers+0x5f8>)
 800d666:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 800d668:	1dfb      	adds	r3, r7, #7
 800d66a:	4619      	mov	r1, r3
 800d66c:	f242 104c 	movw	r0, #8524	; 0x214c
 800d670:	f7fd ffa0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 800d674:	1dbb      	adds	r3, r7, #6
 800d676:	4619      	mov	r1, r3
 800d678:	f242 104d 	movw	r0, #8525	; 0x214d
 800d67c:	f7fd ff9a 	bl	800b5b4 <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	021b      	lsls	r3, r3, #8
 800d684:	b21a      	sxth	r2, r3
 800d686:	79bb      	ldrb	r3, [r7, #6]
 800d688:	b21b      	sxth	r3, r3
 800d68a:	4313      	orrs	r3, r2
 800d68c:	b21b      	sxth	r3, r3
 800d68e:	b29a      	uxth	r2, r3
 800d690:	4b79      	ldr	r3, [pc, #484]	; (800d878 <read_control_registers+0x5f8>)
 800d692:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 800d694:	1dfb      	adds	r3, r7, #7
 800d696:	4619      	mov	r1, r3
 800d698:	f242 104e 	movw	r0, #8526	; 0x214e
 800d69c:	f7fd ff8a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 800d6a0:	1dbb      	adds	r3, r7, #6
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f242 104f 	movw	r0, #8527	; 0x214f
 800d6a8:	f7fd ff84 	bl	800b5b4 <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	021b      	lsls	r3, r3, #8
 800d6b0:	b21a      	sxth	r2, r3
 800d6b2:	79bb      	ldrb	r3, [r7, #6]
 800d6b4:	b21b      	sxth	r3, r3
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	b21b      	sxth	r3, r3
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	4b6e      	ldr	r3, [pc, #440]	; (800d878 <read_control_registers+0x5f8>)
 800d6be:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 800d6c0:	1dfb      	adds	r3, r7, #7
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	f242 1050 	movw	r0, #8528	; 0x2150
 800d6c8:	f7fd ff74 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 800d6cc:	1dbb      	adds	r3, r7, #6
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	f242 1051 	movw	r0, #8529	; 0x2151
 800d6d4:	f7fd ff6e 	bl	800b5b4 <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	021b      	lsls	r3, r3, #8
 800d6dc:	b21a      	sxth	r2, r3
 800d6de:	79bb      	ldrb	r3, [r7, #6]
 800d6e0:	b21b      	sxth	r3, r3
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	b21b      	sxth	r3, r3
 800d6e6:	b29a      	uxth	r2, r3
 800d6e8:	4b63      	ldr	r3, [pc, #396]	; (800d878 <read_control_registers+0x5f8>)
 800d6ea:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 800d6ec:	1dfb      	adds	r3, r7, #7
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	f242 1052 	movw	r0, #8530	; 0x2152
 800d6f4:	f7fd ff5e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 800d6f8:	1dbb      	adds	r3, r7, #6
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	f242 1053 	movw	r0, #8531	; 0x2153
 800d700:	f7fd ff58 	bl	800b5b4 <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d704:	79fb      	ldrb	r3, [r7, #7]
 800d706:	021b      	lsls	r3, r3, #8
 800d708:	b21a      	sxth	r2, r3
 800d70a:	79bb      	ldrb	r3, [r7, #6]
 800d70c:	b21b      	sxth	r3, r3
 800d70e:	4313      	orrs	r3, r2
 800d710:	b21b      	sxth	r3, r3
 800d712:	b29a      	uxth	r2, r3
 800d714:	4b58      	ldr	r3, [pc, #352]	; (800d878 <read_control_registers+0x5f8>)
 800d716:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 800d718:	1dfb      	adds	r3, r7, #7
 800d71a:	4619      	mov	r1, r3
 800d71c:	f242 1056 	movw	r0, #8534	; 0x2156
 800d720:	f7fd ff48 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 800d724:	1dbb      	adds	r3, r7, #6
 800d726:	4619      	mov	r1, r3
 800d728:	f242 1057 	movw	r0, #8535	; 0x2157
 800d72c:	f7fd ff42 	bl	800b5b4 <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d730:	79fb      	ldrb	r3, [r7, #7]
 800d732:	021b      	lsls	r3, r3, #8
 800d734:	b21a      	sxth	r2, r3
 800d736:	79bb      	ldrb	r3, [r7, #6]
 800d738:	b21b      	sxth	r3, r3
 800d73a:	4313      	orrs	r3, r2
 800d73c:	b21b      	sxth	r3, r3
 800d73e:	b29a      	uxth	r2, r3
 800d740:	4b4d      	ldr	r3, [pc, #308]	; (800d878 <read_control_registers+0x5f8>)
 800d742:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 800d744:	1dfb      	adds	r3, r7, #7
 800d746:	4619      	mov	r1, r3
 800d748:	f242 1058 	movw	r0, #8536	; 0x2158
 800d74c:	f7fd ff32 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 800d750:	1dbb      	adds	r3, r7, #6
 800d752:	4619      	mov	r1, r3
 800d754:	f242 1059 	movw	r0, #8537	; 0x2159
 800d758:	f7fd ff2c 	bl	800b5b4 <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d75c:	79fb      	ldrb	r3, [r7, #7]
 800d75e:	021b      	lsls	r3, r3, #8
 800d760:	b21a      	sxth	r2, r3
 800d762:	79bb      	ldrb	r3, [r7, #6]
 800d764:	b21b      	sxth	r3, r3
 800d766:	4313      	orrs	r3, r2
 800d768:	b21b      	sxth	r3, r3
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	4b42      	ldr	r3, [pc, #264]	; (800d878 <read_control_registers+0x5f8>)
 800d76e:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 800d770:	1dfb      	adds	r3, r7, #7
 800d772:	4619      	mov	r1, r3
 800d774:	f242 105a 	movw	r0, #8538	; 0x215a
 800d778:	f7fd ff1c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 800d77c:	1dbb      	adds	r3, r7, #6
 800d77e:	4619      	mov	r1, r3
 800d780:	f242 105b 	movw	r0, #8539	; 0x215b
 800d784:	f7fd ff16 	bl	800b5b4 <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	021b      	lsls	r3, r3, #8
 800d78c:	b21a      	sxth	r2, r3
 800d78e:	79bb      	ldrb	r3, [r7, #6]
 800d790:	b21b      	sxth	r3, r3
 800d792:	4313      	orrs	r3, r2
 800d794:	b21b      	sxth	r3, r3
 800d796:	b29a      	uxth	r2, r3
 800d798:	4b37      	ldr	r3, [pc, #220]	; (800d878 <read_control_registers+0x5f8>)
 800d79a:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 800d79c:	1dfb      	adds	r3, r7, #7
 800d79e:	4619      	mov	r1, r3
 800d7a0:	f242 105c 	movw	r0, #8540	; 0x215c
 800d7a4:	f7fd ff06 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 800d7a8:	1dbb      	adds	r3, r7, #6
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	f242 105d 	movw	r0, #8541	; 0x215d
 800d7b0:	f7fd ff00 	bl	800b5b4 <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	021b      	lsls	r3, r3, #8
 800d7b8:	b21a      	sxth	r2, r3
 800d7ba:	79bb      	ldrb	r3, [r7, #6]
 800d7bc:	b21b      	sxth	r3, r3
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	b21b      	sxth	r3, r3
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	4b2c      	ldr	r3, [pc, #176]	; (800d878 <read_control_registers+0x5f8>)
 800d7c6:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 800d7c8:	1dfb      	adds	r3, r7, #7
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f242 105e 	movw	r0, #8542	; 0x215e
 800d7d0:	f7fd fef0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 800d7d4:	1dbb      	adds	r3, r7, #6
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f242 105f 	movw	r0, #8543	; 0x215f
 800d7dc:	f7fd feea 	bl	800b5b4 <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	021b      	lsls	r3, r3, #8
 800d7e4:	b21a      	sxth	r2, r3
 800d7e6:	79bb      	ldrb	r3, [r7, #6]
 800d7e8:	b21b      	sxth	r3, r3
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	b21b      	sxth	r3, r3
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	4b21      	ldr	r3, [pc, #132]	; (800d878 <read_control_registers+0x5f8>)
 800d7f2:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 800d7f4:	1dfb      	adds	r3, r7, #7
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f242 1060 	movw	r0, #8544	; 0x2160
 800d7fc:	f7fd feda 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 800d800:	1dbb      	adds	r3, r7, #6
 800d802:	4619      	mov	r1, r3
 800d804:	f242 1061 	movw	r0, #8545	; 0x2161
 800d808:	f7fd fed4 	bl	800b5b4 <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	b21a      	sxth	r2, r3
 800d812:	79bb      	ldrb	r3, [r7, #6]
 800d814:	b21b      	sxth	r3, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	b21b      	sxth	r3, r3
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	4b16      	ldr	r3, [pc, #88]	; (800d878 <read_control_registers+0x5f8>)
 800d81e:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	4619      	mov	r1, r3
 800d824:	f242 1062 	movw	r0, #8546	; 0x2162
 800d828:	f7fd fec4 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 800d82c:	1dbb      	adds	r3, r7, #6
 800d82e:	4619      	mov	r1, r3
 800d830:	f242 1063 	movw	r0, #8547	; 0x2163
 800d834:	f7fd febe 	bl	800b5b4 <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	021b      	lsls	r3, r3, #8
 800d83c:	b21a      	sxth	r2, r3
 800d83e:	79bb      	ldrb	r3, [r7, #6]
 800d840:	b21b      	sxth	r3, r3
 800d842:	4313      	orrs	r3, r2
 800d844:	b21b      	sxth	r3, r3
 800d846:	b29a      	uxth	r2, r3
 800d848:	4b0b      	ldr	r3, [pc, #44]	; (800d878 <read_control_registers+0x5f8>)
 800d84a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 800d84e:	1dfb      	adds	r3, r7, #7
 800d850:	4619      	mov	r1, r3
 800d852:	f242 1064 	movw	r0, #8548	; 0x2164
 800d856:	f7fd fead 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 800d85a:	1dbb      	adds	r3, r7, #6
 800d85c:	4619      	mov	r1, r3
 800d85e:	f242 1065 	movw	r0, #8549	; 0x2165
 800d862:	f7fd fea7 	bl	800b5b4 <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d866:	79fb      	ldrb	r3, [r7, #7]
 800d868:	021b      	lsls	r3, r3, #8
 800d86a:	b21a      	sxth	r2, r3
 800d86c:	79bb      	ldrb	r3, [r7, #6]
 800d86e:	b21b      	sxth	r3, r3
 800d870:	4313      	orrs	r3, r2
 800d872:	b21b      	sxth	r3, r3
 800d874:	e002      	b.n	800d87c <read_control_registers+0x5fc>
 800d876:	bf00      	nop
 800d878:	20009e88 	.word	0x20009e88
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	4b3f      	ldr	r3, [pc, #252]	; (800d97c <read_control_registers+0x6fc>)
 800d880:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 800d884:	1dfb      	adds	r3, r7, #7
 800d886:	4619      	mov	r1, r3
 800d888:	f242 1066 	movw	r0, #8550	; 0x2166
 800d88c:	f7fd fe92 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 800d890:	1dbb      	adds	r3, r7, #6
 800d892:	4619      	mov	r1, r3
 800d894:	f242 1067 	movw	r0, #8551	; 0x2167
 800d898:	f7fd fe8c 	bl	800b5b4 <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d89c:	79fb      	ldrb	r3, [r7, #7]
 800d89e:	021b      	lsls	r3, r3, #8
 800d8a0:	b21a      	sxth	r2, r3
 800d8a2:	79bb      	ldrb	r3, [r7, #6]
 800d8a4:	b21b      	sxth	r3, r3
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	b21b      	sxth	r3, r3
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	4b33      	ldr	r3, [pc, #204]	; (800d97c <read_control_registers+0x6fc>)
 800d8ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 800d8b2:	1dfb      	adds	r3, r7, #7
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	f242 1068 	movw	r0, #8552	; 0x2168
 800d8ba:	f7fd fe7b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 800d8be:	1dbb      	adds	r3, r7, #6
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	f242 1069 	movw	r0, #8553	; 0x2169
 800d8c6:	f7fd fe75 	bl	800b5b4 <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d8ca:	79fb      	ldrb	r3, [r7, #7]
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	b21a      	sxth	r2, r3
 800d8d0:	79bb      	ldrb	r3, [r7, #6]
 800d8d2:	b21b      	sxth	r3, r3
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	b21b      	sxth	r3, r3
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	4b28      	ldr	r3, [pc, #160]	; (800d97c <read_control_registers+0x6fc>)
 800d8dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 800d8e0:	1dfb      	adds	r3, r7, #7
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	f242 106a 	movw	r0, #8554	; 0x216a
 800d8e8:	f7fd fe64 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 800d8ec:	1dbb      	adds	r3, r7, #6
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	f242 106b 	movw	r0, #8555	; 0x216b
 800d8f4:	f7fd fe5e 	bl	800b5b4 <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	b21a      	sxth	r2, r3
 800d8fe:	79bb      	ldrb	r3, [r7, #6]
 800d900:	b21b      	sxth	r3, r3
 800d902:	4313      	orrs	r3, r2
 800d904:	b21b      	sxth	r3, r3
 800d906:	b29a      	uxth	r2, r3
 800d908:	4b1c      	ldr	r3, [pc, #112]	; (800d97c <read_control_registers+0x6fc>)
 800d90a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 800d90e:	1dfb      	adds	r3, r7, #7
 800d910:	4619      	mov	r1, r3
 800d912:	f242 106c 	movw	r0, #8556	; 0x216c
 800d916:	f7fd fe4d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 800d91a:	1dbb      	adds	r3, r7, #6
 800d91c:	4619      	mov	r1, r3
 800d91e:	f242 106d 	movw	r0, #8557	; 0x216d
 800d922:	f7fd fe47 	bl	800b5b4 <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d926:	79fb      	ldrb	r3, [r7, #7]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	b21a      	sxth	r2, r3
 800d92c:	79bb      	ldrb	r3, [r7, #6]
 800d92e:	b21b      	sxth	r3, r3
 800d930:	4313      	orrs	r3, r2
 800d932:	b21b      	sxth	r3, r3
 800d934:	b29a      	uxth	r2, r3
 800d936:	4b11      	ldr	r3, [pc, #68]	; (800d97c <read_control_registers+0x6fc>)
 800d938:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 800d93c:	1dfb      	adds	r3, r7, #7
 800d93e:	4619      	mov	r1, r3
 800d940:	f242 106e 	movw	r0, #8558	; 0x216e
 800d944:	f7fd fe36 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 800d948:	1dbb      	adds	r3, r7, #6
 800d94a:	4619      	mov	r1, r3
 800d94c:	f242 106f 	movw	r0, #8559	; 0x216f
 800d950:	f7fd fe30 	bl	800b5b4 <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d954:	79fb      	ldrb	r3, [r7, #7]
 800d956:	021b      	lsls	r3, r3, #8
 800d958:	b21a      	sxth	r2, r3
 800d95a:	79bb      	ldrb	r3, [r7, #6]
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	4313      	orrs	r3, r2
 800d960:	b21b      	sxth	r3, r3
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b05      	ldr	r3, [pc, #20]	; (800d97c <read_control_registers+0x6fc>)
 800d966:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
	//fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
	//control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	osMutexRelease(Fm25v02MutexHandle);
 800d96a:	4b05      	ldr	r3, [pc, #20]	; (800d980 <read_control_registers+0x700>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4618      	mov	r0, r3
 800d970:	f7f8 fdc4 	bl	80064fc <osMutexRelease>

}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	20009e88 	.word	0x20009e88
 800d980:	2000957c 	.word	0x2000957c

0800d984 <read_bootloader_registers>:


//----Функция чтения из памяти регистров бутлоадера---------------

void read_bootloader_registers(void)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d98a:	4bbc      	ldr	r3, [pc, #752]	; (800dc7c <read_bootloader_registers+0x2f8>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f04f 31ff 	mov.w	r1, #4294967295
 800d992:	4618      	mov	r0, r3
 800d994:	f7f8 fd64 	bl	8006460 <osMutexWait>

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800d998:	1dfb      	adds	r3, r7, #7
 800d99a:	4619      	mov	r1, r3
 800d99c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d9a0:	f7fd fe08 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800d9a4:	1dbb      	adds	r3, r7, #6
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	f240 2001 	movw	r0, #513	; 0x201
 800d9ac:	f7fd fe02 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	b21a      	sxth	r2, r3
 800d9b6:	79bb      	ldrb	r3, [r7, #6]
 800d9b8:	b21b      	sxth	r3, r3
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	b21b      	sxth	r3, r3
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	4baf      	ldr	r3, [pc, #700]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800d9c2:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d9c4:	1dfb      	adds	r3, r7, #7
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f44f 7001 	mov.w	r0, #516	; 0x204
 800d9cc:	f7fd fdf2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d9d0:	1dbb      	adds	r3, r7, #6
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	f240 2005 	movw	r0, #517	; 0x205
 800d9d8:	f7fd fdec 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d9dc:	79fb      	ldrb	r3, [r7, #7]
 800d9de:	021b      	lsls	r3, r3, #8
 800d9e0:	b21a      	sxth	r2, r3
 800d9e2:	79bb      	ldrb	r3, [r7, #6]
 800d9e4:	b21b      	sxth	r3, r3
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	b21b      	sxth	r3, r3
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	4ba4      	ldr	r3, [pc, #656]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800d9ee:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800d9f0:	1dfb      	adds	r3, r7, #7
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f240 2006 	movw	r0, #518	; 0x206
 800d9f8:	f7fd fddc 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800d9fc:	1dbb      	adds	r3, r7, #6
 800d9fe:	4619      	mov	r1, r3
 800da00:	f240 2007 	movw	r0, #519	; 0x207
 800da04:	f7fd fdd6 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da08:	79fb      	ldrb	r3, [r7, #7]
 800da0a:	021b      	lsls	r3, r3, #8
 800da0c:	b21a      	sxth	r2, r3
 800da0e:	79bb      	ldrb	r3, [r7, #6]
 800da10:	b21b      	sxth	r3, r3
 800da12:	4313      	orrs	r3, r2
 800da14:	b21b      	sxth	r3, r3
 800da16:	b29a      	uxth	r2, r3
 800da18:	4b99      	ldr	r3, [pc, #612]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800da1a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800da1c:	1dfb      	adds	r3, r7, #7
 800da1e:	4619      	mov	r1, r3
 800da20:	f44f 7002 	mov.w	r0, #520	; 0x208
 800da24:	f7fd fdc6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800da28:	1dbb      	adds	r3, r7, #6
 800da2a:	4619      	mov	r1, r3
 800da2c:	f240 2009 	movw	r0, #521	; 0x209
 800da30:	f7fd fdc0 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	021b      	lsls	r3, r3, #8
 800da38:	b21a      	sxth	r2, r3
 800da3a:	79bb      	ldrb	r3, [r7, #6]
 800da3c:	b21b      	sxth	r3, r3
 800da3e:	4313      	orrs	r3, r2
 800da40:	b21b      	sxth	r3, r3
 800da42:	b29a      	uxth	r2, r3
 800da44:	4b8e      	ldr	r3, [pc, #568]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800da46:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800da48:	1dfb      	adds	r3, r7, #7
 800da4a:	4619      	mov	r1, r3
 800da4c:	f240 200a 	movw	r0, #522	; 0x20a
 800da50:	f7fd fdb0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800da54:	1dbb      	adds	r3, r7, #6
 800da56:	4619      	mov	r1, r3
 800da58:	f240 200b 	movw	r0, #523	; 0x20b
 800da5c:	f7fd fdaa 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	021b      	lsls	r3, r3, #8
 800da64:	b21a      	sxth	r2, r3
 800da66:	79bb      	ldrb	r3, [r7, #6]
 800da68:	b21b      	sxth	r3, r3
 800da6a:	4313      	orrs	r3, r2
 800da6c:	b21b      	sxth	r3, r3
 800da6e:	b29a      	uxth	r2, r3
 800da70:	4b83      	ldr	r3, [pc, #524]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800da72:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800da74:	1dfb      	adds	r3, r7, #7
 800da76:	4619      	mov	r1, r3
 800da78:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800da7c:	f7fd fd9a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800da80:	1dbb      	adds	r3, r7, #6
 800da82:	4619      	mov	r1, r3
 800da84:	f240 200d 	movw	r0, #525	; 0x20d
 800da88:	f7fd fd94 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da8c:	79fb      	ldrb	r3, [r7, #7]
 800da8e:	021b      	lsls	r3, r3, #8
 800da90:	b21a      	sxth	r2, r3
 800da92:	79bb      	ldrb	r3, [r7, #6]
 800da94:	b21b      	sxth	r3, r3
 800da96:	4313      	orrs	r3, r2
 800da98:	b21b      	sxth	r3, r3
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	4b78      	ldr	r3, [pc, #480]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800da9e:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800daa0:	1dfb      	adds	r3, r7, #7
 800daa2:	4619      	mov	r1, r3
 800daa4:	f240 200e 	movw	r0, #526	; 0x20e
 800daa8:	f7fd fd84 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800daac:	1dbb      	adds	r3, r7, #6
 800daae:	4619      	mov	r1, r3
 800dab0:	f240 200f 	movw	r0, #527	; 0x20f
 800dab4:	f7fd fd7e 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	021b      	lsls	r3, r3, #8
 800dabc:	b21a      	sxth	r2, r3
 800dabe:	79bb      	ldrb	r3, [r7, #6]
 800dac0:	b21b      	sxth	r3, r3
 800dac2:	4313      	orrs	r3, r2
 800dac4:	b21b      	sxth	r3, r3
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	4b6d      	ldr	r3, [pc, #436]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800daca:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800dacc:	1dfb      	adds	r3, r7, #7
 800dace:	4619      	mov	r1, r3
 800dad0:	f44f 7004 	mov.w	r0, #528	; 0x210
 800dad4:	f7fd fd6e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800dad8:	1dbb      	adds	r3, r7, #6
 800dada:	4619      	mov	r1, r3
 800dadc:	f240 2011 	movw	r0, #529	; 0x211
 800dae0:	f7fd fd68 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dae4:	79fb      	ldrb	r3, [r7, #7]
 800dae6:	021b      	lsls	r3, r3, #8
 800dae8:	b21a      	sxth	r2, r3
 800daea:	79bb      	ldrb	r3, [r7, #6]
 800daec:	b21b      	sxth	r3, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	b21b      	sxth	r3, r3
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	4b62      	ldr	r3, [pc, #392]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800daf6:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800daf8:	1dfb      	adds	r3, r7, #7
 800dafa:	4619      	mov	r1, r3
 800dafc:	f240 2012 	movw	r0, #530	; 0x212
 800db00:	f7fd fd58 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800db04:	1dbb      	adds	r3, r7, #6
 800db06:	4619      	mov	r1, r3
 800db08:	f240 2013 	movw	r0, #531	; 0x213
 800db0c:	f7fd fd52 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	b21a      	sxth	r2, r3
 800db16:	79bb      	ldrb	r3, [r7, #6]
 800db18:	b21b      	sxth	r3, r3
 800db1a:	4313      	orrs	r3, r2
 800db1c:	b21b      	sxth	r3, r3
 800db1e:	b29a      	uxth	r2, r3
 800db20:	4b57      	ldr	r3, [pc, #348]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800db22:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800db24:	1dfb      	adds	r3, r7, #7
 800db26:	4619      	mov	r1, r3
 800db28:	f44f 7005 	mov.w	r0, #532	; 0x214
 800db2c:	f7fd fd42 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800db30:	1dbb      	adds	r3, r7, #6
 800db32:	4619      	mov	r1, r3
 800db34:	f240 2015 	movw	r0, #533	; 0x215
 800db38:	f7fd fd3c 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db3c:	79fb      	ldrb	r3, [r7, #7]
 800db3e:	021b      	lsls	r3, r3, #8
 800db40:	b21a      	sxth	r2, r3
 800db42:	79bb      	ldrb	r3, [r7, #6]
 800db44:	b21b      	sxth	r3, r3
 800db46:	4313      	orrs	r3, r2
 800db48:	b21b      	sxth	r3, r3
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	4b4c      	ldr	r3, [pc, #304]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800db4e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800db50:	1dfb      	adds	r3, r7, #7
 800db52:	4619      	mov	r1, r3
 800db54:	f240 2016 	movw	r0, #534	; 0x216
 800db58:	f7fd fd2c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800db5c:	1dbb      	adds	r3, r7, #6
 800db5e:	4619      	mov	r1, r3
 800db60:	f240 2017 	movw	r0, #535	; 0x217
 800db64:	f7fd fd26 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db68:	79fb      	ldrb	r3, [r7, #7]
 800db6a:	021b      	lsls	r3, r3, #8
 800db6c:	b21a      	sxth	r2, r3
 800db6e:	79bb      	ldrb	r3, [r7, #6]
 800db70:	b21b      	sxth	r3, r3
 800db72:	4313      	orrs	r3, r2
 800db74:	b21b      	sxth	r3, r3
 800db76:	b29a      	uxth	r2, r3
 800db78:	4b41      	ldr	r3, [pc, #260]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800db7a:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800db7c:	1dfb      	adds	r3, r7, #7
 800db7e:	4619      	mov	r1, r3
 800db80:	f44f 7006 	mov.w	r0, #536	; 0x218
 800db84:	f7fd fd16 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800db88:	1dbb      	adds	r3, r7, #6
 800db8a:	4619      	mov	r1, r3
 800db8c:	f240 2019 	movw	r0, #537	; 0x219
 800db90:	f7fd fd10 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db94:	79fb      	ldrb	r3, [r7, #7]
 800db96:	021b      	lsls	r3, r3, #8
 800db98:	b21a      	sxth	r2, r3
 800db9a:	79bb      	ldrb	r3, [r7, #6]
 800db9c:	b21b      	sxth	r3, r3
 800db9e:	4313      	orrs	r3, r2
 800dba0:	b21b      	sxth	r3, r3
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	4b36      	ldr	r3, [pc, #216]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800dba6:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800dba8:	1dfb      	adds	r3, r7, #7
 800dbaa:	4619      	mov	r1, r3
 800dbac:	f240 201a 	movw	r0, #538	; 0x21a
 800dbb0:	f7fd fd00 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800dbb4:	1dbb      	adds	r3, r7, #6
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	f240 201b 	movw	r0, #539	; 0x21b
 800dbbc:	f7fd fcfa 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dbc0:	79fb      	ldrb	r3, [r7, #7]
 800dbc2:	021b      	lsls	r3, r3, #8
 800dbc4:	b21a      	sxth	r2, r3
 800dbc6:	79bb      	ldrb	r3, [r7, #6]
 800dbc8:	b21b      	sxth	r3, r3
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	b21b      	sxth	r3, r3
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	4b2b      	ldr	r3, [pc, #172]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800dbd2:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800dbd4:	1dfb      	adds	r3, r7, #7
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dbdc:	f7fd fcea 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800dbe0:	1dbb      	adds	r3, r7, #6
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	f240 201d 	movw	r0, #541	; 0x21d
 800dbe8:	f7fd fce4 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	021b      	lsls	r3, r3, #8
 800dbf0:	b21a      	sxth	r2, r3
 800dbf2:	79bb      	ldrb	r3, [r7, #6]
 800dbf4:	b21b      	sxth	r3, r3
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	b21b      	sxth	r3, r3
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	4b20      	ldr	r3, [pc, #128]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800dbfe:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800dc00:	1dfb      	adds	r3, r7, #7
 800dc02:	4619      	mov	r1, r3
 800dc04:	f240 201e 	movw	r0, #542	; 0x21e
 800dc08:	f7fd fcd4 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800dc0c:	1dbb      	adds	r3, r7, #6
 800dc0e:	4619      	mov	r1, r3
 800dc10:	f240 201f 	movw	r0, #543	; 0x21f
 800dc14:	f7fd fcce 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	b21a      	sxth	r2, r3
 800dc1e:	79bb      	ldrb	r3, [r7, #6]
 800dc20:	b21b      	sxth	r3, r3
 800dc22:	4313      	orrs	r3, r2
 800dc24:	b21b      	sxth	r3, r3
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	4b15      	ldr	r3, [pc, #84]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800dc2a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800dc2c:	1dfb      	adds	r3, r7, #7
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f44f 7008 	mov.w	r0, #544	; 0x220
 800dc34:	f7fd fcbe 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800dc38:	1dbb      	adds	r3, r7, #6
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f240 2021 	movw	r0, #545	; 0x221
 800dc40:	f7fd fcb8 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc44:	79fb      	ldrb	r3, [r7, #7]
 800dc46:	021b      	lsls	r3, r3, #8
 800dc48:	b21a      	sxth	r2, r3
 800dc4a:	79bb      	ldrb	r3, [r7, #6]
 800dc4c:	b21b      	sxth	r3, r3
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	b21b      	sxth	r3, r3
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <read_bootloader_registers+0x2fc>)
 800dc56:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800dc58:	1dfb      	adds	r3, r7, #7
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	f240 2022 	movw	r0, #546	; 0x222
 800dc60:	f7fd fca8 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800dc64:	1dbb      	adds	r3, r7, #6
 800dc66:	4619      	mov	r1, r3
 800dc68:	f240 2023 	movw	r0, #547	; 0x223
 800dc6c:	f7fd fca2 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc70:	79fb      	ldrb	r3, [r7, #7]
 800dc72:	021b      	lsls	r3, r3, #8
 800dc74:	b21a      	sxth	r2, r3
 800dc76:	79bb      	ldrb	r3, [r7, #6]
 800dc78:	e004      	b.n	800dc84 <read_bootloader_registers+0x300>
 800dc7a:	bf00      	nop
 800dc7c:	2000957c 	.word	0x2000957c
 800dc80:	20009d5c 	.word	0x20009d5c
 800dc84:	b21b      	sxth	r3, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	b21b      	sxth	r3, r3
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	4bbb      	ldr	r3, [pc, #748]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dc8e:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800dc90:	1dfb      	adds	r3, r7, #7
 800dc92:	4619      	mov	r1, r3
 800dc94:	f44f 7009 	mov.w	r0, #548	; 0x224
 800dc98:	f7fd fc8c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800dc9c:	1dbb      	adds	r3, r7, #6
 800dc9e:	4619      	mov	r1, r3
 800dca0:	f240 2025 	movw	r0, #549	; 0x225
 800dca4:	f7fd fc86 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dca8:	79fb      	ldrb	r3, [r7, #7]
 800dcaa:	021b      	lsls	r3, r3, #8
 800dcac:	b21a      	sxth	r2, r3
 800dcae:	79bb      	ldrb	r3, [r7, #6]
 800dcb0:	b21b      	sxth	r3, r3
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	b21b      	sxth	r3, r3
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	4bb0      	ldr	r3, [pc, #704]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dcba:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800dcbc:	1dfb      	adds	r3, r7, #7
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	f240 2026 	movw	r0, #550	; 0x226
 800dcc4:	f7fd fc76 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800dcc8:	1dbb      	adds	r3, r7, #6
 800dcca:	4619      	mov	r1, r3
 800dccc:	f240 2027 	movw	r0, #551	; 0x227
 800dcd0:	f7fd fc70 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	021b      	lsls	r3, r3, #8
 800dcd8:	b21a      	sxth	r2, r3
 800dcda:	79bb      	ldrb	r3, [r7, #6]
 800dcdc:	b21b      	sxth	r3, r3
 800dcde:	4313      	orrs	r3, r2
 800dce0:	b21b      	sxth	r3, r3
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	4ba5      	ldr	r3, [pc, #660]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dce6:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800dce8:	1dfb      	adds	r3, r7, #7
 800dcea:	4619      	mov	r1, r3
 800dcec:	f44f 700a 	mov.w	r0, #552	; 0x228
 800dcf0:	f7fd fc60 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800dcf4:	1dbb      	adds	r3, r7, #6
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	f240 2029 	movw	r0, #553	; 0x229
 800dcfc:	f7fd fc5a 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd00:	79fb      	ldrb	r3, [r7, #7]
 800dd02:	021b      	lsls	r3, r3, #8
 800dd04:	b21a      	sxth	r2, r3
 800dd06:	79bb      	ldrb	r3, [r7, #6]
 800dd08:	b21b      	sxth	r3, r3
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	b21b      	sxth	r3, r3
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	4b9a      	ldr	r3, [pc, #616]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dd12:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800dd14:	1dfb      	adds	r3, r7, #7
 800dd16:	4619      	mov	r1, r3
 800dd18:	f240 202a 	movw	r0, #554	; 0x22a
 800dd1c:	f7fd fc4a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800dd20:	1dbb      	adds	r3, r7, #6
 800dd22:	4619      	mov	r1, r3
 800dd24:	f240 202b 	movw	r0, #555	; 0x22b
 800dd28:	f7fd fc44 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	b21a      	sxth	r2, r3
 800dd32:	79bb      	ldrb	r3, [r7, #6]
 800dd34:	b21b      	sxth	r3, r3
 800dd36:	4313      	orrs	r3, r2
 800dd38:	b21b      	sxth	r3, r3
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	4b8f      	ldr	r3, [pc, #572]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dd3e:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800dd40:	1dfb      	adds	r3, r7, #7
 800dd42:	4619      	mov	r1, r3
 800dd44:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800dd48:	f7fd fc34 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800dd4c:	1dbb      	adds	r3, r7, #6
 800dd4e:	4619      	mov	r1, r3
 800dd50:	f240 202d 	movw	r0, #557	; 0x22d
 800dd54:	f7fd fc2e 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd58:	79fb      	ldrb	r3, [r7, #7]
 800dd5a:	021b      	lsls	r3, r3, #8
 800dd5c:	b21a      	sxth	r2, r3
 800dd5e:	79bb      	ldrb	r3, [r7, #6]
 800dd60:	b21b      	sxth	r3, r3
 800dd62:	4313      	orrs	r3, r2
 800dd64:	b21b      	sxth	r3, r3
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	4b84      	ldr	r3, [pc, #528]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dd6a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800dd6c:	1dfb      	adds	r3, r7, #7
 800dd6e:	4619      	mov	r1, r3
 800dd70:	f240 202e 	movw	r0, #558	; 0x22e
 800dd74:	f7fd fc1e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800dd78:	1dbb      	adds	r3, r7, #6
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	f240 202f 	movw	r0, #559	; 0x22f
 800dd80:	f7fd fc18 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd84:	79fb      	ldrb	r3, [r7, #7]
 800dd86:	021b      	lsls	r3, r3, #8
 800dd88:	b21a      	sxth	r2, r3
 800dd8a:	79bb      	ldrb	r3, [r7, #6]
 800dd8c:	b21b      	sxth	r3, r3
 800dd8e:	4313      	orrs	r3, r2
 800dd90:	b21b      	sxth	r3, r3
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	4b79      	ldr	r3, [pc, #484]	; (800df7c <read_bootloader_registers+0x5f8>)
 800dd96:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800dd98:	1dfb      	adds	r3, r7, #7
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	f240 203e 	movw	r0, #574	; 0x23e
 800dda0:	f7fd fc08 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800dda4:	1dbb      	adds	r3, r7, #6
 800dda6:	4619      	mov	r1, r3
 800dda8:	f240 203f 	movw	r0, #575	; 0x23f
 800ddac:	f7fd fc02 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ddb0:	79fb      	ldrb	r3, [r7, #7]
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	b21a      	sxth	r2, r3
 800ddb6:	79bb      	ldrb	r3, [r7, #6]
 800ddb8:	b21b      	sxth	r3, r3
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	b21b      	sxth	r3, r3
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	4b6e      	ldr	r3, [pc, #440]	; (800df7c <read_bootloader_registers+0x5f8>)
 800ddc2:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800ddc4:	1dfb      	adds	r3, r7, #7
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	f44f 7010 	mov.w	r0, #576	; 0x240
 800ddcc:	f7fd fbf2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800ddd0:	1dbb      	adds	r3, r7, #6
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	f240 2041 	movw	r0, #577	; 0x241
 800ddd8:	f7fd fbec 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	021b      	lsls	r3, r3, #8
 800dde0:	b21a      	sxth	r2, r3
 800dde2:	79bb      	ldrb	r3, [r7, #6]
 800dde4:	b21b      	sxth	r3, r3
 800dde6:	4313      	orrs	r3, r2
 800dde8:	b21b      	sxth	r3, r3
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b63      	ldr	r3, [pc, #396]	; (800df7c <read_bootloader_registers+0x5f8>)
 800ddee:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800ddf0:	1dfb      	adds	r3, r7, #7
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	f240 2042 	movw	r0, #578	; 0x242
 800ddf8:	f7fd fbdc 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800ddfc:	1dbb      	adds	r3, r7, #6
 800ddfe:	4619      	mov	r1, r3
 800de00:	f240 2043 	movw	r0, #579	; 0x243
 800de04:	f7fd fbd6 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	b21a      	sxth	r2, r3
 800de0e:	79bb      	ldrb	r3, [r7, #6]
 800de10:	b21b      	sxth	r3, r3
 800de12:	4313      	orrs	r3, r2
 800de14:	b21b      	sxth	r3, r3
 800de16:	b29a      	uxth	r2, r3
 800de18:	4b58      	ldr	r3, [pc, #352]	; (800df7c <read_bootloader_registers+0x5f8>)
 800de1a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800de1c:	1dfb      	adds	r3, r7, #7
 800de1e:	4619      	mov	r1, r3
 800de20:	f44f 7011 	mov.w	r0, #580	; 0x244
 800de24:	f7fd fbc6 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800de28:	1dbb      	adds	r3, r7, #6
 800de2a:	4619      	mov	r1, r3
 800de2c:	f240 2045 	movw	r0, #581	; 0x245
 800de30:	f7fd fbc0 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	021b      	lsls	r3, r3, #8
 800de38:	b21a      	sxth	r2, r3
 800de3a:	79bb      	ldrb	r3, [r7, #6]
 800de3c:	b21b      	sxth	r3, r3
 800de3e:	4313      	orrs	r3, r2
 800de40:	b21b      	sxth	r3, r3
 800de42:	b29a      	uxth	r2, r3
 800de44:	4b4d      	ldr	r3, [pc, #308]	; (800df7c <read_bootloader_registers+0x5f8>)
 800de46:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800de48:	1dfb      	adds	r3, r7, #7
 800de4a:	4619      	mov	r1, r3
 800de4c:	f240 2046 	movw	r0, #582	; 0x246
 800de50:	f7fd fbb0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800de54:	1dbb      	adds	r3, r7, #6
 800de56:	4619      	mov	r1, r3
 800de58:	f240 2047 	movw	r0, #583	; 0x247
 800de5c:	f7fd fbaa 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de60:	79fb      	ldrb	r3, [r7, #7]
 800de62:	021b      	lsls	r3, r3, #8
 800de64:	b21a      	sxth	r2, r3
 800de66:	79bb      	ldrb	r3, [r7, #6]
 800de68:	b21b      	sxth	r3, r3
 800de6a:	4313      	orrs	r3, r2
 800de6c:	b21b      	sxth	r3, r3
 800de6e:	b29a      	uxth	r2, r3
 800de70:	4b42      	ldr	r3, [pc, #264]	; (800df7c <read_bootloader_registers+0x5f8>)
 800de72:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800de74:	1dfb      	adds	r3, r7, #7
 800de76:	4619      	mov	r1, r3
 800de78:	f44f 7012 	mov.w	r0, #584	; 0x248
 800de7c:	f7fd fb9a 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800de80:	1dbb      	adds	r3, r7, #6
 800de82:	4619      	mov	r1, r3
 800de84:	f240 2049 	movw	r0, #585	; 0x249
 800de88:	f7fd fb94 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de8c:	79fb      	ldrb	r3, [r7, #7]
 800de8e:	021b      	lsls	r3, r3, #8
 800de90:	b21a      	sxth	r2, r3
 800de92:	79bb      	ldrb	r3, [r7, #6]
 800de94:	b21b      	sxth	r3, r3
 800de96:	4313      	orrs	r3, r2
 800de98:	b21b      	sxth	r3, r3
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	4b37      	ldr	r3, [pc, #220]	; (800df7c <read_bootloader_registers+0x5f8>)
 800de9e:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800dea0:	1dfb      	adds	r3, r7, #7
 800dea2:	4619      	mov	r1, r3
 800dea4:	f240 204a 	movw	r0, #586	; 0x24a
 800dea8:	f7fd fb84 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800deac:	1dbb      	adds	r3, r7, #6
 800deae:	4619      	mov	r1, r3
 800deb0:	f240 204b 	movw	r0, #587	; 0x24b
 800deb4:	f7fd fb7e 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	021b      	lsls	r3, r3, #8
 800debc:	b21a      	sxth	r2, r3
 800debe:	79bb      	ldrb	r3, [r7, #6]
 800dec0:	b21b      	sxth	r3, r3
 800dec2:	4313      	orrs	r3, r2
 800dec4:	b21b      	sxth	r3, r3
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	4b2c      	ldr	r3, [pc, #176]	; (800df7c <read_bootloader_registers+0x5f8>)
 800deca:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800decc:	1dfb      	adds	r3, r7, #7
 800dece:	4619      	mov	r1, r3
 800ded0:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800ded4:	f7fd fb6e 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800ded8:	1dbb      	adds	r3, r7, #6
 800deda:	4619      	mov	r1, r3
 800dedc:	f240 204d 	movw	r0, #589	; 0x24d
 800dee0:	f7fd fb68 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dee4:	79fb      	ldrb	r3, [r7, #7]
 800dee6:	021b      	lsls	r3, r3, #8
 800dee8:	b21a      	sxth	r2, r3
 800deea:	79bb      	ldrb	r3, [r7, #6]
 800deec:	b21b      	sxth	r3, r3
 800deee:	4313      	orrs	r3, r2
 800def0:	b21b      	sxth	r3, r3
 800def2:	b29a      	uxth	r2, r3
 800def4:	4b21      	ldr	r3, [pc, #132]	; (800df7c <read_bootloader_registers+0x5f8>)
 800def6:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800def8:	1dfb      	adds	r3, r7, #7
 800defa:	4619      	mov	r1, r3
 800defc:	f240 204e 	movw	r0, #590	; 0x24e
 800df00:	f7fd fb58 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800df04:	1dbb      	adds	r3, r7, #6
 800df06:	4619      	mov	r1, r3
 800df08:	f240 204f 	movw	r0, #591	; 0x24f
 800df0c:	f7fd fb52 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df10:	79fb      	ldrb	r3, [r7, #7]
 800df12:	021b      	lsls	r3, r3, #8
 800df14:	b21a      	sxth	r2, r3
 800df16:	79bb      	ldrb	r3, [r7, #6]
 800df18:	b21b      	sxth	r3, r3
 800df1a:	4313      	orrs	r3, r2
 800df1c:	b21b      	sxth	r3, r3
 800df1e:	b29a      	uxth	r2, r3
 800df20:	4b16      	ldr	r3, [pc, #88]	; (800df7c <read_bootloader_registers+0x5f8>)
 800df22:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800df24:	1dfb      	adds	r3, r7, #7
 800df26:	4619      	mov	r1, r3
 800df28:	f44f 7014 	mov.w	r0, #592	; 0x250
 800df2c:	f7fd fb42 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800df30:	1dbb      	adds	r3, r7, #6
 800df32:	4619      	mov	r1, r3
 800df34:	f240 2051 	movw	r0, #593	; 0x251
 800df38:	f7fd fb3c 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df3c:	79fb      	ldrb	r3, [r7, #7]
 800df3e:	021b      	lsls	r3, r3, #8
 800df40:	b21a      	sxth	r2, r3
 800df42:	79bb      	ldrb	r3, [r7, #6]
 800df44:	b21b      	sxth	r3, r3
 800df46:	4313      	orrs	r3, r2
 800df48:	b21b      	sxth	r3, r3
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	4b0b      	ldr	r3, [pc, #44]	; (800df7c <read_bootloader_registers+0x5f8>)
 800df4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800df52:	1dfb      	adds	r3, r7, #7
 800df54:	4619      	mov	r1, r3
 800df56:	f240 2052 	movw	r0, #594	; 0x252
 800df5a:	f7fd fb2b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800df5e:	1dbb      	adds	r3, r7, #6
 800df60:	4619      	mov	r1, r3
 800df62:	f240 2053 	movw	r0, #595	; 0x253
 800df66:	f7fd fb25 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	021b      	lsls	r3, r3, #8
 800df6e:	b21a      	sxth	r2, r3
 800df70:	79bb      	ldrb	r3, [r7, #6]
 800df72:	b21b      	sxth	r3, r3
 800df74:	4313      	orrs	r3, r2
 800df76:	b21b      	sxth	r3, r3
 800df78:	e002      	b.n	800df80 <read_bootloader_registers+0x5fc>
 800df7a:	bf00      	nop
 800df7c:	20009d5c 	.word	0x20009d5c
 800df80:	b29a      	uxth	r2, r3
 800df82:	4b28      	ldr	r3, [pc, #160]	; (800e024 <read_bootloader_registers+0x6a0>)
 800df84:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800df88:	1dfb      	adds	r3, r7, #7
 800df8a:	4619      	mov	r1, r3
 800df8c:	f44f 7015 	mov.w	r0, #596	; 0x254
 800df90:	f7fd fb10 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800df94:	1dbb      	adds	r3, r7, #6
 800df96:	4619      	mov	r1, r3
 800df98:	f240 2055 	movw	r0, #597	; 0x255
 800df9c:	f7fd fb0a 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	b21a      	sxth	r2, r3
 800dfa6:	79bb      	ldrb	r3, [r7, #6]
 800dfa8:	b21b      	sxth	r3, r3
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	b21b      	sxth	r3, r3
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	4b1c      	ldr	r3, [pc, #112]	; (800e024 <read_bootloader_registers+0x6a0>)
 800dfb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800dfb6:	1dfb      	adds	r3, r7, #7
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f240 2056 	movw	r0, #598	; 0x256
 800dfbe:	f7fd faf9 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800dfc2:	1dbb      	adds	r3, r7, #6
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f240 2057 	movw	r0, #599	; 0x257
 800dfca:	f7fd faf3 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	021b      	lsls	r3, r3, #8
 800dfd2:	b21a      	sxth	r2, r3
 800dfd4:	79bb      	ldrb	r3, [r7, #6]
 800dfd6:	b21b      	sxth	r3, r3
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	b21b      	sxth	r3, r3
 800dfdc:	b29a      	uxth	r2, r3
 800dfde:	4b11      	ldr	r3, [pc, #68]	; (800e024 <read_bootloader_registers+0x6a0>)
 800dfe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800dfe4:	1dfb      	adds	r3, r7, #7
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dfec:	f7fd fae2 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800dff0:	1dbb      	adds	r3, r7, #6
 800dff2:	4619      	mov	r1, r3
 800dff4:	f240 2059 	movw	r0, #601	; 0x259
 800dff8:	f7fd fadc 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	021b      	lsls	r3, r3, #8
 800e000:	b21a      	sxth	r2, r3
 800e002:	79bb      	ldrb	r3, [r7, #6]
 800e004:	b21b      	sxth	r3, r3
 800e006:	4313      	orrs	r3, r2
 800e008:	b21b      	sxth	r3, r3
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	4b05      	ldr	r3, [pc, #20]	; (800e024 <read_bootloader_registers+0x6a0>)
 800e00e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	osMutexRelease(Fm25v02MutexHandle);
 800e012:	4b05      	ldr	r3, [pc, #20]	; (800e028 <read_bootloader_registers+0x6a4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4618      	mov	r0, r3
 800e018:	f7f8 fa70 	bl	80064fc <osMutexRelease>

}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	20009d5c 	.word	0x20009d5c
 800e028:	2000957c 	.word	0x2000957c

0800e02c <read_bootloader_registers_no_rtos>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_bootloader_registers_no_rtos(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800e032:	1dfb      	adds	r3, r7, #7
 800e034:	4619      	mov	r1, r3
 800e036:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e03a:	f7fd fabb 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800e03e:	1dbb      	adds	r3, r7, #6
 800e040:	4619      	mov	r1, r3
 800e042:	f240 2001 	movw	r0, #513	; 0x201
 800e046:	f7fd fab5 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	021b      	lsls	r3, r3, #8
 800e04e:	b21a      	sxth	r2, r3
 800e050:	79bb      	ldrb	r3, [r7, #6]
 800e052:	b21b      	sxth	r3, r3
 800e054:	4313      	orrs	r3, r2
 800e056:	b21b      	sxth	r3, r3
 800e058:	b29a      	uxth	r2, r3
 800e05a:	4bbb      	ldr	r3, [pc, #748]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e05c:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e05e:	1dfb      	adds	r3, r7, #7
 800e060:	4619      	mov	r1, r3
 800e062:	f44f 7001 	mov.w	r0, #516	; 0x204
 800e066:	f7fd faa5 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e06a:	1dbb      	adds	r3, r7, #6
 800e06c:	4619      	mov	r1, r3
 800e06e:	f240 2005 	movw	r0, #517	; 0x205
 800e072:	f7fd fa9f 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	021b      	lsls	r3, r3, #8
 800e07a:	b21a      	sxth	r2, r3
 800e07c:	79bb      	ldrb	r3, [r7, #6]
 800e07e:	b21b      	sxth	r3, r3
 800e080:	4313      	orrs	r3, r2
 800e082:	b21b      	sxth	r3, r3
 800e084:	b29a      	uxth	r2, r3
 800e086:	4bb0      	ldr	r3, [pc, #704]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e088:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e08a:	1dfb      	adds	r3, r7, #7
 800e08c:	4619      	mov	r1, r3
 800e08e:	f240 2006 	movw	r0, #518	; 0x206
 800e092:	f7fd fa8f 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e096:	1dbb      	adds	r3, r7, #6
 800e098:	4619      	mov	r1, r3
 800e09a:	f240 2007 	movw	r0, #519	; 0x207
 800e09e:	f7fd fa89 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	021b      	lsls	r3, r3, #8
 800e0a6:	b21a      	sxth	r2, r3
 800e0a8:	79bb      	ldrb	r3, [r7, #6]
 800e0aa:	b21b      	sxth	r3, r3
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	b21b      	sxth	r3, r3
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	4ba5      	ldr	r3, [pc, #660]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e0b4:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e0b6:	1dfb      	adds	r3, r7, #7
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f44f 7002 	mov.w	r0, #520	; 0x208
 800e0be:	f7fd fa79 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e0c2:	1dbb      	adds	r3, r7, #6
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	f240 2009 	movw	r0, #521	; 0x209
 800e0ca:	f7fd fa73 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	021b      	lsls	r3, r3, #8
 800e0d2:	b21a      	sxth	r2, r3
 800e0d4:	79bb      	ldrb	r3, [r7, #6]
 800e0d6:	b21b      	sxth	r3, r3
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	b21b      	sxth	r3, r3
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	4b9a      	ldr	r3, [pc, #616]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e0e0:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e0e2:	1dfb      	adds	r3, r7, #7
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	f240 200a 	movw	r0, #522	; 0x20a
 800e0ea:	f7fd fa63 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e0ee:	1dbb      	adds	r3, r7, #6
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	f240 200b 	movw	r0, #523	; 0x20b
 800e0f6:	f7fd fa5d 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	b21a      	sxth	r2, r3
 800e100:	79bb      	ldrb	r3, [r7, #6]
 800e102:	b21b      	sxth	r3, r3
 800e104:	4313      	orrs	r3, r2
 800e106:	b21b      	sxth	r3, r3
 800e108:	b29a      	uxth	r2, r3
 800e10a:	4b8f      	ldr	r3, [pc, #572]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e10c:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e10e:	1dfb      	adds	r3, r7, #7
 800e110:	4619      	mov	r1, r3
 800e112:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800e116:	f7fd fa4d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e11a:	1dbb      	adds	r3, r7, #6
 800e11c:	4619      	mov	r1, r3
 800e11e:	f240 200d 	movw	r0, #525	; 0x20d
 800e122:	f7fd fa47 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e126:	79fb      	ldrb	r3, [r7, #7]
 800e128:	021b      	lsls	r3, r3, #8
 800e12a:	b21a      	sxth	r2, r3
 800e12c:	79bb      	ldrb	r3, [r7, #6]
 800e12e:	b21b      	sxth	r3, r3
 800e130:	4313      	orrs	r3, r2
 800e132:	b21b      	sxth	r3, r3
 800e134:	b29a      	uxth	r2, r3
 800e136:	4b84      	ldr	r3, [pc, #528]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e138:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e13a:	1dfb      	adds	r3, r7, #7
 800e13c:	4619      	mov	r1, r3
 800e13e:	f240 200e 	movw	r0, #526	; 0x20e
 800e142:	f7fd fa37 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e146:	1dbb      	adds	r3, r7, #6
 800e148:	4619      	mov	r1, r3
 800e14a:	f240 200f 	movw	r0, #527	; 0x20f
 800e14e:	f7fd fa31 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e152:	79fb      	ldrb	r3, [r7, #7]
 800e154:	021b      	lsls	r3, r3, #8
 800e156:	b21a      	sxth	r2, r3
 800e158:	79bb      	ldrb	r3, [r7, #6]
 800e15a:	b21b      	sxth	r3, r3
 800e15c:	4313      	orrs	r3, r2
 800e15e:	b21b      	sxth	r3, r3
 800e160:	b29a      	uxth	r2, r3
 800e162:	4b79      	ldr	r3, [pc, #484]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e164:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800e166:	1dfb      	adds	r3, r7, #7
 800e168:	4619      	mov	r1, r3
 800e16a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800e16e:	f7fd fa21 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800e172:	1dbb      	adds	r3, r7, #6
 800e174:	4619      	mov	r1, r3
 800e176:	f240 2011 	movw	r0, #529	; 0x211
 800e17a:	f7fd fa1b 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	b21a      	sxth	r2, r3
 800e184:	79bb      	ldrb	r3, [r7, #6]
 800e186:	b21b      	sxth	r3, r3
 800e188:	4313      	orrs	r3, r2
 800e18a:	b21b      	sxth	r3, r3
 800e18c:	b29a      	uxth	r2, r3
 800e18e:	4b6e      	ldr	r3, [pc, #440]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e190:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800e192:	1dfb      	adds	r3, r7, #7
 800e194:	4619      	mov	r1, r3
 800e196:	f240 2012 	movw	r0, #530	; 0x212
 800e19a:	f7fd fa0b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800e19e:	1dbb      	adds	r3, r7, #6
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	f240 2013 	movw	r0, #531	; 0x213
 800e1a6:	f7fd fa05 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	021b      	lsls	r3, r3, #8
 800e1ae:	b21a      	sxth	r2, r3
 800e1b0:	79bb      	ldrb	r3, [r7, #6]
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	b21b      	sxth	r3, r3
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	4b63      	ldr	r3, [pc, #396]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e1bc:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800e1be:	1dfb      	adds	r3, r7, #7
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	f44f 7005 	mov.w	r0, #532	; 0x214
 800e1c6:	f7fd f9f5 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800e1ca:	1dbb      	adds	r3, r7, #6
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	f240 2015 	movw	r0, #533	; 0x215
 800e1d2:	f7fd f9ef 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	021b      	lsls	r3, r3, #8
 800e1da:	b21a      	sxth	r2, r3
 800e1dc:	79bb      	ldrb	r3, [r7, #6]
 800e1de:	b21b      	sxth	r3, r3
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	b21b      	sxth	r3, r3
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	4b58      	ldr	r3, [pc, #352]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e1e8:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800e1ea:	1dfb      	adds	r3, r7, #7
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f240 2016 	movw	r0, #534	; 0x216
 800e1f2:	f7fd f9df 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800e1f6:	1dbb      	adds	r3, r7, #6
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	f240 2017 	movw	r0, #535	; 0x217
 800e1fe:	f7fd f9d9 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e202:	79fb      	ldrb	r3, [r7, #7]
 800e204:	021b      	lsls	r3, r3, #8
 800e206:	b21a      	sxth	r2, r3
 800e208:	79bb      	ldrb	r3, [r7, #6]
 800e20a:	b21b      	sxth	r3, r3
 800e20c:	4313      	orrs	r3, r2
 800e20e:	b21b      	sxth	r3, r3
 800e210:	b29a      	uxth	r2, r3
 800e212:	4b4d      	ldr	r3, [pc, #308]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e214:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800e216:	1dfb      	adds	r3, r7, #7
 800e218:	4619      	mov	r1, r3
 800e21a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e21e:	f7fd f9c9 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800e222:	1dbb      	adds	r3, r7, #6
 800e224:	4619      	mov	r1, r3
 800e226:	f240 2019 	movw	r0, #537	; 0x219
 800e22a:	f7fd f9c3 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e22e:	79fb      	ldrb	r3, [r7, #7]
 800e230:	021b      	lsls	r3, r3, #8
 800e232:	b21a      	sxth	r2, r3
 800e234:	79bb      	ldrb	r3, [r7, #6]
 800e236:	b21b      	sxth	r3, r3
 800e238:	4313      	orrs	r3, r2
 800e23a:	b21b      	sxth	r3, r3
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	4b42      	ldr	r3, [pc, #264]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e240:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800e242:	1dfb      	adds	r3, r7, #7
 800e244:	4619      	mov	r1, r3
 800e246:	f240 201a 	movw	r0, #538	; 0x21a
 800e24a:	f7fd f9b3 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800e24e:	1dbb      	adds	r3, r7, #6
 800e250:	4619      	mov	r1, r3
 800e252:	f240 201b 	movw	r0, #539	; 0x21b
 800e256:	f7fd f9ad 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e25a:	79fb      	ldrb	r3, [r7, #7]
 800e25c:	021b      	lsls	r3, r3, #8
 800e25e:	b21a      	sxth	r2, r3
 800e260:	79bb      	ldrb	r3, [r7, #6]
 800e262:	b21b      	sxth	r3, r3
 800e264:	4313      	orrs	r3, r2
 800e266:	b21b      	sxth	r3, r3
 800e268:	b29a      	uxth	r2, r3
 800e26a:	4b37      	ldr	r3, [pc, #220]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e26c:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800e26e:	1dfb      	adds	r3, r7, #7
 800e270:	4619      	mov	r1, r3
 800e272:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e276:	f7fd f99d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800e27a:	1dbb      	adds	r3, r7, #6
 800e27c:	4619      	mov	r1, r3
 800e27e:	f240 201d 	movw	r0, #541	; 0x21d
 800e282:	f7fd f997 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	021b      	lsls	r3, r3, #8
 800e28a:	b21a      	sxth	r2, r3
 800e28c:	79bb      	ldrb	r3, [r7, #6]
 800e28e:	b21b      	sxth	r3, r3
 800e290:	4313      	orrs	r3, r2
 800e292:	b21b      	sxth	r3, r3
 800e294:	b29a      	uxth	r2, r3
 800e296:	4b2c      	ldr	r3, [pc, #176]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e298:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800e29a:	1dfb      	adds	r3, r7, #7
 800e29c:	4619      	mov	r1, r3
 800e29e:	f240 201e 	movw	r0, #542	; 0x21e
 800e2a2:	f7fd f987 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800e2a6:	1dbb      	adds	r3, r7, #6
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	f240 201f 	movw	r0, #543	; 0x21f
 800e2ae:	f7fd f981 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2b2:	79fb      	ldrb	r3, [r7, #7]
 800e2b4:	021b      	lsls	r3, r3, #8
 800e2b6:	b21a      	sxth	r2, r3
 800e2b8:	79bb      	ldrb	r3, [r7, #6]
 800e2ba:	b21b      	sxth	r3, r3
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	b21b      	sxth	r3, r3
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	4b21      	ldr	r3, [pc, #132]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e2c4:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800e2c6:	1dfb      	adds	r3, r7, #7
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	f44f 7008 	mov.w	r0, #544	; 0x220
 800e2ce:	f7fd f971 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800e2d2:	1dbb      	adds	r3, r7, #6
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	f240 2021 	movw	r0, #545	; 0x221
 800e2da:	f7fd f96b 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	021b      	lsls	r3, r3, #8
 800e2e2:	b21a      	sxth	r2, r3
 800e2e4:	79bb      	ldrb	r3, [r7, #6]
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	b21b      	sxth	r3, r3
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	4b16      	ldr	r3, [pc, #88]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e2f0:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800e2f2:	1dfb      	adds	r3, r7, #7
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f240 2022 	movw	r0, #546	; 0x222
 800e2fa:	f7fd f95b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800e2fe:	1dbb      	adds	r3, r7, #6
 800e300:	4619      	mov	r1, r3
 800e302:	f240 2023 	movw	r0, #547	; 0x223
 800e306:	f7fd f955 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e30a:	79fb      	ldrb	r3, [r7, #7]
 800e30c:	021b      	lsls	r3, r3, #8
 800e30e:	b21a      	sxth	r2, r3
 800e310:	79bb      	ldrb	r3, [r7, #6]
 800e312:	b21b      	sxth	r3, r3
 800e314:	4313      	orrs	r3, r2
 800e316:	b21b      	sxth	r3, r3
 800e318:	b29a      	uxth	r2, r3
 800e31a:	4b0b      	ldr	r3, [pc, #44]	; (800e348 <read_bootloader_registers_no_rtos+0x31c>)
 800e31c:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e31e:	1dfb      	adds	r3, r7, #7
 800e320:	4619      	mov	r1, r3
 800e322:	f44f 7009 	mov.w	r0, #548	; 0x224
 800e326:	f7fd f945 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e32a:	1dbb      	adds	r3, r7, #6
 800e32c:	4619      	mov	r1, r3
 800e32e:	f240 2025 	movw	r0, #549	; 0x225
 800e332:	f7fd f93f 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e336:	79fb      	ldrb	r3, [r7, #7]
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	b21a      	sxth	r2, r3
 800e33c:	79bb      	ldrb	r3, [r7, #6]
 800e33e:	b21b      	sxth	r3, r3
 800e340:	4313      	orrs	r3, r2
 800e342:	b21b      	sxth	r3, r3
 800e344:	e002      	b.n	800e34c <read_bootloader_registers_no_rtos+0x320>
 800e346:	bf00      	nop
 800e348:	20009d5c 	.word	0x20009d5c
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	4bbc      	ldr	r3, [pc, #752]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e350:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e352:	1dfb      	adds	r3, r7, #7
 800e354:	4619      	mov	r1, r3
 800e356:	f240 2026 	movw	r0, #550	; 0x226
 800e35a:	f7fd f92b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e35e:	1dbb      	adds	r3, r7, #6
 800e360:	4619      	mov	r1, r3
 800e362:	f240 2027 	movw	r0, #551	; 0x227
 800e366:	f7fd f925 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	021b      	lsls	r3, r3, #8
 800e36e:	b21a      	sxth	r2, r3
 800e370:	79bb      	ldrb	r3, [r7, #6]
 800e372:	b21b      	sxth	r3, r3
 800e374:	4313      	orrs	r3, r2
 800e376:	b21b      	sxth	r3, r3
 800e378:	b29a      	uxth	r2, r3
 800e37a:	4bb1      	ldr	r3, [pc, #708]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e37c:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e37e:	1dfb      	adds	r3, r7, #7
 800e380:	4619      	mov	r1, r3
 800e382:	f44f 700a 	mov.w	r0, #552	; 0x228
 800e386:	f7fd f915 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e38a:	1dbb      	adds	r3, r7, #6
 800e38c:	4619      	mov	r1, r3
 800e38e:	f240 2029 	movw	r0, #553	; 0x229
 800e392:	f7fd f90f 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	021b      	lsls	r3, r3, #8
 800e39a:	b21a      	sxth	r2, r3
 800e39c:	79bb      	ldrb	r3, [r7, #6]
 800e39e:	b21b      	sxth	r3, r3
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	b21b      	sxth	r3, r3
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	4ba6      	ldr	r3, [pc, #664]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e3a8:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e3aa:	1dfb      	adds	r3, r7, #7
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	f240 202a 	movw	r0, #554	; 0x22a
 800e3b2:	f7fd f8ff 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e3b6:	1dbb      	adds	r3, r7, #6
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	f240 202b 	movw	r0, #555	; 0x22b
 800e3be:	f7fd f8f9 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	021b      	lsls	r3, r3, #8
 800e3c6:	b21a      	sxth	r2, r3
 800e3c8:	79bb      	ldrb	r3, [r7, #6]
 800e3ca:	b21b      	sxth	r3, r3
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	b21b      	sxth	r3, r3
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	4b9b      	ldr	r3, [pc, #620]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e3d4:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e3d6:	1dfb      	adds	r3, r7, #7
 800e3d8:	4619      	mov	r1, r3
 800e3da:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e3de:	f7fd f8e9 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e3e2:	1dbb      	adds	r3, r7, #6
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	f240 202d 	movw	r0, #557	; 0x22d
 800e3ea:	f7fd f8e3 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	021b      	lsls	r3, r3, #8
 800e3f2:	b21a      	sxth	r2, r3
 800e3f4:	79bb      	ldrb	r3, [r7, #6]
 800e3f6:	b21b      	sxth	r3, r3
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	b21b      	sxth	r3, r3
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	4b90      	ldr	r3, [pc, #576]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e400:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e402:	1dfb      	adds	r3, r7, #7
 800e404:	4619      	mov	r1, r3
 800e406:	f240 202e 	movw	r0, #558	; 0x22e
 800e40a:	f7fd f8d3 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e40e:	1dbb      	adds	r3, r7, #6
 800e410:	4619      	mov	r1, r3
 800e412:	f240 202f 	movw	r0, #559	; 0x22f
 800e416:	f7fd f8cd 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	021b      	lsls	r3, r3, #8
 800e41e:	b21a      	sxth	r2, r3
 800e420:	79bb      	ldrb	r3, [r7, #6]
 800e422:	b21b      	sxth	r3, r3
 800e424:	4313      	orrs	r3, r2
 800e426:	b21b      	sxth	r3, r3
 800e428:	b29a      	uxth	r2, r3
 800e42a:	4b85      	ldr	r3, [pc, #532]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e42c:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800e42e:	1dfb      	adds	r3, r7, #7
 800e430:	4619      	mov	r1, r3
 800e432:	f240 203e 	movw	r0, #574	; 0x23e
 800e436:	f7fd f8bd 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800e43a:	1dbb      	adds	r3, r7, #6
 800e43c:	4619      	mov	r1, r3
 800e43e:	f240 203f 	movw	r0, #575	; 0x23f
 800e442:	f7fd f8b7 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	021b      	lsls	r3, r3, #8
 800e44a:	b21a      	sxth	r2, r3
 800e44c:	79bb      	ldrb	r3, [r7, #6]
 800e44e:	b21b      	sxth	r3, r3
 800e450:	4313      	orrs	r3, r2
 800e452:	b21b      	sxth	r3, r3
 800e454:	b29a      	uxth	r2, r3
 800e456:	4b7a      	ldr	r3, [pc, #488]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e458:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800e45a:	1dfb      	adds	r3, r7, #7
 800e45c:	4619      	mov	r1, r3
 800e45e:	f44f 7010 	mov.w	r0, #576	; 0x240
 800e462:	f7fd f8a7 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800e466:	1dbb      	adds	r3, r7, #6
 800e468:	4619      	mov	r1, r3
 800e46a:	f240 2041 	movw	r0, #577	; 0x241
 800e46e:	f7fd f8a1 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	021b      	lsls	r3, r3, #8
 800e476:	b21a      	sxth	r2, r3
 800e478:	79bb      	ldrb	r3, [r7, #6]
 800e47a:	b21b      	sxth	r3, r3
 800e47c:	4313      	orrs	r3, r2
 800e47e:	b21b      	sxth	r3, r3
 800e480:	b29a      	uxth	r2, r3
 800e482:	4b6f      	ldr	r3, [pc, #444]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e484:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800e486:	1dfb      	adds	r3, r7, #7
 800e488:	4619      	mov	r1, r3
 800e48a:	f240 2042 	movw	r0, #578	; 0x242
 800e48e:	f7fd f891 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800e492:	1dbb      	adds	r3, r7, #6
 800e494:	4619      	mov	r1, r3
 800e496:	f240 2043 	movw	r0, #579	; 0x243
 800e49a:	f7fd f88b 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e49e:	79fb      	ldrb	r3, [r7, #7]
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	b21a      	sxth	r2, r3
 800e4a4:	79bb      	ldrb	r3, [r7, #6]
 800e4a6:	b21b      	sxth	r3, r3
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	b21b      	sxth	r3, r3
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	4b64      	ldr	r3, [pc, #400]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e4b0:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800e4b2:	1dfb      	adds	r3, r7, #7
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	f44f 7011 	mov.w	r0, #580	; 0x244
 800e4ba:	f7fd f87b 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800e4be:	1dbb      	adds	r3, r7, #6
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	f240 2045 	movw	r0, #581	; 0x245
 800e4c6:	f7fd f875 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	021b      	lsls	r3, r3, #8
 800e4ce:	b21a      	sxth	r2, r3
 800e4d0:	79bb      	ldrb	r3, [r7, #6]
 800e4d2:	b21b      	sxth	r3, r3
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	b21b      	sxth	r3, r3
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	4b59      	ldr	r3, [pc, #356]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e4dc:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800e4de:	1dfb      	adds	r3, r7, #7
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f240 2046 	movw	r0, #582	; 0x246
 800e4e6:	f7fd f865 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800e4ea:	1dbb      	adds	r3, r7, #6
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f240 2047 	movw	r0, #583	; 0x247
 800e4f2:	f7fd f85f 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	021b      	lsls	r3, r3, #8
 800e4fa:	b21a      	sxth	r2, r3
 800e4fc:	79bb      	ldrb	r3, [r7, #6]
 800e4fe:	b21b      	sxth	r3, r3
 800e500:	4313      	orrs	r3, r2
 800e502:	b21b      	sxth	r3, r3
 800e504:	b29a      	uxth	r2, r3
 800e506:	4b4e      	ldr	r3, [pc, #312]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e508:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800e50a:	1dfb      	adds	r3, r7, #7
 800e50c:	4619      	mov	r1, r3
 800e50e:	f44f 7012 	mov.w	r0, #584	; 0x248
 800e512:	f7fd f84f 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800e516:	1dbb      	adds	r3, r7, #6
 800e518:	4619      	mov	r1, r3
 800e51a:	f240 2049 	movw	r0, #585	; 0x249
 800e51e:	f7fd f849 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e522:	79fb      	ldrb	r3, [r7, #7]
 800e524:	021b      	lsls	r3, r3, #8
 800e526:	b21a      	sxth	r2, r3
 800e528:	79bb      	ldrb	r3, [r7, #6]
 800e52a:	b21b      	sxth	r3, r3
 800e52c:	4313      	orrs	r3, r2
 800e52e:	b21b      	sxth	r3, r3
 800e530:	b29a      	uxth	r2, r3
 800e532:	4b43      	ldr	r3, [pc, #268]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e534:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800e536:	1dfb      	adds	r3, r7, #7
 800e538:	4619      	mov	r1, r3
 800e53a:	f240 204a 	movw	r0, #586	; 0x24a
 800e53e:	f7fd f839 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800e542:	1dbb      	adds	r3, r7, #6
 800e544:	4619      	mov	r1, r3
 800e546:	f240 204b 	movw	r0, #587	; 0x24b
 800e54a:	f7fd f833 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e54e:	79fb      	ldrb	r3, [r7, #7]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	b21a      	sxth	r2, r3
 800e554:	79bb      	ldrb	r3, [r7, #6]
 800e556:	b21b      	sxth	r3, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	4b38      	ldr	r3, [pc, #224]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e560:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800e562:	1dfb      	adds	r3, r7, #7
 800e564:	4619      	mov	r1, r3
 800e566:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800e56a:	f7fd f823 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e56e:	1dbb      	adds	r3, r7, #6
 800e570:	4619      	mov	r1, r3
 800e572:	f240 204d 	movw	r0, #589	; 0x24d
 800e576:	f7fd f81d 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e57a:	79fb      	ldrb	r3, [r7, #7]
 800e57c:	021b      	lsls	r3, r3, #8
 800e57e:	b21a      	sxth	r2, r3
 800e580:	79bb      	ldrb	r3, [r7, #6]
 800e582:	b21b      	sxth	r3, r3
 800e584:	4313      	orrs	r3, r2
 800e586:	b21b      	sxth	r3, r3
 800e588:	b29a      	uxth	r2, r3
 800e58a:	4b2d      	ldr	r3, [pc, #180]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e58c:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800e58e:	1dfb      	adds	r3, r7, #7
 800e590:	4619      	mov	r1, r3
 800e592:	f240 204e 	movw	r0, #590	; 0x24e
 800e596:	f7fd f80d 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800e59a:	1dbb      	adds	r3, r7, #6
 800e59c:	4619      	mov	r1, r3
 800e59e:	f240 204f 	movw	r0, #591	; 0x24f
 800e5a2:	f7fd f807 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5a6:	79fb      	ldrb	r3, [r7, #7]
 800e5a8:	021b      	lsls	r3, r3, #8
 800e5aa:	b21a      	sxth	r2, r3
 800e5ac:	79bb      	ldrb	r3, [r7, #6]
 800e5ae:	b21b      	sxth	r3, r3
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	b21b      	sxth	r3, r3
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	4b22      	ldr	r3, [pc, #136]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e5b8:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800e5ba:	1dfb      	adds	r3, r7, #7
 800e5bc:	4619      	mov	r1, r3
 800e5be:	f44f 7014 	mov.w	r0, #592	; 0x250
 800e5c2:	f7fc fff7 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800e5c6:	1dbb      	adds	r3, r7, #6
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	f240 2051 	movw	r0, #593	; 0x251
 800e5ce:	f7fc fff1 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	021b      	lsls	r3, r3, #8
 800e5d6:	b21a      	sxth	r2, r3
 800e5d8:	79bb      	ldrb	r3, [r7, #6]
 800e5da:	b21b      	sxth	r3, r3
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	b21b      	sxth	r3, r3
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	4b17      	ldr	r3, [pc, #92]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e5e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800e5e8:	1dfb      	adds	r3, r7, #7
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	f240 2052 	movw	r0, #594	; 0x252
 800e5f0:	f7fc ffe0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800e5f4:	1dbb      	adds	r3, r7, #6
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	f240 2053 	movw	r0, #595	; 0x253
 800e5fc:	f7fc ffda 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	021b      	lsls	r3, r3, #8
 800e604:	b21a      	sxth	r2, r3
 800e606:	79bb      	ldrb	r3, [r7, #6]
 800e608:	b21b      	sxth	r3, r3
 800e60a:	4313      	orrs	r3, r2
 800e60c:	b21b      	sxth	r3, r3
 800e60e:	b29a      	uxth	r2, r3
 800e610:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <read_bootloader_registers_no_rtos+0x614>)
 800e612:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800e616:	1dfb      	adds	r3, r7, #7
 800e618:	4619      	mov	r1, r3
 800e61a:	f44f 7015 	mov.w	r0, #596	; 0x254
 800e61e:	f7fc ffc9 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800e622:	1dbb      	adds	r3, r7, #6
 800e624:	4619      	mov	r1, r3
 800e626:	f240 2055 	movw	r0, #597	; 0x255
 800e62a:	f7fc ffc3 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e62e:	79fb      	ldrb	r3, [r7, #7]
 800e630:	021b      	lsls	r3, r3, #8
 800e632:	b21a      	sxth	r2, r3
 800e634:	79bb      	ldrb	r3, [r7, #6]
 800e636:	b21b      	sxth	r3, r3
 800e638:	4313      	orrs	r3, r2
 800e63a:	b21b      	sxth	r3, r3
 800e63c:	e002      	b.n	800e644 <read_bootloader_registers_no_rtos+0x618>
 800e63e:	bf00      	nop
 800e640:	20009d5c 	.word	0x20009d5c
 800e644:	b29a      	uxth	r2, r3
 800e646:	4b1a      	ldr	r3, [pc, #104]	; (800e6b0 <read_bootloader_registers_no_rtos+0x684>)
 800e648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800e64c:	1dfb      	adds	r3, r7, #7
 800e64e:	4619      	mov	r1, r3
 800e650:	f240 2056 	movw	r0, #598	; 0x256
 800e654:	f7fc ffae 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800e658:	1dbb      	adds	r3, r7, #6
 800e65a:	4619      	mov	r1, r3
 800e65c:	f240 2057 	movw	r0, #599	; 0x257
 800e660:	f7fc ffa8 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	021b      	lsls	r3, r3, #8
 800e668:	b21a      	sxth	r2, r3
 800e66a:	79bb      	ldrb	r3, [r7, #6]
 800e66c:	b21b      	sxth	r3, r3
 800e66e:	4313      	orrs	r3, r2
 800e670:	b21b      	sxth	r3, r3
 800e672:	b29a      	uxth	r2, r3
 800e674:	4b0e      	ldr	r3, [pc, #56]	; (800e6b0 <read_bootloader_registers_no_rtos+0x684>)
 800e676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800e67a:	1dfb      	adds	r3, r7, #7
 800e67c:	4619      	mov	r1, r3
 800e67e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e682:	f7fc ff97 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800e686:	1dbb      	adds	r3, r7, #6
 800e688:	4619      	mov	r1, r3
 800e68a:	f240 2059 	movw	r0, #601	; 0x259
 800e68e:	f7fc ff91 	bl	800b5b4 <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	021b      	lsls	r3, r3, #8
 800e696:	b21a      	sxth	r2, r3
 800e698:	79bb      	ldrb	r3, [r7, #6]
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	4313      	orrs	r3, r2
 800e69e:	b21b      	sxth	r3, r3
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	4b03      	ldr	r3, [pc, #12]	; (800e6b0 <read_bootloader_registers_no_rtos+0x684>)
 800e6a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	20009d5c 	.word	0x20009d5c

0800e6b4 <read_change_boot_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_change_boot_registers(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG, &status_reg_temp_h);
 800e6ba:	1dfb      	adds	r3, r7, #7
 800e6bc:	4619      	mov	r1, r3
 800e6be:	2000      	movs	r0, #0
 800e6c0:	f7fc ff78 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG+1, &status_reg_temp_l);
 800e6c4:	1dbb      	adds	r3, r7, #6
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	f7fc ff73 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_start_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	021b      	lsls	r3, r3, #8
 800e6d2:	b21a      	sxth	r2, r3
 800e6d4:	79bb      	ldrb	r3, [r7, #6]
 800e6d6:	b21b      	sxth	r3, r3
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	b21b      	sxth	r3, r3
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	4b99      	ldr	r3, [pc, #612]	; (800e944 <read_change_boot_registers+0x290>)
 800e6e0:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG, &status_reg_temp_h);
 800e6e2:	1dfb      	adds	r3, r7, #7
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	2002      	movs	r0, #2
 800e6e8:	f7fc ff64 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG+1, &status_reg_temp_l);
 800e6ec:	1dbb      	adds	r3, r7, #6
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	2003      	movs	r0, #3
 800e6f2:	f7fc ff5f 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_start_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6f6:	79fb      	ldrb	r3, [r7, #7]
 800e6f8:	021b      	lsls	r3, r3, #8
 800e6fa:	b21a      	sxth	r2, r3
 800e6fc:	79bb      	ldrb	r3, [r7, #6]
 800e6fe:	b21b      	sxth	r3, r3
 800e700:	4313      	orrs	r3, r2
 800e702:	b21b      	sxth	r3, r3
 800e704:	b29a      	uxth	r2, r3
 800e706:	4b8f      	ldr	r3, [pc, #572]	; (800e944 <read_change_boot_registers+0x290>)
 800e708:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG, &status_reg_temp_h);
 800e70a:	1dfb      	adds	r3, r7, #7
 800e70c:	4619      	mov	r1, r3
 800e70e:	2004      	movs	r0, #4
 800e710:	f7fc ff50 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG+1, &status_reg_temp_l);
 800e714:	1dbb      	adds	r3, r7, #6
 800e716:	4619      	mov	r1, r3
 800e718:	2005      	movs	r0, #5
 800e71a:	f7fc ff4b 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_start_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e71e:	79fb      	ldrb	r3, [r7, #7]
 800e720:	021b      	lsls	r3, r3, #8
 800e722:	b21a      	sxth	r2, r3
 800e724:	79bb      	ldrb	r3, [r7, #6]
 800e726:	b21b      	sxth	r3, r3
 800e728:	4313      	orrs	r3, r2
 800e72a:	b21b      	sxth	r3, r3
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	4b85      	ldr	r3, [pc, #532]	; (800e944 <read_change_boot_registers+0x290>)
 800e730:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG, &status_reg_temp_h);
 800e732:	1dfb      	adds	r3, r7, #7
 800e734:	4619      	mov	r1, r3
 800e736:	2006      	movs	r0, #6
 800e738:	f7fc ff3c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG+1, &status_reg_temp_l);
 800e73c:	1dbb      	adds	r3, r7, #6
 800e73e:	4619      	mov	r1, r3
 800e740:	2007      	movs	r0, #7
 800e742:	f7fc ff37 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_start_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	021b      	lsls	r3, r3, #8
 800e74a:	b21a      	sxth	r2, r3
 800e74c:	79bb      	ldrb	r3, [r7, #6]
 800e74e:	b21b      	sxth	r3, r3
 800e750:	4313      	orrs	r3, r2
 800e752:	b21b      	sxth	r3, r3
 800e754:	b29a      	uxth	r2, r3
 800e756:	4b7b      	ldr	r3, [pc, #492]	; (800e944 <read_change_boot_registers+0x290>)
 800e758:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG, &status_reg_temp_h);
 800e75a:	1dfb      	adds	r3, r7, #7
 800e75c:	4619      	mov	r1, r3
 800e75e:	2008      	movs	r0, #8
 800e760:	f7fc ff28 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG+1, &status_reg_temp_l);
 800e764:	1dbb      	adds	r3, r7, #6
 800e766:	4619      	mov	r1, r3
 800e768:	2009      	movs	r0, #9
 800e76a:	f7fc ff23 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_end_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	021b      	lsls	r3, r3, #8
 800e772:	b21a      	sxth	r2, r3
 800e774:	79bb      	ldrb	r3, [r7, #6]
 800e776:	b21b      	sxth	r3, r3
 800e778:	4313      	orrs	r3, r2
 800e77a:	b21b      	sxth	r3, r3
 800e77c:	b29a      	uxth	r2, r3
 800e77e:	4b71      	ldr	r3, [pc, #452]	; (800e944 <read_change_boot_registers+0x290>)
 800e780:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG, &status_reg_temp_h);
 800e782:	1dfb      	adds	r3, r7, #7
 800e784:	4619      	mov	r1, r3
 800e786:	200a      	movs	r0, #10
 800e788:	f7fc ff14 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG+1, &status_reg_temp_l);
 800e78c:	1dbb      	adds	r3, r7, #6
 800e78e:	4619      	mov	r1, r3
 800e790:	200b      	movs	r0, #11
 800e792:	f7fc ff0f 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_end_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	021b      	lsls	r3, r3, #8
 800e79a:	b21a      	sxth	r2, r3
 800e79c:	79bb      	ldrb	r3, [r7, #6]
 800e79e:	b21b      	sxth	r3, r3
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	b21b      	sxth	r3, r3
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	4b67      	ldr	r3, [pc, #412]	; (800e944 <read_change_boot_registers+0x290>)
 800e7a8:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG, &status_reg_temp_h);
 800e7aa:	1dfb      	adds	r3, r7, #7
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	200c      	movs	r0, #12
 800e7b0:	f7fc ff00 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG+1, &status_reg_temp_l);
 800e7b4:	1dbb      	adds	r3, r7, #6
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	200d      	movs	r0, #13
 800e7ba:	f7fc fefb 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_end_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	021b      	lsls	r3, r3, #8
 800e7c2:	b21a      	sxth	r2, r3
 800e7c4:	79bb      	ldrb	r3, [r7, #6]
 800e7c6:	b21b      	sxth	r3, r3
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	4b5d      	ldr	r3, [pc, #372]	; (800e944 <read_change_boot_registers+0x290>)
 800e7d0:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG, &status_reg_temp_h);
 800e7d2:	1dfb      	adds	r3, r7, #7
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	200e      	movs	r0, #14
 800e7d8:	f7fc feec 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG+1, &status_reg_temp_l);
 800e7dc:	1dbb      	adds	r3, r7, #6
 800e7de:	4619      	mov	r1, r3
 800e7e0:	200f      	movs	r0, #15
 800e7e2:	f7fc fee7 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_end_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e7e6:	79fb      	ldrb	r3, [r7, #7]
 800e7e8:	021b      	lsls	r3, r3, #8
 800e7ea:	b21a      	sxth	r2, r3
 800e7ec:	79bb      	ldrb	r3, [r7, #6]
 800e7ee:	b21b      	sxth	r3, r3
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	b21b      	sxth	r3, r3
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	4b53      	ldr	r3, [pc, #332]	; (800e944 <read_change_boot_registers+0x290>)
 800e7f8:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG, &status_reg_temp_h);
 800e7fa:	1dfb      	adds	r3, r7, #7
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	2010      	movs	r0, #16
 800e800:	f7fc fed8 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e804:	1dbb      	adds	r3, r7, #6
 800e806:	4619      	mov	r1, r3
 800e808:	2011      	movs	r0, #17
 800e80a:	f7fc fed3 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e80e:	79fb      	ldrb	r3, [r7, #7]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	b21a      	sxth	r2, r3
 800e814:	79bb      	ldrb	r3, [r7, #6]
 800e816:	b21b      	sxth	r3, r3
 800e818:	4313      	orrs	r3, r2
 800e81a:	b21b      	sxth	r3, r3
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	4b49      	ldr	r3, [pc, #292]	; (800e944 <read_change_boot_registers+0x290>)
 800e820:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG, &status_reg_temp_h);
 800e822:	1dfb      	adds	r3, r7, #7
 800e824:	4619      	mov	r1, r3
 800e826:	2012      	movs	r0, #18
 800e828:	f7fc fec4 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG+1, &status_reg_temp_l);
 800e82c:	1dbb      	adds	r3, r7, #6
 800e82e:	4619      	mov	r1, r3
 800e830:	2013      	movs	r0, #19
 800e832:	f7fc febf 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e836:	79fb      	ldrb	r3, [r7, #7]
 800e838:	021b      	lsls	r3, r3, #8
 800e83a:	b21a      	sxth	r2, r3
 800e83c:	79bb      	ldrb	r3, [r7, #6]
 800e83e:	b21b      	sxth	r3, r3
 800e840:	4313      	orrs	r3, r2
 800e842:	b21b      	sxth	r3, r3
 800e844:	b29a      	uxth	r2, r3
 800e846:	4b3f      	ldr	r3, [pc, #252]	; (800e944 <read_change_boot_registers+0x290>)
 800e848:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e84a:	1dfb      	adds	r3, r7, #7
 800e84c:	4619      	mov	r1, r3
 800e84e:	2014      	movs	r0, #20
 800e850:	f7fc feb0 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e854:	1dbb      	adds	r3, r7, #6
 800e856:	4619      	mov	r1, r3
 800e858:	2015      	movs	r0, #21
 800e85a:	f7fc feab 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	b21a      	sxth	r2, r3
 800e864:	79bb      	ldrb	r3, [r7, #6]
 800e866:	b21b      	sxth	r3, r3
 800e868:	4313      	orrs	r3, r2
 800e86a:	b21b      	sxth	r3, r3
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	4b35      	ldr	r3, [pc, #212]	; (800e944 <read_change_boot_registers+0x290>)
 800e870:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e872:	1dfb      	adds	r3, r7, #7
 800e874:	4619      	mov	r1, r3
 800e876:	2016      	movs	r0, #22
 800e878:	f7fc fe9c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e87c:	1dbb      	adds	r3, r7, #6
 800e87e:	4619      	mov	r1, r3
 800e880:	2017      	movs	r0, #23
 800e882:	f7fc fe97 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	021b      	lsls	r3, r3, #8
 800e88a:	b21a      	sxth	r2, r3
 800e88c:	79bb      	ldrb	r3, [r7, #6]
 800e88e:	b21b      	sxth	r3, r3
 800e890:	4313      	orrs	r3, r2
 800e892:	b21b      	sxth	r3, r3
 800e894:	b29a      	uxth	r2, r3
 800e896:	4b2b      	ldr	r3, [pc, #172]	; (800e944 <read_change_boot_registers+0x290>)
 800e898:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG, &status_reg_temp_h);
 800e89a:	1dfb      	adds	r3, r7, #7
 800e89c:	4619      	mov	r1, r3
 800e89e:	2018      	movs	r0, #24
 800e8a0:	f7fc fe88 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG+1, &status_reg_temp_l);
 800e8a4:	1dbb      	adds	r3, r7, #6
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	2019      	movs	r0, #25
 800e8aa:	f7fc fe83 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	021b      	lsls	r3, r3, #8
 800e8b2:	b21a      	sxth	r2, r3
 800e8b4:	79bb      	ldrb	r3, [r7, #6]
 800e8b6:	b21b      	sxth	r3, r3
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	b21b      	sxth	r3, r3
 800e8bc:	b29a      	uxth	r2, r3
 800e8be:	4b21      	ldr	r3, [pc, #132]	; (800e944 <read_change_boot_registers+0x290>)
 800e8c0:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG, &status_reg_temp_h);
 800e8c2:	1dfb      	adds	r3, r7, #7
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	201a      	movs	r0, #26
 800e8c8:	f7fc fe74 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG+1, &status_reg_temp_l);
 800e8cc:	1dbb      	adds	r3, r7, #6
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	201b      	movs	r0, #27
 800e8d2:	f7fc fe6f 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	021b      	lsls	r3, r3, #8
 800e8da:	b21a      	sxth	r2, r3
 800e8dc:	79bb      	ldrb	r3, [r7, #6]
 800e8de:	b21b      	sxth	r3, r3
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	b21b      	sxth	r3, r3
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	4b17      	ldr	r3, [pc, #92]	; (800e944 <read_change_boot_registers+0x290>)
 800e8e8:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG, &status_reg_temp_h);
 800e8ea:	1dfb      	adds	r3, r7, #7
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	201c      	movs	r0, #28
 800e8f0:	f7fc fe60 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG+1, &status_reg_temp_l);
 800e8f4:	1dbb      	adds	r3, r7, #6
 800e8f6:	4619      	mov	r1, r3
 800e8f8:	201d      	movs	r0, #29
 800e8fa:	f7fc fe5b 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_crc_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e8fe:	79fb      	ldrb	r3, [r7, #7]
 800e900:	021b      	lsls	r3, r3, #8
 800e902:	b21a      	sxth	r2, r3
 800e904:	79bb      	ldrb	r3, [r7, #6]
 800e906:	b21b      	sxth	r3, r3
 800e908:	4313      	orrs	r3, r2
 800e90a:	b21b      	sxth	r3, r3
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	4b0d      	ldr	r3, [pc, #52]	; (800e944 <read_change_boot_registers+0x290>)
 800e910:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*CHANGE_BOOT_WRITE_REG, &status_reg_temp_h);
 800e912:	1dfb      	adds	r3, r7, #7
 800e914:	4619      	mov	r1, r3
 800e916:	201e      	movs	r0, #30
 800e918:	f7fc fe4c 	bl	800b5b4 <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_WRITE_REG+1, &status_reg_temp_l);
 800e91c:	1dbb      	adds	r3, r7, #6
 800e91e:	4619      	mov	r1, r3
 800e920:	201f      	movs	r0, #31
 800e922:	f7fc fe47 	bl	800b5b4 <fm25v02_read>
	change_boot_registers.change_boot_write_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e926:	79fb      	ldrb	r3, [r7, #7]
 800e928:	021b      	lsls	r3, r3, #8
 800e92a:	b21a      	sxth	r2, r3
 800e92c:	79bb      	ldrb	r3, [r7, #6]
 800e92e:	b21b      	sxth	r3, r3
 800e930:	4313      	orrs	r3, r2
 800e932:	b21b      	sxth	r3, r3
 800e934:	b29a      	uxth	r2, r3
 800e936:	4b03      	ldr	r3, [pc, #12]	; (800e944 <read_change_boot_registers+0x290>)
 800e938:	83da      	strh	r2, [r3, #30]

}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	20009da8 	.word	0x20009da8

0800e948 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 800e952:	23ff      	movs	r3, #255	; 0xff
 800e954:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 800e956:	23ff      	movs	r3, #255	; 0xff
 800e958:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 800e95a:	e013      	b.n	800e984 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	607a      	str	r2, [r7, #4]
 800e962:	781a      	ldrb	r2, [r3, #0]
 800e964:	7bbb      	ldrb	r3, [r7, #14]
 800e966:	4053      	eors	r3, r2
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 800e96c:	4a0d      	ldr	r2, [pc, #52]	; (800e9a4 <CRC16+0x5c>)
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	4413      	add	r3, r2
 800e972:	781a      	ldrb	r2, [r3, #0]
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	4053      	eors	r3, r2
 800e978:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 800e97a:	4a0b      	ldr	r2, [pc, #44]	; (800e9a8 <CRC16+0x60>)
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4413      	add	r3, r2
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	1e5a      	subs	r2, r3, #1
 800e988:	603a      	str	r2, [r7, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e6      	bne.n	800e95c <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	021a      	lsls	r2, r3, #8
 800e992:	7bbb      	ldrb	r3, [r7, #14]
 800e994:	4313      	orrs	r3, r2
}
 800e996:	4618      	mov	r0, r3
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	0800f720 	.word	0x0800f720
 800e9a8:	0800f820 	.word	0x0800f820

0800e9ac <__errno>:
 800e9ac:	4b01      	ldr	r3, [pc, #4]	; (800e9b4 <__errno+0x8>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20000020 	.word	0x20000020

0800e9b8 <__libc_init_array>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	4d0d      	ldr	r5, [pc, #52]	; (800e9f0 <__libc_init_array+0x38>)
 800e9bc:	4c0d      	ldr	r4, [pc, #52]	; (800e9f4 <__libc_init_array+0x3c>)
 800e9be:	1b64      	subs	r4, r4, r5
 800e9c0:	10a4      	asrs	r4, r4, #2
 800e9c2:	2600      	movs	r6, #0
 800e9c4:	42a6      	cmp	r6, r4
 800e9c6:	d109      	bne.n	800e9dc <__libc_init_array+0x24>
 800e9c8:	4d0b      	ldr	r5, [pc, #44]	; (800e9f8 <__libc_init_array+0x40>)
 800e9ca:	4c0c      	ldr	r4, [pc, #48]	; (800e9fc <__libc_init_array+0x44>)
 800e9cc:	f000 fcd0 	bl	800f370 <_init>
 800e9d0:	1b64      	subs	r4, r4, r5
 800e9d2:	10a4      	asrs	r4, r4, #2
 800e9d4:	2600      	movs	r6, #0
 800e9d6:	42a6      	cmp	r6, r4
 800e9d8:	d105      	bne.n	800e9e6 <__libc_init_array+0x2e>
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9e0:	4798      	blx	r3
 800e9e2:	3601      	adds	r6, #1
 800e9e4:	e7ee      	b.n	800e9c4 <__libc_init_array+0xc>
 800e9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ea:	4798      	blx	r3
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	e7f2      	b.n	800e9d6 <__libc_init_array+0x1e>
 800e9f0:	0800f9bc 	.word	0x0800f9bc
 800e9f4:	0800f9bc 	.word	0x0800f9bc
 800e9f8:	0800f9bc 	.word	0x0800f9bc
 800e9fc:	0800f9c0 	.word	0x0800f9c0

0800ea00 <__retarget_lock_acquire_recursive>:
 800ea00:	4770      	bx	lr

0800ea02 <__retarget_lock_release_recursive>:
 800ea02:	4770      	bx	lr

0800ea04 <memcpy>:
 800ea04:	440a      	add	r2, r1
 800ea06:	4291      	cmp	r1, r2
 800ea08:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea0c:	d100      	bne.n	800ea10 <memcpy+0xc>
 800ea0e:	4770      	bx	lr
 800ea10:	b510      	push	{r4, lr}
 800ea12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea1a:	4291      	cmp	r1, r2
 800ea1c:	d1f9      	bne.n	800ea12 <memcpy+0xe>
 800ea1e:	bd10      	pop	{r4, pc}

0800ea20 <memset>:
 800ea20:	4402      	add	r2, r0
 800ea22:	4603      	mov	r3, r0
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d100      	bne.n	800ea2a <memset+0xa>
 800ea28:	4770      	bx	lr
 800ea2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ea2e:	e7f9      	b.n	800ea24 <memset+0x4>

0800ea30 <_malloc_r>:
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	1ccd      	adds	r5, r1, #3
 800ea34:	f025 0503 	bic.w	r5, r5, #3
 800ea38:	3508      	adds	r5, #8
 800ea3a:	2d0c      	cmp	r5, #12
 800ea3c:	bf38      	it	cc
 800ea3e:	250c      	movcc	r5, #12
 800ea40:	2d00      	cmp	r5, #0
 800ea42:	4606      	mov	r6, r0
 800ea44:	db01      	blt.n	800ea4a <_malloc_r+0x1a>
 800ea46:	42a9      	cmp	r1, r5
 800ea48:	d903      	bls.n	800ea52 <_malloc_r+0x22>
 800ea4a:	230c      	movs	r3, #12
 800ea4c:	6033      	str	r3, [r6, #0]
 800ea4e:	2000      	movs	r0, #0
 800ea50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea52:	f000 f8f9 	bl	800ec48 <__malloc_lock>
 800ea56:	4921      	ldr	r1, [pc, #132]	; (800eadc <_malloc_r+0xac>)
 800ea58:	680a      	ldr	r2, [r1, #0]
 800ea5a:	4614      	mov	r4, r2
 800ea5c:	b99c      	cbnz	r4, 800ea86 <_malloc_r+0x56>
 800ea5e:	4f20      	ldr	r7, [pc, #128]	; (800eae0 <_malloc_r+0xb0>)
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	b923      	cbnz	r3, 800ea6e <_malloc_r+0x3e>
 800ea64:	4621      	mov	r1, r4
 800ea66:	4630      	mov	r0, r6
 800ea68:	f000 f8a6 	bl	800ebb8 <_sbrk_r>
 800ea6c:	6038      	str	r0, [r7, #0]
 800ea6e:	4629      	mov	r1, r5
 800ea70:	4630      	mov	r0, r6
 800ea72:	f000 f8a1 	bl	800ebb8 <_sbrk_r>
 800ea76:	1c43      	adds	r3, r0, #1
 800ea78:	d123      	bne.n	800eac2 <_malloc_r+0x92>
 800ea7a:	230c      	movs	r3, #12
 800ea7c:	6033      	str	r3, [r6, #0]
 800ea7e:	4630      	mov	r0, r6
 800ea80:	f000 f8e8 	bl	800ec54 <__malloc_unlock>
 800ea84:	e7e3      	b.n	800ea4e <_malloc_r+0x1e>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	1b5b      	subs	r3, r3, r5
 800ea8a:	d417      	bmi.n	800eabc <_malloc_r+0x8c>
 800ea8c:	2b0b      	cmp	r3, #11
 800ea8e:	d903      	bls.n	800ea98 <_malloc_r+0x68>
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	441c      	add	r4, r3
 800ea94:	6025      	str	r5, [r4, #0]
 800ea96:	e004      	b.n	800eaa2 <_malloc_r+0x72>
 800ea98:	6863      	ldr	r3, [r4, #4]
 800ea9a:	42a2      	cmp	r2, r4
 800ea9c:	bf0c      	ite	eq
 800ea9e:	600b      	streq	r3, [r1, #0]
 800eaa0:	6053      	strne	r3, [r2, #4]
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f000 f8d6 	bl	800ec54 <__malloc_unlock>
 800eaa8:	f104 000b 	add.w	r0, r4, #11
 800eaac:	1d23      	adds	r3, r4, #4
 800eaae:	f020 0007 	bic.w	r0, r0, #7
 800eab2:	1ac2      	subs	r2, r0, r3
 800eab4:	d0cc      	beq.n	800ea50 <_malloc_r+0x20>
 800eab6:	1a1b      	subs	r3, r3, r0
 800eab8:	50a3      	str	r3, [r4, r2]
 800eaba:	e7c9      	b.n	800ea50 <_malloc_r+0x20>
 800eabc:	4622      	mov	r2, r4
 800eabe:	6864      	ldr	r4, [r4, #4]
 800eac0:	e7cc      	b.n	800ea5c <_malloc_r+0x2c>
 800eac2:	1cc4      	adds	r4, r0, #3
 800eac4:	f024 0403 	bic.w	r4, r4, #3
 800eac8:	42a0      	cmp	r0, r4
 800eaca:	d0e3      	beq.n	800ea94 <_malloc_r+0x64>
 800eacc:	1a21      	subs	r1, r4, r0
 800eace:	4630      	mov	r0, r6
 800ead0:	f000 f872 	bl	800ebb8 <_sbrk_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d1dd      	bne.n	800ea94 <_malloc_r+0x64>
 800ead8:	e7cf      	b.n	800ea7a <_malloc_r+0x4a>
 800eada:	bf00      	nop
 800eadc:	20007fa0 	.word	0x20007fa0
 800eae0:	20007fa4 	.word	0x20007fa4

0800eae4 <cleanup_glue>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	6809      	ldr	r1, [r1, #0]
 800eaea:	4605      	mov	r5, r0
 800eaec:	b109      	cbz	r1, 800eaf2 <cleanup_glue+0xe>
 800eaee:	f7ff fff9 	bl	800eae4 <cleanup_glue>
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eafa:	f000 b8b1 	b.w	800ec60 <_free_r>
	...

0800eb00 <_reclaim_reent>:
 800eb00:	4b2c      	ldr	r3, [pc, #176]	; (800ebb4 <_reclaim_reent+0xb4>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4283      	cmp	r3, r0
 800eb06:	b570      	push	{r4, r5, r6, lr}
 800eb08:	4604      	mov	r4, r0
 800eb0a:	d051      	beq.n	800ebb0 <_reclaim_reent+0xb0>
 800eb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb0e:	b143      	cbz	r3, 800eb22 <_reclaim_reent+0x22>
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d14a      	bne.n	800ebac <_reclaim_reent+0xac>
 800eb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb18:	6819      	ldr	r1, [r3, #0]
 800eb1a:	b111      	cbz	r1, 800eb22 <_reclaim_reent+0x22>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 f89f 	bl	800ec60 <_free_r>
 800eb22:	6961      	ldr	r1, [r4, #20]
 800eb24:	b111      	cbz	r1, 800eb2c <_reclaim_reent+0x2c>
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 f89a 	bl	800ec60 <_free_r>
 800eb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb2e:	b111      	cbz	r1, 800eb36 <_reclaim_reent+0x36>
 800eb30:	4620      	mov	r0, r4
 800eb32:	f000 f895 	bl	800ec60 <_free_r>
 800eb36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb38:	b111      	cbz	r1, 800eb40 <_reclaim_reent+0x40>
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f000 f890 	bl	800ec60 <_free_r>
 800eb40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb42:	b111      	cbz	r1, 800eb4a <_reclaim_reent+0x4a>
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 f88b 	bl	800ec60 <_free_r>
 800eb4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb4c:	b111      	cbz	r1, 800eb54 <_reclaim_reent+0x54>
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f000 f886 	bl	800ec60 <_free_r>
 800eb54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb56:	b111      	cbz	r1, 800eb5e <_reclaim_reent+0x5e>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f000 f881 	bl	800ec60 <_free_r>
 800eb5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb60:	b111      	cbz	r1, 800eb68 <_reclaim_reent+0x68>
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 f87c 	bl	800ec60 <_free_r>
 800eb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6a:	b111      	cbz	r1, 800eb72 <_reclaim_reent+0x72>
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f000 f877 	bl	800ec60 <_free_r>
 800eb72:	69a3      	ldr	r3, [r4, #24]
 800eb74:	b1e3      	cbz	r3, 800ebb0 <_reclaim_reent+0xb0>
 800eb76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb78:	4620      	mov	r0, r4
 800eb7a:	4798      	blx	r3
 800eb7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb7e:	b1b9      	cbz	r1, 800ebb0 <_reclaim_reent+0xb0>
 800eb80:	4620      	mov	r0, r4
 800eb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb86:	f7ff bfad 	b.w	800eae4 <cleanup_glue>
 800eb8a:	5949      	ldr	r1, [r1, r5]
 800eb8c:	b941      	cbnz	r1, 800eba0 <_reclaim_reent+0xa0>
 800eb8e:	3504      	adds	r5, #4
 800eb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb92:	2d80      	cmp	r5, #128	; 0x80
 800eb94:	68d9      	ldr	r1, [r3, #12]
 800eb96:	d1f8      	bne.n	800eb8a <_reclaim_reent+0x8a>
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 f861 	bl	800ec60 <_free_r>
 800eb9e:	e7ba      	b.n	800eb16 <_reclaim_reent+0x16>
 800eba0:	680e      	ldr	r6, [r1, #0]
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 f85c 	bl	800ec60 <_free_r>
 800eba8:	4631      	mov	r1, r6
 800ebaa:	e7ef      	b.n	800eb8c <_reclaim_reent+0x8c>
 800ebac:	2500      	movs	r5, #0
 800ebae:	e7ef      	b.n	800eb90 <_reclaim_reent+0x90>
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000020 	.word	0x20000020

0800ebb8 <_sbrk_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4d06      	ldr	r5, [pc, #24]	; (800ebd4 <_sbrk_r+0x1c>)
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	602b      	str	r3, [r5, #0]
 800ebc4:	f7f2 fd78 	bl	80016b8 <_sbrk>
 800ebc8:	1c43      	adds	r3, r0, #1
 800ebca:	d102      	bne.n	800ebd2 <_sbrk_r+0x1a>
 800ebcc:	682b      	ldr	r3, [r5, #0]
 800ebce:	b103      	cbz	r3, 800ebd2 <_sbrk_r+0x1a>
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	bd38      	pop	{r3, r4, r5, pc}
 800ebd4:	20009ef4 	.word	0x20009ef4

0800ebd8 <siprintf>:
 800ebd8:	b40e      	push	{r1, r2, r3}
 800ebda:	b500      	push	{lr}
 800ebdc:	b09c      	sub	sp, #112	; 0x70
 800ebde:	ab1d      	add	r3, sp, #116	; 0x74
 800ebe0:	9002      	str	r0, [sp, #8]
 800ebe2:	9006      	str	r0, [sp, #24]
 800ebe4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ebe8:	4809      	ldr	r0, [pc, #36]	; (800ec10 <siprintf+0x38>)
 800ebea:	9107      	str	r1, [sp, #28]
 800ebec:	9104      	str	r1, [sp, #16]
 800ebee:	4909      	ldr	r1, [pc, #36]	; (800ec14 <siprintf+0x3c>)
 800ebf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebf4:	9105      	str	r1, [sp, #20]
 800ebf6:	6800      	ldr	r0, [r0, #0]
 800ebf8:	9301      	str	r3, [sp, #4]
 800ebfa:	a902      	add	r1, sp, #8
 800ebfc:	f000 f8dc 	bl	800edb8 <_svfiprintf_r>
 800ec00:	9b02      	ldr	r3, [sp, #8]
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	b01c      	add	sp, #112	; 0x70
 800ec08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec0c:	b003      	add	sp, #12
 800ec0e:	4770      	bx	lr
 800ec10:	20000020 	.word	0x20000020
 800ec14:	ffff0208 	.word	0xffff0208

0800ec18 <strstr>:
 800ec18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec1a:	780c      	ldrb	r4, [r1, #0]
 800ec1c:	b164      	cbz	r4, 800ec38 <strstr+0x20>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	781a      	ldrb	r2, [r3, #0]
 800ec22:	4618      	mov	r0, r3
 800ec24:	1c5e      	adds	r6, r3, #1
 800ec26:	b90a      	cbnz	r2, 800ec2c <strstr+0x14>
 800ec28:	4610      	mov	r0, r2
 800ec2a:	e005      	b.n	800ec38 <strstr+0x20>
 800ec2c:	4294      	cmp	r4, r2
 800ec2e:	d108      	bne.n	800ec42 <strstr+0x2a>
 800ec30:	460d      	mov	r5, r1
 800ec32:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ec36:	b902      	cbnz	r2, 800ec3a <strstr+0x22>
 800ec38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec3a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ec3e:	4297      	cmp	r7, r2
 800ec40:	d0f7      	beq.n	800ec32 <strstr+0x1a>
 800ec42:	4633      	mov	r3, r6
 800ec44:	e7ec      	b.n	800ec20 <strstr+0x8>
	...

0800ec48 <__malloc_lock>:
 800ec48:	4801      	ldr	r0, [pc, #4]	; (800ec50 <__malloc_lock+0x8>)
 800ec4a:	f7ff bed9 	b.w	800ea00 <__retarget_lock_acquire_recursive>
 800ec4e:	bf00      	nop
 800ec50:	20009eec 	.word	0x20009eec

0800ec54 <__malloc_unlock>:
 800ec54:	4801      	ldr	r0, [pc, #4]	; (800ec5c <__malloc_unlock+0x8>)
 800ec56:	f7ff bed4 	b.w	800ea02 <__retarget_lock_release_recursive>
 800ec5a:	bf00      	nop
 800ec5c:	20009eec 	.word	0x20009eec

0800ec60 <_free_r>:
 800ec60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec62:	2900      	cmp	r1, #0
 800ec64:	d048      	beq.n	800ecf8 <_free_r+0x98>
 800ec66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec6a:	9001      	str	r0, [sp, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec72:	bfb8      	it	lt
 800ec74:	18e4      	addlt	r4, r4, r3
 800ec76:	f7ff ffe7 	bl	800ec48 <__malloc_lock>
 800ec7a:	4a20      	ldr	r2, [pc, #128]	; (800ecfc <_free_r+0x9c>)
 800ec7c:	9801      	ldr	r0, [sp, #4]
 800ec7e:	6813      	ldr	r3, [r2, #0]
 800ec80:	4615      	mov	r5, r2
 800ec82:	b933      	cbnz	r3, 800ec92 <_free_r+0x32>
 800ec84:	6063      	str	r3, [r4, #4]
 800ec86:	6014      	str	r4, [r2, #0]
 800ec88:	b003      	add	sp, #12
 800ec8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec8e:	f7ff bfe1 	b.w	800ec54 <__malloc_unlock>
 800ec92:	42a3      	cmp	r3, r4
 800ec94:	d90b      	bls.n	800ecae <_free_r+0x4e>
 800ec96:	6821      	ldr	r1, [r4, #0]
 800ec98:	1862      	adds	r2, r4, r1
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	bf04      	itt	eq
 800ec9e:	681a      	ldreq	r2, [r3, #0]
 800eca0:	685b      	ldreq	r3, [r3, #4]
 800eca2:	6063      	str	r3, [r4, #4]
 800eca4:	bf04      	itt	eq
 800eca6:	1852      	addeq	r2, r2, r1
 800eca8:	6022      	streq	r2, [r4, #0]
 800ecaa:	602c      	str	r4, [r5, #0]
 800ecac:	e7ec      	b.n	800ec88 <_free_r+0x28>
 800ecae:	461a      	mov	r2, r3
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	b10b      	cbz	r3, 800ecb8 <_free_r+0x58>
 800ecb4:	42a3      	cmp	r3, r4
 800ecb6:	d9fa      	bls.n	800ecae <_free_r+0x4e>
 800ecb8:	6811      	ldr	r1, [r2, #0]
 800ecba:	1855      	adds	r5, r2, r1
 800ecbc:	42a5      	cmp	r5, r4
 800ecbe:	d10b      	bne.n	800ecd8 <_free_r+0x78>
 800ecc0:	6824      	ldr	r4, [r4, #0]
 800ecc2:	4421      	add	r1, r4
 800ecc4:	1854      	adds	r4, r2, r1
 800ecc6:	42a3      	cmp	r3, r4
 800ecc8:	6011      	str	r1, [r2, #0]
 800ecca:	d1dd      	bne.n	800ec88 <_free_r+0x28>
 800eccc:	681c      	ldr	r4, [r3, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	6053      	str	r3, [r2, #4]
 800ecd2:	4421      	add	r1, r4
 800ecd4:	6011      	str	r1, [r2, #0]
 800ecd6:	e7d7      	b.n	800ec88 <_free_r+0x28>
 800ecd8:	d902      	bls.n	800ece0 <_free_r+0x80>
 800ecda:	230c      	movs	r3, #12
 800ecdc:	6003      	str	r3, [r0, #0]
 800ecde:	e7d3      	b.n	800ec88 <_free_r+0x28>
 800ece0:	6825      	ldr	r5, [r4, #0]
 800ece2:	1961      	adds	r1, r4, r5
 800ece4:	428b      	cmp	r3, r1
 800ece6:	bf04      	itt	eq
 800ece8:	6819      	ldreq	r1, [r3, #0]
 800ecea:	685b      	ldreq	r3, [r3, #4]
 800ecec:	6063      	str	r3, [r4, #4]
 800ecee:	bf04      	itt	eq
 800ecf0:	1949      	addeq	r1, r1, r5
 800ecf2:	6021      	streq	r1, [r4, #0]
 800ecf4:	6054      	str	r4, [r2, #4]
 800ecf6:	e7c7      	b.n	800ec88 <_free_r+0x28>
 800ecf8:	b003      	add	sp, #12
 800ecfa:	bd30      	pop	{r4, r5, pc}
 800ecfc:	20007fa0 	.word	0x20007fa0

0800ed00 <__ssputs_r>:
 800ed00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed04:	688e      	ldr	r6, [r1, #8]
 800ed06:	429e      	cmp	r6, r3
 800ed08:	4682      	mov	sl, r0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	4690      	mov	r8, r2
 800ed0e:	461f      	mov	r7, r3
 800ed10:	d838      	bhi.n	800ed84 <__ssputs_r+0x84>
 800ed12:	898a      	ldrh	r2, [r1, #12]
 800ed14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed18:	d032      	beq.n	800ed80 <__ssputs_r+0x80>
 800ed1a:	6825      	ldr	r5, [r4, #0]
 800ed1c:	6909      	ldr	r1, [r1, #16]
 800ed1e:	eba5 0901 	sub.w	r9, r5, r1
 800ed22:	6965      	ldr	r5, [r4, #20]
 800ed24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed2c:	3301      	adds	r3, #1
 800ed2e:	444b      	add	r3, r9
 800ed30:	106d      	asrs	r5, r5, #1
 800ed32:	429d      	cmp	r5, r3
 800ed34:	bf38      	it	cc
 800ed36:	461d      	movcc	r5, r3
 800ed38:	0553      	lsls	r3, r2, #21
 800ed3a:	d531      	bpl.n	800eda0 <__ssputs_r+0xa0>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	f7ff fe77 	bl	800ea30 <_malloc_r>
 800ed42:	4606      	mov	r6, r0
 800ed44:	b950      	cbnz	r0, 800ed5c <__ssputs_r+0x5c>
 800ed46:	230c      	movs	r3, #12
 800ed48:	f8ca 3000 	str.w	r3, [sl]
 800ed4c:	89a3      	ldrh	r3, [r4, #12]
 800ed4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	f04f 30ff 	mov.w	r0, #4294967295
 800ed58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5c:	6921      	ldr	r1, [r4, #16]
 800ed5e:	464a      	mov	r2, r9
 800ed60:	f7ff fe50 	bl	800ea04 <memcpy>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6e:	81a3      	strh	r3, [r4, #12]
 800ed70:	6126      	str	r6, [r4, #16]
 800ed72:	6165      	str	r5, [r4, #20]
 800ed74:	444e      	add	r6, r9
 800ed76:	eba5 0509 	sub.w	r5, r5, r9
 800ed7a:	6026      	str	r6, [r4, #0]
 800ed7c:	60a5      	str	r5, [r4, #8]
 800ed7e:	463e      	mov	r6, r7
 800ed80:	42be      	cmp	r6, r7
 800ed82:	d900      	bls.n	800ed86 <__ssputs_r+0x86>
 800ed84:	463e      	mov	r6, r7
 800ed86:	4632      	mov	r2, r6
 800ed88:	6820      	ldr	r0, [r4, #0]
 800ed8a:	4641      	mov	r1, r8
 800ed8c:	f000 faa8 	bl	800f2e0 <memmove>
 800ed90:	68a3      	ldr	r3, [r4, #8]
 800ed92:	6822      	ldr	r2, [r4, #0]
 800ed94:	1b9b      	subs	r3, r3, r6
 800ed96:	4432      	add	r2, r6
 800ed98:	60a3      	str	r3, [r4, #8]
 800ed9a:	6022      	str	r2, [r4, #0]
 800ed9c:	2000      	movs	r0, #0
 800ed9e:	e7db      	b.n	800ed58 <__ssputs_r+0x58>
 800eda0:	462a      	mov	r2, r5
 800eda2:	f000 fab7 	bl	800f314 <_realloc_r>
 800eda6:	4606      	mov	r6, r0
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1e1      	bne.n	800ed70 <__ssputs_r+0x70>
 800edac:	6921      	ldr	r1, [r4, #16]
 800edae:	4650      	mov	r0, sl
 800edb0:	f7ff ff56 	bl	800ec60 <_free_r>
 800edb4:	e7c7      	b.n	800ed46 <__ssputs_r+0x46>
	...

0800edb8 <_svfiprintf_r>:
 800edb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edbc:	4698      	mov	r8, r3
 800edbe:	898b      	ldrh	r3, [r1, #12]
 800edc0:	061b      	lsls	r3, r3, #24
 800edc2:	b09d      	sub	sp, #116	; 0x74
 800edc4:	4607      	mov	r7, r0
 800edc6:	460d      	mov	r5, r1
 800edc8:	4614      	mov	r4, r2
 800edca:	d50e      	bpl.n	800edea <_svfiprintf_r+0x32>
 800edcc:	690b      	ldr	r3, [r1, #16]
 800edce:	b963      	cbnz	r3, 800edea <_svfiprintf_r+0x32>
 800edd0:	2140      	movs	r1, #64	; 0x40
 800edd2:	f7ff fe2d 	bl	800ea30 <_malloc_r>
 800edd6:	6028      	str	r0, [r5, #0]
 800edd8:	6128      	str	r0, [r5, #16]
 800edda:	b920      	cbnz	r0, 800ede6 <_svfiprintf_r+0x2e>
 800eddc:	230c      	movs	r3, #12
 800edde:	603b      	str	r3, [r7, #0]
 800ede0:	f04f 30ff 	mov.w	r0, #4294967295
 800ede4:	e0d1      	b.n	800ef8a <_svfiprintf_r+0x1d2>
 800ede6:	2340      	movs	r3, #64	; 0x40
 800ede8:	616b      	str	r3, [r5, #20]
 800edea:	2300      	movs	r3, #0
 800edec:	9309      	str	r3, [sp, #36]	; 0x24
 800edee:	2320      	movs	r3, #32
 800edf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800edf8:	2330      	movs	r3, #48	; 0x30
 800edfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800efa4 <_svfiprintf_r+0x1ec>
 800edfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee02:	f04f 0901 	mov.w	r9, #1
 800ee06:	4623      	mov	r3, r4
 800ee08:	469a      	mov	sl, r3
 800ee0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee0e:	b10a      	cbz	r2, 800ee14 <_svfiprintf_r+0x5c>
 800ee10:	2a25      	cmp	r2, #37	; 0x25
 800ee12:	d1f9      	bne.n	800ee08 <_svfiprintf_r+0x50>
 800ee14:	ebba 0b04 	subs.w	fp, sl, r4
 800ee18:	d00b      	beq.n	800ee32 <_svfiprintf_r+0x7a>
 800ee1a:	465b      	mov	r3, fp
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	4638      	mov	r0, r7
 800ee22:	f7ff ff6d 	bl	800ed00 <__ssputs_r>
 800ee26:	3001      	adds	r0, #1
 800ee28:	f000 80aa 	beq.w	800ef80 <_svfiprintf_r+0x1c8>
 800ee2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee2e:	445a      	add	r2, fp
 800ee30:	9209      	str	r2, [sp, #36]	; 0x24
 800ee32:	f89a 3000 	ldrb.w	r3, [sl]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f000 80a2 	beq.w	800ef80 <_svfiprintf_r+0x1c8>
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee46:	f10a 0a01 	add.w	sl, sl, #1
 800ee4a:	9304      	str	r3, [sp, #16]
 800ee4c:	9307      	str	r3, [sp, #28]
 800ee4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee52:	931a      	str	r3, [sp, #104]	; 0x68
 800ee54:	4654      	mov	r4, sl
 800ee56:	2205      	movs	r2, #5
 800ee58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5c:	4851      	ldr	r0, [pc, #324]	; (800efa4 <_svfiprintf_r+0x1ec>)
 800ee5e:	f7f1 f9bf 	bl	80001e0 <memchr>
 800ee62:	9a04      	ldr	r2, [sp, #16]
 800ee64:	b9d8      	cbnz	r0, 800ee9e <_svfiprintf_r+0xe6>
 800ee66:	06d0      	lsls	r0, r2, #27
 800ee68:	bf44      	itt	mi
 800ee6a:	2320      	movmi	r3, #32
 800ee6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee70:	0711      	lsls	r1, r2, #28
 800ee72:	bf44      	itt	mi
 800ee74:	232b      	movmi	r3, #43	; 0x2b
 800ee76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee7a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee7e:	2b2a      	cmp	r3, #42	; 0x2a
 800ee80:	d015      	beq.n	800eeae <_svfiprintf_r+0xf6>
 800ee82:	9a07      	ldr	r2, [sp, #28]
 800ee84:	4654      	mov	r4, sl
 800ee86:	2000      	movs	r0, #0
 800ee88:	f04f 0c0a 	mov.w	ip, #10
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee92:	3b30      	subs	r3, #48	; 0x30
 800ee94:	2b09      	cmp	r3, #9
 800ee96:	d94e      	bls.n	800ef36 <_svfiprintf_r+0x17e>
 800ee98:	b1b0      	cbz	r0, 800eec8 <_svfiprintf_r+0x110>
 800ee9a:	9207      	str	r2, [sp, #28]
 800ee9c:	e014      	b.n	800eec8 <_svfiprintf_r+0x110>
 800ee9e:	eba0 0308 	sub.w	r3, r0, r8
 800eea2:	fa09 f303 	lsl.w	r3, r9, r3
 800eea6:	4313      	orrs	r3, r2
 800eea8:	9304      	str	r3, [sp, #16]
 800eeaa:	46a2      	mov	sl, r4
 800eeac:	e7d2      	b.n	800ee54 <_svfiprintf_r+0x9c>
 800eeae:	9b03      	ldr	r3, [sp, #12]
 800eeb0:	1d19      	adds	r1, r3, #4
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	9103      	str	r1, [sp, #12]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	bfbb      	ittet	lt
 800eeba:	425b      	neglt	r3, r3
 800eebc:	f042 0202 	orrlt.w	r2, r2, #2
 800eec0:	9307      	strge	r3, [sp, #28]
 800eec2:	9307      	strlt	r3, [sp, #28]
 800eec4:	bfb8      	it	lt
 800eec6:	9204      	strlt	r2, [sp, #16]
 800eec8:	7823      	ldrb	r3, [r4, #0]
 800eeca:	2b2e      	cmp	r3, #46	; 0x2e
 800eecc:	d10c      	bne.n	800eee8 <_svfiprintf_r+0x130>
 800eece:	7863      	ldrb	r3, [r4, #1]
 800eed0:	2b2a      	cmp	r3, #42	; 0x2a
 800eed2:	d135      	bne.n	800ef40 <_svfiprintf_r+0x188>
 800eed4:	9b03      	ldr	r3, [sp, #12]
 800eed6:	1d1a      	adds	r2, r3, #4
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	9203      	str	r2, [sp, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	bfb8      	it	lt
 800eee0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eee4:	3402      	adds	r4, #2
 800eee6:	9305      	str	r3, [sp, #20]
 800eee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800efb4 <_svfiprintf_r+0x1fc>
 800eeec:	7821      	ldrb	r1, [r4, #0]
 800eeee:	2203      	movs	r2, #3
 800eef0:	4650      	mov	r0, sl
 800eef2:	f7f1 f975 	bl	80001e0 <memchr>
 800eef6:	b140      	cbz	r0, 800ef0a <_svfiprintf_r+0x152>
 800eef8:	2340      	movs	r3, #64	; 0x40
 800eefa:	eba0 000a 	sub.w	r0, r0, sl
 800eefe:	fa03 f000 	lsl.w	r0, r3, r0
 800ef02:	9b04      	ldr	r3, [sp, #16]
 800ef04:	4303      	orrs	r3, r0
 800ef06:	3401      	adds	r4, #1
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef0e:	4826      	ldr	r0, [pc, #152]	; (800efa8 <_svfiprintf_r+0x1f0>)
 800ef10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef14:	2206      	movs	r2, #6
 800ef16:	f7f1 f963 	bl	80001e0 <memchr>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d038      	beq.n	800ef90 <_svfiprintf_r+0x1d8>
 800ef1e:	4b23      	ldr	r3, [pc, #140]	; (800efac <_svfiprintf_r+0x1f4>)
 800ef20:	bb1b      	cbnz	r3, 800ef6a <_svfiprintf_r+0x1b2>
 800ef22:	9b03      	ldr	r3, [sp, #12]
 800ef24:	3307      	adds	r3, #7
 800ef26:	f023 0307 	bic.w	r3, r3, #7
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	9303      	str	r3, [sp, #12]
 800ef2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef30:	4433      	add	r3, r6
 800ef32:	9309      	str	r3, [sp, #36]	; 0x24
 800ef34:	e767      	b.n	800ee06 <_svfiprintf_r+0x4e>
 800ef36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	2001      	movs	r0, #1
 800ef3e:	e7a5      	b.n	800ee8c <_svfiprintf_r+0xd4>
 800ef40:	2300      	movs	r3, #0
 800ef42:	3401      	adds	r4, #1
 800ef44:	9305      	str	r3, [sp, #20]
 800ef46:	4619      	mov	r1, r3
 800ef48:	f04f 0c0a 	mov.w	ip, #10
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef52:	3a30      	subs	r2, #48	; 0x30
 800ef54:	2a09      	cmp	r2, #9
 800ef56:	d903      	bls.n	800ef60 <_svfiprintf_r+0x1a8>
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0c5      	beq.n	800eee8 <_svfiprintf_r+0x130>
 800ef5c:	9105      	str	r1, [sp, #20]
 800ef5e:	e7c3      	b.n	800eee8 <_svfiprintf_r+0x130>
 800ef60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef64:	4604      	mov	r4, r0
 800ef66:	2301      	movs	r3, #1
 800ef68:	e7f0      	b.n	800ef4c <_svfiprintf_r+0x194>
 800ef6a:	ab03      	add	r3, sp, #12
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	462a      	mov	r2, r5
 800ef70:	4b0f      	ldr	r3, [pc, #60]	; (800efb0 <_svfiprintf_r+0x1f8>)
 800ef72:	a904      	add	r1, sp, #16
 800ef74:	4638      	mov	r0, r7
 800ef76:	f3af 8000 	nop.w
 800ef7a:	1c42      	adds	r2, r0, #1
 800ef7c:	4606      	mov	r6, r0
 800ef7e:	d1d6      	bne.n	800ef2e <_svfiprintf_r+0x176>
 800ef80:	89ab      	ldrh	r3, [r5, #12]
 800ef82:	065b      	lsls	r3, r3, #25
 800ef84:	f53f af2c 	bmi.w	800ede0 <_svfiprintf_r+0x28>
 800ef88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef8a:	b01d      	add	sp, #116	; 0x74
 800ef8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef90:	ab03      	add	r3, sp, #12
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	462a      	mov	r2, r5
 800ef96:	4b06      	ldr	r3, [pc, #24]	; (800efb0 <_svfiprintf_r+0x1f8>)
 800ef98:	a904      	add	r1, sp, #16
 800ef9a:	4638      	mov	r0, r7
 800ef9c:	f000 f87a 	bl	800f094 <_printf_i>
 800efa0:	e7eb      	b.n	800ef7a <_svfiprintf_r+0x1c2>
 800efa2:	bf00      	nop
 800efa4:	0800f980 	.word	0x0800f980
 800efa8:	0800f98a 	.word	0x0800f98a
 800efac:	00000000 	.word	0x00000000
 800efb0:	0800ed01 	.word	0x0800ed01
 800efb4:	0800f986 	.word	0x0800f986

0800efb8 <_printf_common>:
 800efb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efbc:	4616      	mov	r6, r2
 800efbe:	4699      	mov	r9, r3
 800efc0:	688a      	ldr	r2, [r1, #8]
 800efc2:	690b      	ldr	r3, [r1, #16]
 800efc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efc8:	4293      	cmp	r3, r2
 800efca:	bfb8      	it	lt
 800efcc:	4613      	movlt	r3, r2
 800efce:	6033      	str	r3, [r6, #0]
 800efd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efd4:	4607      	mov	r7, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b10a      	cbz	r2, 800efde <_printf_common+0x26>
 800efda:	3301      	adds	r3, #1
 800efdc:	6033      	str	r3, [r6, #0]
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	0699      	lsls	r1, r3, #26
 800efe2:	bf42      	ittt	mi
 800efe4:	6833      	ldrmi	r3, [r6, #0]
 800efe6:	3302      	addmi	r3, #2
 800efe8:	6033      	strmi	r3, [r6, #0]
 800efea:	6825      	ldr	r5, [r4, #0]
 800efec:	f015 0506 	ands.w	r5, r5, #6
 800eff0:	d106      	bne.n	800f000 <_printf_common+0x48>
 800eff2:	f104 0a19 	add.w	sl, r4, #25
 800eff6:	68e3      	ldr	r3, [r4, #12]
 800eff8:	6832      	ldr	r2, [r6, #0]
 800effa:	1a9b      	subs	r3, r3, r2
 800effc:	42ab      	cmp	r3, r5
 800effe:	dc26      	bgt.n	800f04e <_printf_common+0x96>
 800f000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f004:	1e13      	subs	r3, r2, #0
 800f006:	6822      	ldr	r2, [r4, #0]
 800f008:	bf18      	it	ne
 800f00a:	2301      	movne	r3, #1
 800f00c:	0692      	lsls	r2, r2, #26
 800f00e:	d42b      	bmi.n	800f068 <_printf_common+0xb0>
 800f010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f014:	4649      	mov	r1, r9
 800f016:	4638      	mov	r0, r7
 800f018:	47c0      	blx	r8
 800f01a:	3001      	adds	r0, #1
 800f01c:	d01e      	beq.n	800f05c <_printf_common+0xa4>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	68e5      	ldr	r5, [r4, #12]
 800f022:	6832      	ldr	r2, [r6, #0]
 800f024:	f003 0306 	and.w	r3, r3, #6
 800f028:	2b04      	cmp	r3, #4
 800f02a:	bf08      	it	eq
 800f02c:	1aad      	subeq	r5, r5, r2
 800f02e:	68a3      	ldr	r3, [r4, #8]
 800f030:	6922      	ldr	r2, [r4, #16]
 800f032:	bf0c      	ite	eq
 800f034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f038:	2500      	movne	r5, #0
 800f03a:	4293      	cmp	r3, r2
 800f03c:	bfc4      	itt	gt
 800f03e:	1a9b      	subgt	r3, r3, r2
 800f040:	18ed      	addgt	r5, r5, r3
 800f042:	2600      	movs	r6, #0
 800f044:	341a      	adds	r4, #26
 800f046:	42b5      	cmp	r5, r6
 800f048:	d11a      	bne.n	800f080 <_printf_common+0xc8>
 800f04a:	2000      	movs	r0, #0
 800f04c:	e008      	b.n	800f060 <_printf_common+0xa8>
 800f04e:	2301      	movs	r3, #1
 800f050:	4652      	mov	r2, sl
 800f052:	4649      	mov	r1, r9
 800f054:	4638      	mov	r0, r7
 800f056:	47c0      	blx	r8
 800f058:	3001      	adds	r0, #1
 800f05a:	d103      	bne.n	800f064 <_printf_common+0xac>
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	3501      	adds	r5, #1
 800f066:	e7c6      	b.n	800eff6 <_printf_common+0x3e>
 800f068:	18e1      	adds	r1, r4, r3
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	2030      	movs	r0, #48	; 0x30
 800f06e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f072:	4422      	add	r2, r4
 800f074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f07c:	3302      	adds	r3, #2
 800f07e:	e7c7      	b.n	800f010 <_printf_common+0x58>
 800f080:	2301      	movs	r3, #1
 800f082:	4622      	mov	r2, r4
 800f084:	4649      	mov	r1, r9
 800f086:	4638      	mov	r0, r7
 800f088:	47c0      	blx	r8
 800f08a:	3001      	adds	r0, #1
 800f08c:	d0e6      	beq.n	800f05c <_printf_common+0xa4>
 800f08e:	3601      	adds	r6, #1
 800f090:	e7d9      	b.n	800f046 <_printf_common+0x8e>
	...

0800f094 <_printf_i>:
 800f094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	4691      	mov	r9, r2
 800f09c:	7e27      	ldrb	r7, [r4, #24]
 800f09e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f0a0:	2f78      	cmp	r7, #120	; 0x78
 800f0a2:	4680      	mov	r8, r0
 800f0a4:	469a      	mov	sl, r3
 800f0a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f0aa:	d807      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ac:	2f62      	cmp	r7, #98	; 0x62
 800f0ae:	d80a      	bhi.n	800f0c6 <_printf_i+0x32>
 800f0b0:	2f00      	cmp	r7, #0
 800f0b2:	f000 80d8 	beq.w	800f266 <_printf_i+0x1d2>
 800f0b6:	2f58      	cmp	r7, #88	; 0x58
 800f0b8:	f000 80a3 	beq.w	800f202 <_printf_i+0x16e>
 800f0bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0c4:	e03a      	b.n	800f13c <_printf_i+0xa8>
 800f0c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0ca:	2b15      	cmp	r3, #21
 800f0cc:	d8f6      	bhi.n	800f0bc <_printf_i+0x28>
 800f0ce:	a001      	add	r0, pc, #4	; (adr r0, 800f0d4 <_printf_i+0x40>)
 800f0d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f0d4:	0800f12d 	.word	0x0800f12d
 800f0d8:	0800f141 	.word	0x0800f141
 800f0dc:	0800f0bd 	.word	0x0800f0bd
 800f0e0:	0800f0bd 	.word	0x0800f0bd
 800f0e4:	0800f0bd 	.word	0x0800f0bd
 800f0e8:	0800f0bd 	.word	0x0800f0bd
 800f0ec:	0800f141 	.word	0x0800f141
 800f0f0:	0800f0bd 	.word	0x0800f0bd
 800f0f4:	0800f0bd 	.word	0x0800f0bd
 800f0f8:	0800f0bd 	.word	0x0800f0bd
 800f0fc:	0800f0bd 	.word	0x0800f0bd
 800f100:	0800f24d 	.word	0x0800f24d
 800f104:	0800f171 	.word	0x0800f171
 800f108:	0800f22f 	.word	0x0800f22f
 800f10c:	0800f0bd 	.word	0x0800f0bd
 800f110:	0800f0bd 	.word	0x0800f0bd
 800f114:	0800f26f 	.word	0x0800f26f
 800f118:	0800f0bd 	.word	0x0800f0bd
 800f11c:	0800f171 	.word	0x0800f171
 800f120:	0800f0bd 	.word	0x0800f0bd
 800f124:	0800f0bd 	.word	0x0800f0bd
 800f128:	0800f237 	.word	0x0800f237
 800f12c:	680b      	ldr	r3, [r1, #0]
 800f12e:	1d1a      	adds	r2, r3, #4
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	600a      	str	r2, [r1, #0]
 800f134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f13c:	2301      	movs	r3, #1
 800f13e:	e0a3      	b.n	800f288 <_printf_i+0x1f4>
 800f140:	6825      	ldr	r5, [r4, #0]
 800f142:	6808      	ldr	r0, [r1, #0]
 800f144:	062e      	lsls	r6, r5, #24
 800f146:	f100 0304 	add.w	r3, r0, #4
 800f14a:	d50a      	bpl.n	800f162 <_printf_i+0xce>
 800f14c:	6805      	ldr	r5, [r0, #0]
 800f14e:	600b      	str	r3, [r1, #0]
 800f150:	2d00      	cmp	r5, #0
 800f152:	da03      	bge.n	800f15c <_printf_i+0xc8>
 800f154:	232d      	movs	r3, #45	; 0x2d
 800f156:	426d      	negs	r5, r5
 800f158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f15c:	485e      	ldr	r0, [pc, #376]	; (800f2d8 <_printf_i+0x244>)
 800f15e:	230a      	movs	r3, #10
 800f160:	e019      	b.n	800f196 <_printf_i+0x102>
 800f162:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f166:	6805      	ldr	r5, [r0, #0]
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	bf18      	it	ne
 800f16c:	b22d      	sxthne	r5, r5
 800f16e:	e7ef      	b.n	800f150 <_printf_i+0xbc>
 800f170:	680b      	ldr	r3, [r1, #0]
 800f172:	6825      	ldr	r5, [r4, #0]
 800f174:	1d18      	adds	r0, r3, #4
 800f176:	6008      	str	r0, [r1, #0]
 800f178:	0628      	lsls	r0, r5, #24
 800f17a:	d501      	bpl.n	800f180 <_printf_i+0xec>
 800f17c:	681d      	ldr	r5, [r3, #0]
 800f17e:	e002      	b.n	800f186 <_printf_i+0xf2>
 800f180:	0669      	lsls	r1, r5, #25
 800f182:	d5fb      	bpl.n	800f17c <_printf_i+0xe8>
 800f184:	881d      	ldrh	r5, [r3, #0]
 800f186:	4854      	ldr	r0, [pc, #336]	; (800f2d8 <_printf_i+0x244>)
 800f188:	2f6f      	cmp	r7, #111	; 0x6f
 800f18a:	bf0c      	ite	eq
 800f18c:	2308      	moveq	r3, #8
 800f18e:	230a      	movne	r3, #10
 800f190:	2100      	movs	r1, #0
 800f192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f196:	6866      	ldr	r6, [r4, #4]
 800f198:	60a6      	str	r6, [r4, #8]
 800f19a:	2e00      	cmp	r6, #0
 800f19c:	bfa2      	ittt	ge
 800f19e:	6821      	ldrge	r1, [r4, #0]
 800f1a0:	f021 0104 	bicge.w	r1, r1, #4
 800f1a4:	6021      	strge	r1, [r4, #0]
 800f1a6:	b90d      	cbnz	r5, 800f1ac <_printf_i+0x118>
 800f1a8:	2e00      	cmp	r6, #0
 800f1aa:	d04d      	beq.n	800f248 <_printf_i+0x1b4>
 800f1ac:	4616      	mov	r6, r2
 800f1ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1b2:	fb03 5711 	mls	r7, r3, r1, r5
 800f1b6:	5dc7      	ldrb	r7, [r0, r7]
 800f1b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1bc:	462f      	mov	r7, r5
 800f1be:	42bb      	cmp	r3, r7
 800f1c0:	460d      	mov	r5, r1
 800f1c2:	d9f4      	bls.n	800f1ae <_printf_i+0x11a>
 800f1c4:	2b08      	cmp	r3, #8
 800f1c6:	d10b      	bne.n	800f1e0 <_printf_i+0x14c>
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	07df      	lsls	r7, r3, #31
 800f1cc:	d508      	bpl.n	800f1e0 <_printf_i+0x14c>
 800f1ce:	6923      	ldr	r3, [r4, #16]
 800f1d0:	6861      	ldr	r1, [r4, #4]
 800f1d2:	4299      	cmp	r1, r3
 800f1d4:	bfde      	ittt	le
 800f1d6:	2330      	movle	r3, #48	; 0x30
 800f1d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1e0:	1b92      	subs	r2, r2, r6
 800f1e2:	6122      	str	r2, [r4, #16]
 800f1e4:	f8cd a000 	str.w	sl, [sp]
 800f1e8:	464b      	mov	r3, r9
 800f1ea:	aa03      	add	r2, sp, #12
 800f1ec:	4621      	mov	r1, r4
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	f7ff fee2 	bl	800efb8 <_printf_common>
 800f1f4:	3001      	adds	r0, #1
 800f1f6:	d14c      	bne.n	800f292 <_printf_i+0x1fe>
 800f1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fc:	b004      	add	sp, #16
 800f1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f202:	4835      	ldr	r0, [pc, #212]	; (800f2d8 <_printf_i+0x244>)
 800f204:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f208:	6823      	ldr	r3, [r4, #0]
 800f20a:	680e      	ldr	r6, [r1, #0]
 800f20c:	061f      	lsls	r7, r3, #24
 800f20e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f212:	600e      	str	r6, [r1, #0]
 800f214:	d514      	bpl.n	800f240 <_printf_i+0x1ac>
 800f216:	07d9      	lsls	r1, r3, #31
 800f218:	bf44      	itt	mi
 800f21a:	f043 0320 	orrmi.w	r3, r3, #32
 800f21e:	6023      	strmi	r3, [r4, #0]
 800f220:	b91d      	cbnz	r5, 800f22a <_printf_i+0x196>
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	f023 0320 	bic.w	r3, r3, #32
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	2310      	movs	r3, #16
 800f22c:	e7b0      	b.n	800f190 <_printf_i+0xfc>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f043 0320 	orr.w	r3, r3, #32
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	2378      	movs	r3, #120	; 0x78
 800f238:	4828      	ldr	r0, [pc, #160]	; (800f2dc <_printf_i+0x248>)
 800f23a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f23e:	e7e3      	b.n	800f208 <_printf_i+0x174>
 800f240:	065e      	lsls	r6, r3, #25
 800f242:	bf48      	it	mi
 800f244:	b2ad      	uxthmi	r5, r5
 800f246:	e7e6      	b.n	800f216 <_printf_i+0x182>
 800f248:	4616      	mov	r6, r2
 800f24a:	e7bb      	b.n	800f1c4 <_printf_i+0x130>
 800f24c:	680b      	ldr	r3, [r1, #0]
 800f24e:	6826      	ldr	r6, [r4, #0]
 800f250:	6960      	ldr	r0, [r4, #20]
 800f252:	1d1d      	adds	r5, r3, #4
 800f254:	600d      	str	r5, [r1, #0]
 800f256:	0635      	lsls	r5, r6, #24
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	d501      	bpl.n	800f260 <_printf_i+0x1cc>
 800f25c:	6018      	str	r0, [r3, #0]
 800f25e:	e002      	b.n	800f266 <_printf_i+0x1d2>
 800f260:	0671      	lsls	r1, r6, #25
 800f262:	d5fb      	bpl.n	800f25c <_printf_i+0x1c8>
 800f264:	8018      	strh	r0, [r3, #0]
 800f266:	2300      	movs	r3, #0
 800f268:	6123      	str	r3, [r4, #16]
 800f26a:	4616      	mov	r6, r2
 800f26c:	e7ba      	b.n	800f1e4 <_printf_i+0x150>
 800f26e:	680b      	ldr	r3, [r1, #0]
 800f270:	1d1a      	adds	r2, r3, #4
 800f272:	600a      	str	r2, [r1, #0]
 800f274:	681e      	ldr	r6, [r3, #0]
 800f276:	6862      	ldr	r2, [r4, #4]
 800f278:	2100      	movs	r1, #0
 800f27a:	4630      	mov	r0, r6
 800f27c:	f7f0 ffb0 	bl	80001e0 <memchr>
 800f280:	b108      	cbz	r0, 800f286 <_printf_i+0x1f2>
 800f282:	1b80      	subs	r0, r0, r6
 800f284:	6060      	str	r0, [r4, #4]
 800f286:	6863      	ldr	r3, [r4, #4]
 800f288:	6123      	str	r3, [r4, #16]
 800f28a:	2300      	movs	r3, #0
 800f28c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f290:	e7a8      	b.n	800f1e4 <_printf_i+0x150>
 800f292:	6923      	ldr	r3, [r4, #16]
 800f294:	4632      	mov	r2, r6
 800f296:	4649      	mov	r1, r9
 800f298:	4640      	mov	r0, r8
 800f29a:	47d0      	blx	sl
 800f29c:	3001      	adds	r0, #1
 800f29e:	d0ab      	beq.n	800f1f8 <_printf_i+0x164>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	079b      	lsls	r3, r3, #30
 800f2a4:	d413      	bmi.n	800f2ce <_printf_i+0x23a>
 800f2a6:	68e0      	ldr	r0, [r4, #12]
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	4298      	cmp	r0, r3
 800f2ac:	bfb8      	it	lt
 800f2ae:	4618      	movlt	r0, r3
 800f2b0:	e7a4      	b.n	800f1fc <_printf_i+0x168>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	4632      	mov	r2, r6
 800f2b6:	4649      	mov	r1, r9
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	47d0      	blx	sl
 800f2bc:	3001      	adds	r0, #1
 800f2be:	d09b      	beq.n	800f1f8 <_printf_i+0x164>
 800f2c0:	3501      	adds	r5, #1
 800f2c2:	68e3      	ldr	r3, [r4, #12]
 800f2c4:	9903      	ldr	r1, [sp, #12]
 800f2c6:	1a5b      	subs	r3, r3, r1
 800f2c8:	42ab      	cmp	r3, r5
 800f2ca:	dcf2      	bgt.n	800f2b2 <_printf_i+0x21e>
 800f2cc:	e7eb      	b.n	800f2a6 <_printf_i+0x212>
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	f104 0619 	add.w	r6, r4, #25
 800f2d4:	e7f5      	b.n	800f2c2 <_printf_i+0x22e>
 800f2d6:	bf00      	nop
 800f2d8:	0800f991 	.word	0x0800f991
 800f2dc:	0800f9a2 	.word	0x0800f9a2

0800f2e0 <memmove>:
 800f2e0:	4288      	cmp	r0, r1
 800f2e2:	b510      	push	{r4, lr}
 800f2e4:	eb01 0402 	add.w	r4, r1, r2
 800f2e8:	d902      	bls.n	800f2f0 <memmove+0x10>
 800f2ea:	4284      	cmp	r4, r0
 800f2ec:	4623      	mov	r3, r4
 800f2ee:	d807      	bhi.n	800f300 <memmove+0x20>
 800f2f0:	1e43      	subs	r3, r0, #1
 800f2f2:	42a1      	cmp	r1, r4
 800f2f4:	d008      	beq.n	800f308 <memmove+0x28>
 800f2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2fe:	e7f8      	b.n	800f2f2 <memmove+0x12>
 800f300:	4402      	add	r2, r0
 800f302:	4601      	mov	r1, r0
 800f304:	428a      	cmp	r2, r1
 800f306:	d100      	bne.n	800f30a <memmove+0x2a>
 800f308:	bd10      	pop	{r4, pc}
 800f30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f312:	e7f7      	b.n	800f304 <memmove+0x24>

0800f314 <_realloc_r>:
 800f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f316:	4607      	mov	r7, r0
 800f318:	4614      	mov	r4, r2
 800f31a:	460e      	mov	r6, r1
 800f31c:	b921      	cbnz	r1, 800f328 <_realloc_r+0x14>
 800f31e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f322:	4611      	mov	r1, r2
 800f324:	f7ff bb84 	b.w	800ea30 <_malloc_r>
 800f328:	b922      	cbnz	r2, 800f334 <_realloc_r+0x20>
 800f32a:	f7ff fc99 	bl	800ec60 <_free_r>
 800f32e:	4625      	mov	r5, r4
 800f330:	4628      	mov	r0, r5
 800f332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f334:	f000 f814 	bl	800f360 <_malloc_usable_size_r>
 800f338:	42a0      	cmp	r0, r4
 800f33a:	d20f      	bcs.n	800f35c <_realloc_r+0x48>
 800f33c:	4621      	mov	r1, r4
 800f33e:	4638      	mov	r0, r7
 800f340:	f7ff fb76 	bl	800ea30 <_malloc_r>
 800f344:	4605      	mov	r5, r0
 800f346:	2800      	cmp	r0, #0
 800f348:	d0f2      	beq.n	800f330 <_realloc_r+0x1c>
 800f34a:	4631      	mov	r1, r6
 800f34c:	4622      	mov	r2, r4
 800f34e:	f7ff fb59 	bl	800ea04 <memcpy>
 800f352:	4631      	mov	r1, r6
 800f354:	4638      	mov	r0, r7
 800f356:	f7ff fc83 	bl	800ec60 <_free_r>
 800f35a:	e7e9      	b.n	800f330 <_realloc_r+0x1c>
 800f35c:	4635      	mov	r5, r6
 800f35e:	e7e7      	b.n	800f330 <_realloc_r+0x1c>

0800f360 <_malloc_usable_size_r>:
 800f360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f364:	1f18      	subs	r0, r3, #4
 800f366:	2b00      	cmp	r3, #0
 800f368:	bfbc      	itt	lt
 800f36a:	580b      	ldrlt	r3, [r1, r0]
 800f36c:	18c0      	addlt	r0, r0, r3
 800f36e:	4770      	bx	lr

0800f370 <_init>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	bf00      	nop
 800f374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f376:	bc08      	pop	{r3}
 800f378:	469e      	mov	lr, r3
 800f37a:	4770      	bx	lr

0800f37c <_fini>:
 800f37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f37e:	bf00      	nop
 800f380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f382:	bc08      	pop	{r3}
 800f384:	469e      	mov	lr, r3
 800f386:	4770      	bx	lr
